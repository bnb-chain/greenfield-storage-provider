syntax = "proto3";
package base.types.gfsptask;

import "base/types/gfsperrors/error.proto";
import "greenfield/sp/types.proto";
import "greenfield/storage/params.proto";
import "greenfield/storage/tx.proto";
import "greenfield/storage/types.proto";
import "greenfield/virtualgroup/types.proto";

option go_package = "github.com/bnb-chain/greenfield-storage-provider/base/types/gfsptask";

message GfSpTask {
  string address = 1;
  int64 create_time = 2;
  int64 update_time = 3;
  int64 timeout = 4;
  int32 task_priority = 5;
  int64 retry = 6;
  int64 max_retry = 7;
  string user_address = 8;
  string logs = 9;
  base.types.gfsperrors.GfSpError err = 10;
}

message GfSpCreateBucketApprovalTask {
  GfSpTask task = 1;
  greenfield.storage.MsgCreateBucket create_bucket_info = 2;
  bytes fingerprint = 3;
}

message GfSpMigrateBucketApprovalTask {
  GfSpTask task = 1;
  greenfield.storage.MsgMigrateBucket migrate_bucket_info = 2;
}

message GfSpCreateObjectApprovalTask {
  GfSpTask task = 1;
  greenfield.storage.MsgCreateObject create_object_info = 2;
  bytes fingerprint = 3;
}

message GfSpDelegateCreateObjectApprovalTask {
  GfSpTask task = 1;
  greenfield.storage.MsgDelegateCreateObject delegate_create_object = 2;
  bytes fingerprint = 3;
}

message GfSpReplicatePieceApprovalTask {
  GfSpTask task = 1;
  greenfield.storage.ObjectInfo object_info = 2;
  greenfield.storage.Params storage_params = 3;
  string ask_sp_operator_address = 4;
  bytes ask_signature = 5;
  string approved_sp_endpoint = 6;
  string approved_sp_operator_address = 7;
  bytes approved_signature = 8;
  string approved_sp_approval_address = 9;
  uint64 expired_height = 10;
}

message GfSpUploadObjectTask {
  GfSpTask task = 1;
  uint32 virtual_group_family_id = 2;
  greenfield.storage.ObjectInfo object_info = 3;
  greenfield.storage.Params storage_params = 4;
  bool is_agent_upload = 5;
}

message GfSpResumableUploadObjectTask {
  GfSpTask task = 1;
  greenfield.storage.ObjectInfo object_info = 2;
  greenfield.storage.Params storage_params = 3;
  uint64 offset = 4;
  uint64 length = 5;
  bool completed = 6;
  uint32 virtual_group_family_id = 7;
  bool is_agent_upload = 8;
}

message GfSpReplicatePieceTask {
  GfSpTask task = 1;
  greenfield.storage.ObjectInfo object_info = 2;
  greenfield.storage.Params storage_params = 3;
  repeated string secondary_addresses = 4;
  repeated bytes secondary_signatures = 5;
  bool sealed = 6;
  uint32 global_virtual_group_id = 7;
  repeated string secondary_endpoints = 8;
  int32 not_available_sp_idx = 9;
  bool is_agent_upload_task = 10;
}

message GfSpRecoverPieceTask {
  GfSpTask task = 1;
  greenfield.storage.ObjectInfo object_info = 2;
  greenfield.storage.Params storage_params = 3;
  uint32 segment_idx = 4;
  int32 ec_idx = 5;
  uint64 piece_size = 6;
  bytes signature = 7;
  bool recovered = 8;
  bool by_successor_sp = 9;
  uint32 gvg_id = 10;
}

message GfSpReceivePieceTask {
  GfSpTask task = 1;
  greenfield.storage.ObjectInfo object_info = 2;
  greenfield.storage.Params storage_params = 3;
  uint32 segment_idx = 4;
  int32 redundancy_idx = 5;
  int64 piece_size = 6;
  bytes piece_checksum = 7;
  bytes signature = 8;
  bool sealed = 9;
  bool finished = 10;
  uint32 global_virtual_group_id = 11;
  bool bucket_migration = 12;
  bool is_agent_upload_task = 13;
}

message GfSpSealObjectTask {
  GfSpTask task = 1;
  greenfield.storage.ObjectInfo object_info = 2;
  greenfield.storage.Params storage_params = 3;
  repeated string secondary_addresses = 4;
  repeated bytes secondary_signatures = 5;
  uint32 global_virtual_group_id = 6;
  repeated string secondary_endpoints = 7;
}

message GfSpDownloadObjectTask {
  GfSpTask task = 1;
  greenfield.storage.ObjectInfo object_info = 2;
  greenfield.storage.BucketInfo bucket_info = 3;
  greenfield.storage.Params storage_params = 4;
  int64 low = 5;
  int64 high = 6;
}

message GfSpDownloadPieceTask {
  GfSpTask task = 1;
  greenfield.storage.ObjectInfo object_info = 2;
  greenfield.storage.BucketInfo bucket_info = 3;
  greenfield.storage.Params storage_params = 4;
  bool enable_check = 5; // check read quota, only in first piece
  uint64 total_size = 6;
  string piece_key = 7;
  uint64 piece_offset = 8;
  uint64 piece_length = 9;
}

message GfSpChallengePieceTask {
  GfSpTask task = 1;
  greenfield.storage.ObjectInfo object_info = 2;
  greenfield.storage.BucketInfo bucket_info = 3;
  greenfield.storage.Params storage_params = 4;
  uint32 segment_idx = 5;
  int32 redundancy_idx = 6;
  bytes integrity_hash = 7;
  repeated bytes piece_hash = 8;
  int64 piece_data_size = 9;
}

message GfSpGCObjectTask {
  GfSpTask task = 1;
  uint64 start_block_number = 2;
  uint64 end_block_number = 3;
  uint64 current_block_number = 4;
  uint64 last_deleted_object_id = 5;
  bool running = 6;
}

message GfSpGCZombiePieceTask {
  GfSpTask task = 1;
  bool running = 2;
  uint64 start_object_id = 3;
  uint64 end_object_id = 4;
  bool finished = 5;
}

message GfSpGCStaleVersionObjectTask {
  GfSpTask task = 1;
  uint64 object_id = 2;
  int32 redundancy_index = 3;
  int64 version = 4;
  bytes integrity_checksum = 5;
  repeated bytes piece_checksum_list = 6;
}

message GfSpGCMetaTask {
  GfSpTask task = 1;
  uint64 current_idx = 2;
  uint64 delete_count = 3;
}

message GfSpMigrateGVGTask {
  GfSpTask task = 1;
  uint64 bucket_id = 2;
  greenfield.virtualgroup.GlobalVirtualGroup src_gvg = 3;
  greenfield.virtualgroup.GlobalVirtualGroup dest_gvg = 4;
  int32 redundancy_idx = 5;
  greenfield.sp.StorageProvider src_sp = 6;
  uint64 last_migrated_object_id = 7;
  bool finished = 8;
  int64 expire_time = 9;
  bytes signature = 10;
  uint64 migrated_bytes_size = 11;
}

message GfSpMigratePieceTask {
  GfSpTask task = 1;
  greenfield.storage.ObjectInfo object_info = 2;
  greenfield.storage.Params storage_params = 3;
  string src_sp_endpoint = 4;
  uint32 segment_idx = 5;
  int32 redundancy_idx = 6;
  bool is_bucket_migrate = 7;
}

message GfSpGCBucketMigrationTask {
  GfSpTask task = 1;
  uint64 bucket_id = 2;
  uint64 last_gc_object_id = 3;
  uint64 last_gc_gvg_id = 4;
  // whether the gc of bucket migration succeed
  bool finished = 5;
  uint64 total_gvg_num = 6; // the bucket migration gc total gvg num
  uint64 gc_finished_gvg_num = 7; // gc has finished gvg num
}

message GfSpBucketMigrationInfo {
  uint64 bucket_id = 1;
  // whether the migrate bucket succeed
  bool finished = 2;
  // total migrated bytes
  uint64 migrated_bytes_size = 3;
  greenfield.sp.StorageProvider dest_sp = 4;
  greenfield.sp.StorageProvider src_sp = 5;
  int64 expire_time = 6;
  bytes signature = 7;
}

message GfSpBucketQuotaInfo {
  uint64 bucket_id = 1;
  string month = 2;
  string bucket_name = 3;
  // the consumed chargedQuota of this month
  uint64 read_consumed_size = 4;
  // the consumed free quota size of this month
  uint64 free_quota_consumed_size = 5;
  // the remained free quota
  uint64 free_quota_size = 6;
  // the greenfield chain bucket charged quota
  uint64 charged_quota_size = 7;
  // used to check if the src sp has enough quota to execute bucket migration
  bool allow_migrate = 8;
  // the remained monthly free quota
  uint64 monthly_free_quota_size = 9;
  // the consumed monthly free quota size of this month
  uint64 monthly_free_quota_consumed_size = 10;
}
