syntax = "proto3";
package service.metadata.types;

import "greenfield/storage/types.proto";
import "greenfield/storage/query.proto";
import "greenfield/payment/stream_record.proto";

option go_package = "github.com/bnb-chain/greenfield-storage-provider/metadata/types";

// Bucket is the structure for user bucket
message Bucket {
  // bucket_info defines the information of the bucket.
  bnbchain.greenfield.storage.BucketInfo bucket_info = 1;
  // removed defines the bucket is deleted or not
  bool removed = 2;
  // delete_at defines the block number when the bucket deleted.
  int64 delete_at = 3;
  // delete_reason defines the deleted reason of bucket
  string delete_reason = 4;
  // operator defines the operator address of bucket
  string operator = 5;
  // create_tx_hash defines the creation transaction hash of object
  string create_tx_hash = 6;
  // update_tx_hash defines the update transaction hash of object
  string update_tx_hash = 7;
  // update_at defines the block number when the object updated
  int64 update_at = 8;
  // update_time defines the block number when the object updated
  int64 update_time = 9;
}

// Object is the structure for user object
message Object {
  // object_info defines the information of the object.
  bnbchain.greenfield.storage.ObjectInfo object_info = 1;
  // locked_balance defines locked balance of object
  string locked_balance = 2;
  // removed defines the object is deleted or not
  bool removed = 3;
  // update_at defines the block number when the object updated
  int64 update_at = 4;
  // delete_at defines the block number when the object deleted
  int64 delete_at = 5;
  // delete_reason defines the deleted reason of object
  string delete_reason = 6;
  // operator defines the operator address of object
  string operator = 7;
  // create_tx_hash defines the creation transaction hash of object
  string create_tx_hash = 8;
  // update_tx_hash defines the update transaction hash of object
  string update_tx_hash = 9;
  // sealed_tx_hash defines the sealed transaction hash of object
  string sealed_tx_hash = 10;
}

// GetUserBucketsRequest is request type for the GetUserBuckets RPC method.
message GetUserBucketsRequest {
  // account_id is the account address of user
  string account_id = 1;
}

// ListObjectsByBucketNameRequest is request type for the ListObjectsByBucketName RPC method
message ListObjectsByBucketNameRequest {
  // bucket_name is the name of the bucket
  string bucket_name = 1;
  // account_id is the account address of user
  string account_id = 2;
}

// GetBucketByBucketNameRequest is request type for the GetBucketByBucketName RPC method
message GetBucketByBucketNameRequest {
  // bucket_name is the name of the bucket
  string bucket_name = 1;
  // is_full_list indicates whether this request can get the private buckets information
  bool is_full_list = 2;
}

// GetBucketByBucketIDRequest is request type for the GetBucketByBucketID RPC method
message GetBucketByBucketIDRequest {
  // bucket_id is the unique identifier of bucket
  int64 bucket_id = 1;
  // is_full_list indicates whether this request can get the private buckets information
  bool is_full_list = 2;
}

// ListDeletedObjectsByBlockNumberRangeRequest is request type for the ListDeletedObjectsByBlockNumberRange RPC method
message ListDeletedObjectsByBlockNumberRangeRequest {
  // start_block_number defines the start of range
  // [start_block_number, end_block_number], start_block_number > end_block_number is invalid
  int64 start_block_number = 1;
  // end_block_number defines the end of range
  // end_block_number < 0 or start_block_number > end_block_number is invalid
  int64 end_block_number = 2;
  // is_full_list indicates whether this request can get the private objects information
  bool is_full_list = 3;
}

// GetUserBucketsCountRequest is request type for the GetUserBucketsCount RPC method.
message GetUserBucketsCountRequest {
  // account_id is the account address of user
  string account_id = 1;
}

// ListExpiredBucketsBySpRequest is the request type for the ListExpiredBucketsBySp RPC method.
message ListExpiredBucketsBySpRequest {
  // create_at defines the create timestamp of bucket
  int64 create_at = 1;
  // primary_sp_address defines the primary sp address of bucket
  string primary_sp_address = 2;
  // limit defines the return number limit of bucket
  int64 limit = 3;
}

// GetObjectByObjectNameAndBucketNameRequest is request type for the GetObjectByObjectNameAndBucketName RPC method
message GetObjectByObjectNameAndBucketNameRequest {
  // object_name is the name of the object
  string object_name = 1;
  // bucket_name is the name of the bucket
  string bucket_name = 2;
  // is_full_list indicates whether this request can get the private objects information
  bool is_full_list = 3;
}

// GetPaymentByBucketNameRequest is request type for the GetPaymentByBucketName RPC method
message GetPaymentByBucketNameRequest {
  // bucket_name is the name of the bucket
  string bucket_name = 1;
  // is_full_list indicates whether this request can get the private buckets information
  bool is_full_list = 2;
}

// GetPaymentByBucketIDRequest is request type for the GetPaymentByBucketID RPC method
message GetPaymentByBucketIDRequest {
  // bucket_id is the unique identifier of bucket
  int64 bucket_id = 1;
  // is_full_list indicates whether this request can get the private buckets information
  bool is_full_list = 2;
}

// GetUserBucketsResponse is response type for the GetUserBuckets RPC method.
message GetUserBucketsResponse {
  // buckets defines the list of bucket
  repeated Bucket buckets = 1;
}

// ListObjectsByBucketNameResponse is response type for the ListObjectsByBucketName RPC method.
message ListObjectsByBucketNameResponse {
  // objects defines the list of object
  repeated Object objects = 1;
}

// GetBucketByBucketNameResponse is response type for the GetBucketByBucketName RPC method.
message GetBucketByBucketNameResponse {
  // bucket defines the information of a bucket
  Bucket bucket = 1;
}

// GetBucketByBucketIDResponse is response type for the GetBucketByBucketID RPC method.
message GetBucketByBucketIDResponse {
  // bucket defines the information of a bucket
  Bucket bucket = 1;
}

// ListDeletedObjectsByBlockNumberRangeResponse is response type for the ListDeletedObjectsByBlockNumberRange RPC method.
message ListDeletedObjectsByBlockNumberRangeResponse {
  // objects defines the list of object
  repeated Object objects = 1;
  // latest_block_number defines the response objects latest block number
  int64 end_block_number = 2;
}

// GetUserBucketsCountResponse is response type for the GetUserBucketsCount RPC method.
message GetUserBucketsCountResponse {
  // count defines total count of user buckets
  int64 count = 1;
}

// ListExpiredBucketsBySpResponse is the response type for the ListExpiredBucketsBySp RPC method.
message ListExpiredBucketsBySpResponse {
  // buckets defines the list of expired bucket
  repeated Bucket buckets = 1;
}

// GetObjectByObjectNameAndBucketNameResponse is response type for the GetObjectByObjectNameAndBucketName RPC method.
message GetObjectByObjectNameAndBucketNameResponse {
  // object defines the information of an object
  Object object = 1;
}

// GetPaymentByBucketNameResponse is response type for the GetPaymentByBucketName RPC method.
message GetPaymentByBucketNameResponse {
  // stream_record defines stream payment record of a stream account
  bnbchain.greenfield.payment.StreamRecord stream_record = 1;
}

// GetPaymentByBucketIDResponse is response type for the GetPaymentByBucketID RPC method.
message GetPaymentByBucketIDResponse {
  // stream_record defines stream payment record of a stream account
  bnbchain.greenfield.payment.StreamRecord stream_record = 1;
}

// MetadataService defines the gRPC service of metadata
service MetadataService {
  // GetUserBuckets get buckets info by a user address
  rpc GetUserBuckets(GetUserBucketsRequest) returns (GetUserBucketsResponse) {};
  // ListObjectsByBucketName list objects info by a bucket name
  rpc ListObjectsByBucketName(ListObjectsByBucketNameRequest) returns (ListObjectsByBucketNameResponse) {};
  // GetBucketByBucketName get bucket info by a bucket name
  rpc GetBucketByBucketName(GetBucketByBucketNameRequest) returns (GetBucketByBucketNameResponse) {};
  // GetBucketByBucketID get bucket info by a bucket id
  rpc GetBucketByBucketID(GetBucketByBucketIDRequest) returns (GetBucketByBucketIDResponse) {};
  // ListDeletedObjectsByBlockNumberRange list deleted objects info by a block range
  rpc ListDeletedObjectsByBlockNumberRange(ListDeletedObjectsByBlockNumberRangeRequest) returns (ListDeletedObjectsByBlockNumberRangeResponse) {};
  // GetUserBucketsCount GetUserBuckets get buckets count by a user address
  rpc GetUserBucketsCount(GetUserBucketsCountRequest) returns (GetUserBucketsCountResponse) {};
  // ListExpiredBucketsBySp list expired buckets by sp
  rpc ListExpiredBucketsBySp(ListExpiredBucketsBySpRequest) returns (ListExpiredBucketsBySpResponse) {};
  // GetObjectByObjectNameAndBucketName get bucket info by a bucket name and an object name
  rpc GetObjectByObjectNameAndBucketName(GetObjectByObjectNameAndBucketNameRequest) returns (GetObjectByObjectNameAndBucketNameResponse) {};
  // GetPaymentByBucketName get bucket payment info by a bucket name
  rpc GetPaymentByBucketName(GetPaymentByBucketNameRequest) returns (GetPaymentByBucketNameResponse) {};
  // GetPaymentByBucketID get bucket payment info by a bucket id
  rpc GetPaymentByBucketID(GetPaymentByBucketIDRequest) returns (GetPaymentByBucketIDResponse) {};
  // VerifyPermission Verify the input items permission.
  rpc VerifyPermission(bnbchain.greenfield.storage.QueryVerifyPermissionRequest) returns (bnbchain.greenfield.storage.QueryVerifyPermissionResponse) {};
}