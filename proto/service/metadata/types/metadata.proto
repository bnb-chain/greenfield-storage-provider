syntax = "proto3";
package service.metadata.types;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/bnb-chain/greenfield-storage-provider/metadata/types";


message Bucket {
  // owner is the account address of bucket creator, it is also the bucket owner.
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name is a globally unique name of bucket
  string bucket_name = 2;
  // is_public define the highest permissions for bucket. When the bucket is public, everyone can get the object in it.
  bool is_public = 3;
  // id is the unique identification for bucket.
  string id = 4;
  SourceType source_type = 5;
  // create_at define the block number when the bucket created.
  int64 create_at = 6;
  // payment_address is the address of the payment account
  string payment_address = 7 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // primary_sp_address is the address of the primary sp. Objects belongs to this bucket will never
  // leave this SP, unless you explicitly shift them to another SP.
  string primary_sp_address = 8 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // read_quota defines the traffic quota for read
  ReadQuota read_quota = 9;
  // payment_price_time TODO(Owen): refine the comments
  int64 payment_price_time = 10;
  // payment_out_flows
  repeated OutFlowInUSD payment_out_flows = 11 [(gogoproto.nullable) = false];
}

enum RedundancyType {
  option (gogoproto.goproto_enum_prefix) = false;

  REDUNDANCY_TYPE_REPLICA_UNSPECIFIED = 0;
  REDUNDANCY_TYPE_EC = 1;
  REDUNDANCY_TYPE_INLINE = 2;
}

enum ObjectStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  OBJECT_STATUS_INIT_UNSPECIFIED = 0;
  OBJECT_STATUS_IN_SERVICE = 1;
}

enum SourceType {
  option (gogoproto.goproto_enum_prefix) = false;

  SOURCE_TYPE_ORIGIN_UNSPECIFIED = 0;
  SOURCE_TYPE_BSC_CROSS_CHAIN = 1;
}

enum ReadQuota {
  option (gogoproto.goproto_enum_prefix) = false;

  READ_QUOTA_FREE_UNSPECIFIED = 0;
  READ_QUOTA_1G = 1;
  READ_QUOTA_10G = 2;
}

message Object {
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // bucket_name is the name of the bucket
  string bucket_name = 2;
  // object_name is the name of object
  string object_name = 3;
  // id is the unique identifier of object
  string id = 4;
  // payloadSize is the total size of the object payload
  uint64 payload_size = 5;
  // is_public define the highest permissions for object. When the object is public, everyone can access it.
  bool is_public = 6;
  // content_type define the format of the object which should be a standard MIME type.
  string content_type = 7;
  // create_at define the block number when the object created
  int64 create_at = 8;
  // object_status define the upload status of the object.
  ObjectStatus object_status = 9;
  // redundancy_type define the type of the redundancy which can be multi-replication or EC.
  RedundancyType redundancy_type = 10;
  // source_type define the source of the object.
  SourceType source_type = 11;
  // checksums define the root hash of the pieces which stored in a SP.
  repeated bytes checksums = 12;
  // secondary_sp_addresses define the addresses of secondary_sps
  repeated string secondary_sp_addresses = 13 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // lockedBalance
  string locked_balance = 14;
}

// OutFlowInUSD defines the accumulative outflow stream rate in USD
// from a stream account or a bucket to a SP
message OutFlowInUSD {
  // SP(service provider) stream account address
  string sp_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // flow rate in USD
  string rate = 2;
}

message MetadataServiceGetUserBucketsRequest {
  string account_id = 1;
}

message MetadataServiceListObjectsByBucketNameRequest {
  string bucket_name = 1;
  string account_id = 2;
}

message MetadataServiceGetUserBucketsResponse {
  repeated Bucket buckets = 1;
}

message MetadataServiceListObjectsByBucketNameResponse {
  repeated Object objects = 1;
}

service MetadataService {
  rpc GetUserBuckets(MetadataServiceGetUserBucketsRequest) returns (MetadataServiceGetUserBucketsResponse) {};
  rpc ListObjectsByBucketName(MetadataServiceListObjectsByBucketNameRequest) returns (MetadataServiceListObjectsByBucketNameResponse) {};
}