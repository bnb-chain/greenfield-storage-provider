syntax = "proto3";
package service.receiver.types;

import "greenfield/storage/types.proto";
import "service/types/storage_provider.proto";

option go_package = "github.com/bnb-chain/greenfield-storage-provider/service/receiver/types";

// SyncObjectRequest is request type for the SyncObject RPC method.
message SyncObjectRequest {
  // object_info defines the information of the object.
  bnbchain.greenfield.storage.ObjectInfo object_info = 1;
  // piece_size defines the spilt size of replicate data.
  uint64 piece_size = 2;
  // redundancy_idx defines the ec piece idx iff >= 0
  int32 redundancy_idx = 3;
  // replica_data defines the data that replicate to storage provider.
  bytes replica_data = 4;
}

// SyncObjectResponse is response type for the SyncObject RPC method.
message SyncObjectResponse {
  // integrity_hash defines the integrity hash of the replicate payload.
  bytes integrity_hash = 1;
  // signature defines the result of storage provider sign the replicate payload.
  bytes signature = 2;
}

// QuerySyncingRequest is request type for the QuerySyncingObject RPC method.
message QuerySyncingObjectRequest {
  // object_id defines the unique id of the object.
  uint64 object_id = 1;
}

// QueryUploadingResponse is response type for the QuerySyncingObject RPC method.
message QuerySyncingObjectResponse {
  // segment_info defines the information of syncing object.
  service.types.SegmentInfo segment_info = 1;
}

// ReceiverService defines the gRPC service of syncing the replicate object .
service ReceiverService {
  // SyncObject an object payload to storage provider.
  rpc SyncObject(stream SyncObjectRequest) returns (SyncObjectResponse) {};
  // QuerySyncingObject a syncing object info by object id.
  rpc QuerySyncingObject(QuerySyncingObjectRequest) returns (QuerySyncingObjectResponse) {};
}