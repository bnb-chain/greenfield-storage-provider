syntax = "proto3";
package modular.retriever.types;

import "base/types/gfsperrors/error.proto";
import "gogoproto/gogo.proto";
import "greenfield/storage/types.proto";
import "service/types/storage_provider.proto";

option go_package = "github.com/bnb-chain/greenfield-storage-provider/modular/retriever/types";

// GetBucketReadQuotaRequest is request type for the GetBucketReadQuota RPC method.
message GfSpGetBucketReadQuotaRequest {
  // bucket info from the greenfield chain
  greenfield.storage.BucketInfo bucket_info = 1;
  // year_month is the query bucket quota's month, like "2023-03"
  string year_month = 2;
}

// GetBucketReadQuotaResponse is response type for the GetBucketReadQuota RPC method.
message GfSpGetBucketReadQuotaResponse {
  base.types.gfsperrors.GfSpError err = 1;
  // charged_quota_size is the greenfield chain bucket info's read quota size
  uint64 charged_quota_size = 2;
  // sp_free_quota_size is the sp default free quota
  uint64 sp_free_quota_size = 3;
  // consumed_size is currently consumed size
  uint64 consumed_size = 4;
}

// ListBucketReadRecordRequest is request type for the ListBucketReadRecord RPC method.
message GfSpListBucketReadRecordRequest {
  // bucket info from the greenfield chain
  greenfield.storage.BucketInfo bucket_info = 1;
  // start_timestamp_us is the list request's left side, like [start_timestamp_us, end_timestamp_us)
  int64 start_timestamp_us = 2;
  // start_timestamp_us is the list request's right side, like [start_timestamp_us, end_timestamp_us)
  int64 end_timestamp_us = 3;
  // max_record_num is used to limit max list records
  int64 max_record_num = 4;
}

// ReadRecord is used to record the read request.
message ReadRecord {
  // object_name is the read object name
  string object_name = 1;
  // object_id is the read object id
  uint64 object_id = 2;
  // account_address is the read account address
  string account_address = 3;
  // timestamp_us is the read time stamp
  int64 timestamp_us = 4;
  // read_size is the read object size
  uint64 read_size = 5;
}

// ListBucketReadRecordResponse is response type for the ListBucketReadRecord RPC method.
message GfSpListBucketReadRecordResponse {
  base.types.gfsperrors.GfSpError err = 1;
  // read_records are the read record list
  repeated ReadRecord read_records = 2 [(gogoproto.nullable) = true];
  // next_start_timestamp_us is used to fetch next batch, When the list is completed, it is 0.
  int64 next_start_timestamp_us = 3;
}

// QueryUploadProgressRequest is request type for the QueryObjectPutState RPC method.
message GfSpQueryUploadProgressRequest {
  // object_id defines the unique id of the object.
  uint64 object_id = 1;
}

// QueryUploadProgressResponse is response type for the QueryObjectPutState RPC method.
message GfSpQueryUploadProgressResponse {
  base.types.gfsperrors.GfSpError err = 1;
  // state defines the state of put object.
  service.types.JobState state = 2;
}

service GfSpRetrieverService {
  rpc GfSpGetBucketReadQuota(GfSpGetBucketReadQuotaRequest) returns (GfSpGetBucketReadQuotaResponse) {}
  rpc GfSpListBucketReadRecord(GfSpListBucketReadRecordRequest) returns (GfSpListBucketReadRecordResponse) {}
  rpc GfSpQueryUploadProgress(GfSpQueryUploadProgressRequest) returns (GfSpQueryUploadProgressResponse) {}
}
