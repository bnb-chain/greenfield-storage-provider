syntax = "proto3";
package modular.metadata.types;

import "base/types/gfsperrors/error.proto";
import "gogoproto/gogo.proto";
import "greenfield/payment/stream_record.proto";
import "greenfield/storage/events.proto";
import "greenfield/storage/query.proto";
import "greenfield/storage/types.proto";
import "greenfield/virtualgroup/events.proto";
import "greenfield/virtualgroup/types.proto";
import "store/types/store.proto";

option go_package = "github.com/bnb-chain/greenfield-storage-provider/modular/metadata/types";

// Bucket is the structure for user bucket
message Bucket {
  // bucket_info defines the information of the bucket.
  greenfield.storage.BucketInfo bucket_info = 1;
  // removed defines the bucket is deleted or not
  bool removed = 2;
  // delete_at defines the block number when the bucket deleted.
  int64 delete_at = 3;
  // delete_reason defines the deleted reason of bucket
  string delete_reason = 4;
  // operator defines the operator address of bucket
  string operator = 5;
  // create_tx_hash defines the creation transaction hash of object
  string create_tx_hash = 6;
  // update_tx_hash defines the update transaction hash of object
  string update_tx_hash = 7;
  // update_at defines the block number when the object updated
  int64 update_at = 8;
  // update_time defines the block number when the object updated
  int64 update_time = 9;
}

// Object is the structure for user object
message Object {
  // object_info defines the information of the object.
  greenfield.storage.ObjectInfo object_info = 1;
  // locked_balance defines locked balance of object
  string locked_balance = 2;
  // removed defines the object is deleted or not
  bool removed = 3;
  // update_at defines the block number when the object updated
  int64 update_at = 4;
  // delete_at defines the block number when the object deleted
  int64 delete_at = 5;
  // delete_reason defines the deleted reason of object
  string delete_reason = 6;
  // operator defines the operator address of object
  string operator = 7;
  // create_tx_hash defines the creation transaction hash of object
  string create_tx_hash = 8;
  // update_tx_hash defines the update transaction hash of object
  string update_tx_hash = 9;
  // seal_tx_hash defines the sealed transaction hash of object
  string seal_tx_hash = 10;
}

// GfSpGetUserBucketsRequest is request type for the GfSpGetUserBuckets RPC method.
message GfSpGetUserBucketsRequest {
  // account_id is the account address of user
  string account_id = 1;
  // include_removed indicates whether this request can get the removed buckets information
  bool include_removed = 2;
}

// GfSpGetUserBucketsResponse is response type for the GfSpGetUserBuckets RPC method.
message GfSpGetUserBucketsResponse {
  // buckets defines the list of bucket
  repeated Bucket buckets = 1;
}

// GfSpListObjectsByBucketNameRequest is request type for the GfSpListObjectsByBucketName RPC method
message GfSpListObjectsByBucketNameRequest {
  // bucket_name is the name of the bucket
  string bucket_name = 1;
  // account_id is the account address of user
  string account_id = 2;
  // max_keys sets the maximum number of keys returned in the response
  uint64 max_keys = 3;
  // start_after is where you want to start listing from
  string start_after = 4;
  // continuation_token indicates that the list is being continued on this bucket with a token
  string continuation_token = 5;
  // delimiter is a character you use to group keys
  string delimiter = 6;
  // prefix limits the response to keys that begin with the specified prefix
  string prefix = 7;
  // include_removed indicates whether this request can get the removed objects information
  bool include_removed = 8;
}

// GfSpListObjectsByBucketNameResponse is response type for the GfSpListObjectsByBucketName RPC method.
message GfSpListObjectsByBucketNameResponse {
  // objects defines the list of object
  repeated Object objects = 1;
  // key_count is the number of keys returned with this request
  uint64 key_count = 2;
  // max_keys sets the maximum number of keys returned in the response
  uint64 max_keys = 3;
  // is_truncated set to false if all of the results were returned. set to true if more keys are available to return
  bool is_truncated = 4;
  // next_continuation_token is sent when is_truncated is true, which means there are more keys in the bucket that can be listed
  string next_continuation_token = 5;
  // name of the bucket
  string name = 6;
  // prefix is the prefix used during the query.
  string prefix = 7;
  // delimiter is the delimiter used during the query
  string delimiter = 8;
  // common_prefixes a list of strings representing common prefixes. common_prefixes are those parts of object key names that fall between the specified delimiters
  repeated string common_prefixes = 9;
  // continuationToken is the continuation token used during the query
  string continuation_token = 10;
}

// GfSpGetBucketByBucketNameRequest is request type for the GfSpGetBucketByBucketName RPC method
message GfSpGetBucketByBucketNameRequest {
  // bucket_name is the name of the bucket
  string bucket_name = 1;
  // include_private indicates whether this request can get the private buckets information
  bool include_private = 2;
}

// GfSpGetBucketByBucketNameResponse is response type for the GfSpGetBucketByBucketName RPC method.
message GfSpGetBucketByBucketNameResponse {
  // bucket defines the information of a bucket
  Bucket bucket = 1;
}

// GfSpGetBucketByBucketIDRequest is request type for the GfSpGetBucketByBucketID RPC method
message GfSpGetBucketByBucketIDRequest {
  // bucket_id is the unique identifier of bucket
  int64 bucket_id = 1;
  // include_private indicates whether this request can get the private buckets information
  bool include_private = 2;
}

// GfSpGetBucketByBucketIDResponse is response type for the GfSpGetBucketByBucketID RPC method.
message GfSpGetBucketByBucketIDResponse {
  // bucket defines the information of a bucket
  Bucket bucket = 1;
}

// GfSpListDeletedObjectsByBlockNumberRangeRequest is request type for the GfSpListDeletedObjectsByBlockNumberRange RPC method
message GfSpListDeletedObjectsByBlockNumberRangeRequest {
  // start_block_number defines the start of range
  // [start_block_number, end_block_number], start_block_number > end_block_number is invalid
  int64 start_block_number = 1;
  // end_block_number defines the end of range
  // end_block_number < 0 or start_block_number > end_block_number is invalid
  int64 end_block_number = 2;
  // include_private indicates whether this request can get the private objects information
  bool include_private = 3;
}

// GfSpListDeletedObjectsByBlockNumberRangeResponse is response type for the GfSpListDeletedObjectsByBlockNumberRange RPC method.
message GfSpListDeletedObjectsByBlockNumberRangeResponse {
  // objects defines the list of object
  repeated Object objects = 1;
  // latest_block_number defines the response objects latest block number
  int64 end_block_number = 2;
}

// GfSpGetUserBucketsCountRequest is request type for the GfSpGetUserBucketsCount RPC method.
message GfSpGetUserBucketsCountRequest {
  // account_id is the account address of user
  string account_id = 1;
  // include_removed indicates whether this request can get the removed buckets information
  bool include_removed = 2;
}

// GfSpGetUserBucketsCountResponse is response type for the GfSpGetUserBucketsCount RPC method.
message GfSpGetUserBucketsCountResponse {
  // count defines total count of user buckets
  int64 count = 1;
}

// GfSpListExpiredBucketsBySpRequest is the request type for the GfSpListExpiredBucketsBySp RPC method.
message GfSpListExpiredBucketsBySpRequest {
  // create_at defines the create timestamp of bucket
  int64 create_at = 1;
  // primary_sp_id defines the primary sp id of bucket
  uint32 primary_sp_id = 2;
  // limit defines the return number limit of bucket
  int64 limit = 3;
}

// GfSpListExpiredBucketsBySpResponse is the response type for the GfSpListExpiredBucketsBySp RPC method.
message GfSpListExpiredBucketsBySpResponse {
  // buckets defines the list of expired bucket
  repeated Bucket buckets = 1;
}

// GfSpGetObjectMetaRequest is request type for the GfSpGetObjectMeta RPC method
message GfSpGetObjectMetaRequest {
  // object_name is the name of the object
  string object_name = 1;
  // bucket_name is the name of the bucket
  string bucket_name = 2;
  // include_private indicates whether this request can get the private objects information
  bool include_private = 3;
}

// GfSpGetObjectMetaResponse is response type for the GfSpGetObjectMeta RPC method.
message GfSpGetObjectMetaResponse {
  // object defines the information of an object
  Object object = 1;
}

// GfSpGetPaymentByBucketNameRequest is request type for the GfSpGetPaymentByBucketName RPC method
message GfSpGetPaymentByBucketNameRequest {
  // bucket_name is the name of the bucket
  string bucket_name = 1;
  // include_private indicates whether this request can get the private buckets information
  bool include_private = 2;
}

// GfSpGetPaymentByBucketNameResponse is response type for the GfSpGetPaymentByBucketName RPC method.
message GfSpGetPaymentByBucketNameResponse {
  // stream_record defines stream payment record of a stream account
  greenfield.payment.StreamRecord stream_record = 1;
}

// GfSpGetPaymentByBucketIDRequest is request type for the GfSpGetPaymentByBucketID RPC method
message GfSpGetPaymentByBucketIDRequest {
  // bucket_id is the unique identifier of bucket
  int64 bucket_id = 1;
  // include_private indicates whether this request can get the private buckets information
  bool include_private = 2;
}

// GfSpGetPaymentByBucketIDResponse is response type for the GfSpGetPaymentByBucketID RPC method.
message GfSpGetPaymentByBucketIDResponse {
  // stream_record defines stream payment record of a stream account
  greenfield.payment.StreamRecord stream_record = 1;
}

// GfSpGetBucketMetaRequest is request type for the GfSpGetBucketMeta RPC method
message GfSpGetBucketMetaRequest {
  // bucket_name is the name of the bucket
  string bucket_name = 1;
  // include_private indicates whether this request can get the private buckets information
  bool include_private = 2;
}

// GfSpGetBucketMetaResponse is response type for the GfSpGetBucketMeta RPC method
message GfSpGetBucketMetaResponse {
  // bucket defines the information of a bucket
  Bucket bucket = 1;
  // stream_record defines stream payment record of a stream account
  greenfield.payment.StreamRecord stream_record = 2;
}

// GfSpGetEndpointBySpAddressRequest is request type for the GfSpGetEndpointBySpAddress RPC method
message GfSpGetEndpointBySpAddressRequest {
  // sp_address is the address of the sp
  string sp_address = 1;
}

// GfSpGetEndpointBySpAddressResponse is response type for the GfSpGetEndpointBySpAddress RPC method.
message GfSpGetEndpointBySpAddressResponse {
  // endpoint defines endpoint of a sp
  string endpoint = 1;
}

// GfSpGetBucketReadQuotaRequest is request type for the GfSpGetBucketReadQuota RPC method.
message GfSpGetBucketReadQuotaRequest {
  // bucket info from the greenfield chain
  greenfield.storage.BucketInfo bucket_info = 1;
  // year_month is the query bucket quota's month, like "2023-03"
  string year_month = 2;
}

// GfSpGetBucketReadQuotaResponse is response type for the GfSpGetBucketReadQuota RPC method.
message GfSpGetBucketReadQuotaResponse {
  base.types.gfsperrors.GfSpError err = 1;
  // charged_quota_size is the greenfield chain bucket info's read quota size
  uint64 charged_quota_size = 2;
  // sp_free_quota_size is the sp default free quota
  uint64 sp_free_quota_size = 3;
  // consumed_size is currently consumed size
  uint64 consumed_size = 4;
}

// ListBucketReadRecordRequest is request type for the ListBucketReadRecord RPC method.
message GfSpListBucketReadRecordRequest {
  // bucket info from the greenfield chain
  greenfield.storage.BucketInfo bucket_info = 1;
  // start_timestamp_us is the list request's left side, like [start_timestamp_us, end_timestamp_us)
  int64 start_timestamp_us = 2;
  // start_timestamp_us is the list request's right side, like [start_timestamp_us, end_timestamp_us)
  int64 end_timestamp_us = 3;
  // max_record_num is used to limit max list records
  int64 max_record_num = 4;
}

// ReadRecord is used to record the read request.
message ReadRecord {
  // object_name is the read object name
  string object_name = 1;
  // object_id is the read object id
  uint64 object_id = 2;
  // account_address is the read account address
  string account_address = 3;
  // timestamp_us is the read time stamp
  int64 timestamp_us = 4;
  // read_size is the read object size
  uint64 read_size = 5;
}

// ListBucketReadRecordResponse is response type for the ListBucketReadRecord RPC method.
message GfSpListBucketReadRecordResponse {
  base.types.gfsperrors.GfSpError err = 1;
  // read_records are the read record list
  repeated ReadRecord read_records = 2 [(gogoproto.nullable) = true];
  // next_start_timestamp_us is used to fetch next batch, When the list is completed, it is 0.
  int64 next_start_timestamp_us = 3;
}

// QueryUploadProgressRequest is request type for the QueryObjectPutState RPC method.
message GfSpQueryUploadProgressRequest {
  // object_id defines the unique id of the object.
  uint64 object_id = 1;
}

// QueryUploadProgressResponse is response type for the QueryObjectPutState RPC method.
message GfSpQueryUploadProgressResponse {
  base.types.gfsperrors.GfSpError err = 1;
  // state defines the state of put object.
  store.types.TaskState state = 2;
  string err_description = 3;
}

// GfSpQueryResumableUploadSegmentRequest is request type for the QueryObjectPutState RPC method.
message GfSpQueryResumableUploadSegmentRequest {
  // object_id defines the unique id of the object.
  uint64 object_id = 1;
}

// GfSpQueryResumableUploadSegmentResponse is response type for the QueryObjectPutState RPC method.
message GfSpQueryResumableUploadSegmentResponse {
  base.types.gfsperrors.GfSpError err = 1;
  // state defines the number of segment count.
  uint32 segment_count = 2;
}

// Group is the structure for group information
message Group {
  // group defines the basic group info
  greenfield.storage.GroupInfo group = 1;
  // operator defines operator address of group
  string operator = 2;
  // create_at defines the block number when the group created
  int64 create_at = 3;
  // create_time defines the timestamp when the group created
  int64 create_time = 4;
  // update_at defines the block number when the group updated
  int64 update_at = 5;
  // update_time defines the timestamp when the group updated
  int64 update_time = 6;
  // removed defines the group is deleted or not
  bool removed = 7;
}

// GfSpGetGroupListRequest is request type for the GetGroupList RPC method.
message GfSpGetGroupListRequest {
  // name defines the query group name
  string name = 1;
  // prefix defines the prefix of the group name
  string prefix = 2;
  // source_type defines which chain the user should send the bucket management transactions to
  string source_type = 3;
  // limit defines the maximum number of results that should be returned in response
  int64 limit = 4;
  // offset defines the position in the list from where to start returning results
  int64 offset = 5;
  // include_removed indicates whether this request can get the removed groups information
  bool include_removed = 6;
}

// GfSpGetGroupListResponse is response type for the GetGroupList RPC method.
message GfSpGetGroupListResponse {
  // groups defines the response of group list
  repeated Group groups = 1;
  // count defines total groups amount
  int64 count = 2;
}

// GfSpGetBucketByBucketIDRequest is request type for the GfSpListBucketsByBucketID RPC method
message GfSpListBucketsByBucketIDRequest {
  // bucket_id is the list of unique identifier for buckets
  repeated uint64 bucket_ids = 1;
  // include_removed indicates whether this request can get the removed buckets information
  bool include_removed = 2;
}

// GfSpGetBucketByBucketIDResponse is response type for the GfSpListBucketsByBucketID RPC method.
message GfSpListBucketsByBucketIDResponse {
  // buckets defines the information of a bucket map
  map<uint64, Bucket> buckets = 1;
}

// GfSpListBucketsByBucketIDRequest is request type for the GfSpListObjectsByObjectID RPC method
message GfSpListObjectsByObjectIDRequest {
  // object_ids is the list of unique identifier for objects
  repeated uint64 object_ids = 1;
  // include_removed indicates whether this request can get the removed objects information
  bool include_removed = 2;
}

// GfSpListObjectsByBucketIDRequest is response type for the GfSpListObjectsByObjectID RPC method.
message GfSpListObjectsByObjectIDResponse {
  // objects defines the information of a object map
  map<uint64, Object> objects = 1;
}

// GfSpListVirtualGroupFamiliesBySpIDRequest is request type for the GfSpListVirtualGroupFamilies RPC method
message GfSpListVirtualGroupFamiliesBySpIDRequest {
  // sp_id is the unique identification for sp
  uint32 sp_id = 1;
}

// GfSpListVirtualGroupFamiliesBySpIDResponse is response type for the GfSpListVirtualGroupFamilies RPC method
message GfSpListVirtualGroupFamiliesBySpIDResponse {
  // global_virtual_group_families is a list of global virtual group families
  repeated greenfield.virtualgroup.GlobalVirtualGroupFamily global_virtual_group_families = 1;
}

// GfSpGetGlobalVirtualGroupByGvgIDRequest is request type for the GfSpQueryGlobalVirtualGroup RPC method
message GfSpGetGlobalVirtualGroupByGvgIDRequest {
  // gvg_id is the unique identification for gvg
  uint32 gvg_id = 1;
}

// GfSpGetGlobalVirtualGroupByGvgIDResponse is response type for the GfSpQueryGlobalVirtualGroup RPC method
message GfSpGetGlobalVirtualGroupByGvgIDResponse {
  // global_virtual_group defines a global virtual group consists of one primary SP (SP) and multiple secondary SP
  greenfield.virtualgroup.GlobalVirtualGroup global_virtual_group = 1;
}

// GfSpListBucketsBindingOnPrimarySPRequest is request type for the GfSpListBucketsBindingOnPrimarySP RPC method
message GfSpListBucketsBindingOnPrimarySPRequest {
  // sp_id is the unique identification for sp
  uint32 sp_id = 1;
  // start_after is where you want to start listing from
  uint64 start_after = 2;
  // defines the number of results that should be returned in response, the maximum is 1000, default 50
  uint32 limit = 3;
}

// GfSpListBucketsBindingOnPrimarySPResponse is response type for the GfSpListBucketsBindingOnPrimarySP RPC method
message GfSpListBucketsBindingOnPrimarySPResponse {
  // buckets defines the list of bucket
  repeated Bucket buckets = 1;
}

// GfSpListBucketsBindingOnSecondarySPRequest is request type for the GfSpListBucketsBindingOnSecondarySP RPC method
message GfSpListBucketsBindingOnSecondarySPRequest {
  // sp_id is the unique identification for sp
  uint32 sp_id = 1;
  // start_after is where you want to start listing from
  uint64 start_after = 2;
  // defines the number of results that should be returned in response, the maximum is 1000, default 50
  uint32 limit = 3;
}

// GfSpListBucketsBindingOnSecondarySPResponse is response type for the GfSpListBucketsBindingOnSecondarySP RPC method
message GfSpListBucketsBindingOnSecondarySPResponse {
  // buckets defines the list of bucket
  repeated Bucket buckets = 1;
}

// GfSpListPrimaryObjectsRequest is request type for the GfSpListPrimaryObjects RPC method
message GfSpListPrimaryObjectsRequest {
  // sp_id is the unique identification for sp
  uint32 sp_id = 1;
  // bucket_id is the unique identification for bucket
  uint64 bucket_id = 2;
  // start_after is where you want to start listing from
  uint64 start_after = 3;
  // defines the number of results that should be returned in response, the maximum is 1000, default 50
  uint32 limit = 4;
}

// GfSpListPrimaryObjectsResponse is response type for the GfSpListPrimaryObjects RPC method
message GfSpListPrimaryObjectsResponse {
  // objects defines the list of object
  repeated Object objects = 1;
}

// GfSpListSecondaryObjectsRequest is request type for the GfSpListSecondaryObjects RPC method
message GfSpListSecondaryObjectsRequest {
  // sp_id is the unique identification for sp
  uint32 sp_id = 1;
  // bucket_id is the unique identification for bucket
  uint64 bucket_id = 2;
  // start_after is where you want to start listing from
  uint64 start_after = 3;
  // defines the number of results that should be returned in response, the maximum is 1000, default 50
  uint32 limit = 4;
}

// GfSpListSecondaryObjectsResponse is response type for the GfSpListSecondaryObjects RPC method
message GfSpListSecondaryObjectsResponse {
  // objects defines the list of object
  repeated Object objects = 1;
}

// GfSpGetVirtualGroupFamilyRequest is request type for the GfSpGetVirtualGroupFamily RPC method
message GfSpGetVirtualGroupFamilyRequest {
  // vgf_id is the unique identification for vgf
  uint32 vgf_id = 1;
}

// GfSpGetVirtualGroupFamilyResponse is response type for the GfSpGetVirtualGroupFamily RPC method
message GfSpGetVirtualGroupFamilyResponse {
  // vgf defines the vgf info
  greenfield.virtualgroup.GlobalVirtualGroupFamily vgf = 1;
}

// GfSpGetGlobalVirtualGroupRequest is request type for the GfSpGetGlobalVirtualGroup RPC method
message GfSpGetGlobalVirtualGroupRequest {
  // bucket_id is the unique identification for bucket
  uint64 bucket_id = 1;
  // lvg_id and bucket_id are the unique identification for lvg
  uint32 lvg_id = 2;
}

// GfSpGetGlobalVirtualGroupResponse is response type for the GfSpGetGlobalVirtualGroup RPC method
message GfSpGetGlobalVirtualGroupResponse {
  // gvg defines the gvg info
  greenfield.virtualgroup.GlobalVirtualGroup gvg = 1;
}

// GfSpListObjectsInGVGRequest is request type for the GfSpListObjectsInGVG RPC method
message GfSpListObjectsInGVGRequest {
  // gvg_id is the unique identification for gvg
  uint32 gvg_id = 1;
  // start_after is where you want to start listing from
  uint64 start_after = 3;
  // defines the number of results that should be returned in response, the maximum is 1000, default 50
  uint32 limit = 4;
}

// GfSpListObjectsInGVGResponse is response type for the GfSpListObjectsInGVG RPC method
message GfSpListObjectsInGVGResponse {
  // objects defines the list of object
  repeated Object objects = 1;
}

// GfSpListObjectsInGVGAndBucketRequest is request type for the GfSpListObjectsInGVGAndBucket RPC method
message GfSpListObjectsInGVGAndBucketRequest {
  // gvg_id is the unique identification for gvg
  uint32 gvg_id = 1;
  // bucket_id is the unique identification for bucket
  uint64 bucket_id = 2;
  // start_after is where you want to start listing from
  uint64 start_after = 3;
  // defines the number of results that should be returned in response, the maximum is 1000, default 50
  uint32 limit = 4;
}

// GfSpListObjectsInGVGAndBucketResponse is response type for the GfSpListObjectsInGVGAndBucket RPC method
message GfSpListObjectsInGVGAndBucketResponse {
  // objects defines the list of object
  repeated Object objects = 1;
}

// GfSpListMigrateBucketEventsRequest is request type for the GfSpListMigrateBucketEvents RPC method
message GfSpListMigrateBucketEventsRequest {
  // block_id is the unique identification for block
  uint64 block_id = 1;
  // sp_id is the unique identification for sp
  uint32 sp_id = 2;
}

// ListMigrateBucketEvents is the combination of migrate bucket events
message ListMigrateBucketEvents {
  // events defines the migration bucket event
  greenfield.storage.EventMigrationBucket events = 1;
  // complete_events defines the complete migration bucket event
  greenfield.storage.EventCompleteMigrationBucket complete_events = 2;
}

// GfSpListMigrateBucketEventsResponse is response type for the GfSpListMigrateBucketEvents RPC method
message GfSpListMigrateBucketEventsResponse {
  // ListMigrateBucketEvents is the combination of migrate bucket events
  repeated ListMigrateBucketEvents events = 1;
}

// GfSpListSwapOutEventsRequest is request type for the GfSpListSwapOutEvents RPC method
message GfSpListSwapOutEventsRequest {
  // block_id is the unique identification for block
  uint64 block_id = 1;
  // sp_id is the unique identification for sp
  uint32 sp_id = 2;
}

// ListSwapOutEvents is the combination of swap out events
message ListSwapOutEvents {
  // events defines the swap out event
  greenfield.virtualgroup.EventSwapOut events = 1;
}

// GfSpListSwapOutEventsResponse is response type for the GfSpListSwapOutEvents RPC method
message GfSpListSwapOutEventsResponse {
  // ListSwapOutEvents is the combination of swap out events
  repeated ListSwapOutEvents events = 1;
}

// GfSpListGlobalVirtualGroupsBySecondarySPRequest is request type for the GfSpListGlobalVirtualGroupsBySecondarySP RPC method
message GfSpListGlobalVirtualGroupsBySecondarySPRequest {
  // sp_id is the unique identification for sp
  uint32 sp_id = 1;
}

// GfSpListGlobalVirtualGroupsBySecondarySPResponse is response type for the GfSpListGlobalVirtualGroupsBySecondarySP RPC method
message GfSpListGlobalVirtualGroupsBySecondarySPResponse {
  // groups defines a list of gvg info
  repeated greenfield.virtualgroup.GlobalVirtualGroup groups = 1;
}

// GfSpListGlobalVirtualGroupsByBucketRequest is request type for the ListGlobalVirtualGroupsByBucket RPC method
message GfSpListGlobalVirtualGroupsByBucketRequest {
  // bucket_id is the unique identification for bucket
  uint64 bucket_id = 1;
}

// GfSpListGlobalVirtualGroupsByBucketResponse is response type for the ListGlobalVirtualGroupsByBucket RPC method
message GfSpListGlobalVirtualGroupsByBucketResponse {
  // groups defines a list of gvg info
  repeated greenfield.virtualgroup.GlobalVirtualGroup groups = 1;
}

// GfSpListSpExitEventsRequest is request type for the GfSpListSPExitEvents RPC method
message GfSpListSpExitEventsRequest {
  // block_id is the unique identification for block
  uint64 block_id = 1;
  // operator_address is the unique identification address for operator
  string operator_address = 2;
}

// ListSpExitEvents is the combination of sp exit events
message ListSpExitEvents {
  // events defines the sp exit event
  greenfield.virtualgroup.EventStorageProviderExit event = 1;
  // complete_events defines the complete sp exit event
  greenfield.virtualgroup.EventCompleteStorageProviderExit complete_event = 2;
}

// GfSpListSpExitEventsResponse is response type for the GfSpListSPExitEvents RPC method
message GfSpListSpExitEventsResponse {
  // ListSpExitEvents is the combination of sp exit events
  ListSpExitEvents events = 1;
}

service GfSpMetadataService {
  rpc GfSpGetUserBuckets(GfSpGetUserBucketsRequest) returns (GfSpGetUserBucketsResponse) {}
  rpc GfSpListObjectsByBucketName(GfSpListObjectsByBucketNameRequest) returns (GfSpListObjectsByBucketNameResponse) {}
  rpc GfSpGetBucketByBucketName(GfSpGetBucketByBucketNameRequest) returns (GfSpGetBucketByBucketNameResponse) {}
  rpc GfSpGetBucketByBucketID(GfSpGetBucketByBucketIDRequest) returns (GfSpGetBucketByBucketIDResponse) {}
  rpc GfSpListDeletedObjectsByBlockNumberRange(GfSpListDeletedObjectsByBlockNumberRangeRequest) returns (GfSpListDeletedObjectsByBlockNumberRangeResponse) {}
  rpc GfSpGetUserBucketsCount(GfSpGetUserBucketsCountRequest) returns (GfSpGetUserBucketsCountResponse) {}
  rpc GfSpListExpiredBucketsBySp(GfSpListExpiredBucketsBySpRequest) returns (GfSpListExpiredBucketsBySpResponse) {}
  rpc GfSpGetObjectMeta(GfSpGetObjectMetaRequest) returns (GfSpGetObjectMetaResponse) {}
  rpc GfSpGetPaymentByBucketName(GfSpGetPaymentByBucketNameRequest) returns (GfSpGetPaymentByBucketNameResponse) {}
  rpc GfSpGetPaymentByBucketID(GfSpGetPaymentByBucketIDRequest) returns (GfSpGetPaymentByBucketIDResponse) {}
  rpc GfSpVerifyPermission(greenfield.storage.QueryVerifyPermissionRequest) returns (greenfield.storage.QueryVerifyPermissionResponse) {}
  rpc GfSpGetBucketMeta(GfSpGetBucketMetaRequest) returns (GfSpGetBucketMetaResponse) {}
  rpc GfSpGetEndpointBySpAddress(GfSpGetEndpointBySpAddressRequest) returns (GfSpGetEndpointBySpAddressResponse) {}
  rpc GfSpGetBucketReadQuota(GfSpGetBucketReadQuotaRequest) returns (GfSpGetBucketReadQuotaResponse) {}
  rpc GfSpListBucketReadRecord(GfSpListBucketReadRecordRequest) returns (GfSpListBucketReadRecordResponse) {}
  rpc GfSpQueryUploadProgress(GfSpQueryUploadProgressRequest) returns (GfSpQueryUploadProgressResponse) {}
  rpc GfSpQueryResumableUploadSegment(GfSpQueryResumableUploadSegmentRequest) returns (GfSpQueryResumableUploadSegmentResponse) {}
  rpc GfSpGetGroupList(GfSpGetGroupListRequest) returns (GfSpGetGroupListResponse) {}
  rpc GfSpListBucketsByBucketID(GfSpListBucketsByBucketIDRequest) returns (GfSpListBucketsByBucketIDResponse) {}
  rpc GfSpListObjectsByObjectID(GfSpListObjectsByObjectIDRequest) returns (GfSpListObjectsByObjectIDResponse) {}
  rpc GfSpListVirtualGroupFamiliesBySpID(GfSpListVirtualGroupFamiliesBySpIDRequest) returns (GfSpListVirtualGroupFamiliesBySpIDResponse) {}
  rpc GfSpGetGlobalVirtualGroupByGvgID(GfSpGetGlobalVirtualGroupByGvgIDRequest) returns (GfSpGetGlobalVirtualGroupByGvgIDResponse) {}
  rpc GfSpListBucketsBindingOnPrimarySP(GfSpListBucketsBindingOnPrimarySPRequest) returns (GfSpListBucketsBindingOnPrimarySPResponse) {}
  rpc GfSpListBucketsBindingOnSecondarySP(GfSpListBucketsBindingOnSecondarySPRequest) returns (GfSpListBucketsBindingOnSecondarySPResponse) {}
  rpc GfSpListPrimaryObjects(GfSpListPrimaryObjectsRequest) returns (GfSpListPrimaryObjectsResponse) {}
  rpc GfSpListSecondaryObjects(GfSpListSecondaryObjectsRequest) returns (GfSpListSecondaryObjectsResponse) {}
  rpc GfSpGetVirtualGroupFamily(GfSpGetVirtualGroupFamilyRequest) returns (GfSpGetVirtualGroupFamilyResponse) {}
  rpc GfSpGetGlobalVirtualGroup(GfSpGetGlobalVirtualGroupRequest) returns (GfSpGetGlobalVirtualGroupResponse) {}
  rpc GfSpListObjectsInGVG(GfSpListObjectsInGVGRequest) returns (GfSpListObjectsInGVGResponse) {}
  rpc GfSpListObjectsInGVGAndBucket(GfSpListObjectsInGVGAndBucketRequest) returns (GfSpListObjectsInGVGAndBucketResponse) {}
  rpc GfSpListGlobalVirtualGroupsBySecondarySP(GfSpListGlobalVirtualGroupsBySecondarySPRequest) returns (GfSpListGlobalVirtualGroupsBySecondarySPResponse) {}
  rpc GfSpListGlobalVirtualGroupsByBucket(GfSpListGlobalVirtualGroupsByBucketRequest) returns (GfSpListGlobalVirtualGroupsByBucketResponse) {}
  rpc GfSpListMigrateBucketEvents(GfSpListMigrateBucketEventsRequest) returns (GfSpListMigrateBucketEventsResponse) {}
  rpc GfSpListSwapOutEvents(GfSpListSwapOutEventsRequest) returns (GfSpListSwapOutEventsResponse) {}
  rpc GfSpListSpExitEvents(GfSpListSpExitEventsRequest) returns (GfSpListSpExitEventsResponse) {}
}
