// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: modular/metadata/types/metadata.proto

package types

import (
	context "context"
	fmt "fmt"
	gfsperrors "github.com/bnb-chain/greenfield-storage-provider/base/types/gfsperrors"
	gfsptask "github.com/bnb-chain/greenfield-storage-provider/base/types/gfsptask"
	types3 "github.com/bnb-chain/greenfield-storage-provider/store/types"
	resource "github.com/bnb-chain/greenfield/types/resource"
	types2 "github.com/bnb-chain/greenfield/x/payment/types"
	types4 "github.com/bnb-chain/greenfield/x/permission/types"
	types5 "github.com/bnb-chain/greenfield/x/sp/types"
	types "github.com/bnb-chain/greenfield/x/storage/types"
	types1 "github.com/bnb-chain/greenfield/x/virtualgroup/types"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Bucket is the structure for user bucket
type Bucket struct {
	// bucket_info defines the information of the bucket.
	BucketInfo *types.BucketInfo `protobuf:"bytes,1,opt,name=bucket_info,json=bucketInfo,proto3" json:"bucket_info,omitempty"`
	// removed defines the bucket is deleted or not
	Removed bool `protobuf:"varint,2,opt,name=removed,proto3" json:"removed,omitempty"`
	// delete_at defines the block number when the bucket deleted.
	DeleteAt int64 `protobuf:"varint,3,opt,name=delete_at,json=deleteAt,proto3" json:"delete_at,omitempty"`
	// delete_reason defines the deleted reason of bucket
	DeleteReason string `protobuf:"bytes,4,opt,name=delete_reason,json=deleteReason,proto3" json:"delete_reason,omitempty"`
	// operator defines the operator address of bucket
	Operator string `protobuf:"bytes,5,opt,name=operator,proto3" json:"operator,omitempty"`
	// create_tx_hash defines the creation transaction hash of object
	CreateTxHash string `protobuf:"bytes,6,opt,name=create_tx_hash,json=createTxHash,proto3" json:"create_tx_hash,omitempty"`
	// update_tx_hash defines the update transaction hash of object
	UpdateTxHash string `protobuf:"bytes,7,opt,name=update_tx_hash,json=updateTxHash,proto3" json:"update_tx_hash,omitempty"`
	// update_at defines the block number when the object updated
	UpdateAt int64 `protobuf:"varint,8,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	// update_time defines the block number when the object updated
	UpdateTime int64 `protobuf:"varint,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (m *Bucket) Reset()         { *m = Bucket{} }
func (m *Bucket) String() string { return proto.CompactTextString(m) }
func (*Bucket) ProtoMessage()    {}
func (*Bucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{0}
}
func (m *Bucket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bucket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bucket.Merge(m, src)
}
func (m *Bucket) XXX_Size() int {
	return m.Size()
}
func (m *Bucket) XXX_DiscardUnknown() {
	xxx_messageInfo_Bucket.DiscardUnknown(m)
}

var xxx_messageInfo_Bucket proto.InternalMessageInfo

func (m *Bucket) GetBucketInfo() *types.BucketInfo {
	if m != nil {
		return m.BucketInfo
	}
	return nil
}

func (m *Bucket) GetRemoved() bool {
	if m != nil {
		return m.Removed
	}
	return false
}

func (m *Bucket) GetDeleteAt() int64 {
	if m != nil {
		return m.DeleteAt
	}
	return 0
}

func (m *Bucket) GetDeleteReason() string {
	if m != nil {
		return m.DeleteReason
	}
	return ""
}

func (m *Bucket) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *Bucket) GetCreateTxHash() string {
	if m != nil {
		return m.CreateTxHash
	}
	return ""
}

func (m *Bucket) GetUpdateTxHash() string {
	if m != nil {
		return m.UpdateTxHash
	}
	return ""
}

func (m *Bucket) GetUpdateAt() int64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func (m *Bucket) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

// Object is the structure for user object
type Object struct {
	// object_info defines the information of the object.
	ObjectInfo *types.ObjectInfo `protobuf:"bytes,1,opt,name=object_info,json=objectInfo,proto3" json:"object_info,omitempty"`
	// locked_balance defines locked balance of object
	LockedBalance string `protobuf:"bytes,2,opt,name=locked_balance,json=lockedBalance,proto3" json:"locked_balance,omitempty"`
	// removed defines the object is deleted or not
	Removed bool `protobuf:"varint,3,opt,name=removed,proto3" json:"removed,omitempty"`
	// update_at defines the block number when the object updated
	UpdateAt int64 `protobuf:"varint,4,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	// delete_at defines the block number when the object deleted
	DeleteAt int64 `protobuf:"varint,5,opt,name=delete_at,json=deleteAt,proto3" json:"delete_at,omitempty"`
	// delete_reason defines the deleted reason of object
	DeleteReason string `protobuf:"bytes,6,opt,name=delete_reason,json=deleteReason,proto3" json:"delete_reason,omitempty"`
	// operator defines the operator address of object
	Operator string `protobuf:"bytes,7,opt,name=operator,proto3" json:"operator,omitempty"`
	// create_tx_hash defines the creation transaction hash of object
	CreateTxHash string `protobuf:"bytes,8,opt,name=create_tx_hash,json=createTxHash,proto3" json:"create_tx_hash,omitempty"`
	// update_tx_hash defines the update transaction hash of object
	UpdateTxHash string `protobuf:"bytes,9,opt,name=update_tx_hash,json=updateTxHash,proto3" json:"update_tx_hash,omitempty"`
	// seal_tx_hash defines the sealed transaction hash of object
	SealTxHash string `protobuf:"bytes,10,opt,name=seal_tx_hash,json=sealTxHash,proto3" json:"seal_tx_hash,omitempty"`
}

func (m *Object) Reset()         { *m = Object{} }
func (m *Object) String() string { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()    {}
func (*Object) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{1}
}
func (m *Object) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Object) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Object.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Object) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Object.Merge(m, src)
}
func (m *Object) XXX_Size() int {
	return m.Size()
}
func (m *Object) XXX_DiscardUnknown() {
	xxx_messageInfo_Object.DiscardUnknown(m)
}

var xxx_messageInfo_Object proto.InternalMessageInfo

func (m *Object) GetObjectInfo() *types.ObjectInfo {
	if m != nil {
		return m.ObjectInfo
	}
	return nil
}

func (m *Object) GetLockedBalance() string {
	if m != nil {
		return m.LockedBalance
	}
	return ""
}

func (m *Object) GetRemoved() bool {
	if m != nil {
		return m.Removed
	}
	return false
}

func (m *Object) GetUpdateAt() int64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func (m *Object) GetDeleteAt() int64 {
	if m != nil {
		return m.DeleteAt
	}
	return 0
}

func (m *Object) GetDeleteReason() string {
	if m != nil {
		return m.DeleteReason
	}
	return ""
}

func (m *Object) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *Object) GetCreateTxHash() string {
	if m != nil {
		return m.CreateTxHash
	}
	return ""
}

func (m *Object) GetUpdateTxHash() string {
	if m != nil {
		return m.UpdateTxHash
	}
	return ""
}

func (m *Object) GetSealTxHash() string {
	if m != nil {
		return m.SealTxHash
	}
	return ""
}

// ObjectDetails defines object related bucket and gvg info
type ObjectDetails struct {
	// object is the structure for user object
	Object *Object `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	// bucket is the structure for user bucket
	Bucket *Bucket `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// gvg defines a global virtual group consists of one primary SP (SP) and multiple secondary SP
	Gvg *types1.GlobalVirtualGroup `protobuf:"bytes,3,opt,name=gvg,proto3" json:"gvg,omitempty"`
}

func (m *ObjectDetails) Reset()         { *m = ObjectDetails{} }
func (m *ObjectDetails) String() string { return proto.CompactTextString(m) }
func (*ObjectDetails) ProtoMessage()    {}
func (*ObjectDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{2}
}
func (m *ObjectDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectDetails.Merge(m, src)
}
func (m *ObjectDetails) XXX_Size() int {
	return m.Size()
}
func (m *ObjectDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectDetails proto.InternalMessageInfo

func (m *ObjectDetails) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *ObjectDetails) GetBucket() *Bucket {
	if m != nil {
		return m.Bucket
	}
	return nil
}

func (m *ObjectDetails) GetGvg() *types1.GlobalVirtualGroup {
	if m != nil {
		return m.Gvg
	}
	return nil
}

// VGFInfoBucket is the structure for user bucket with related vgf info
type VGFInfoBucket struct {
	// bucket_info defines the information of the bucket.
	BucketInfo *types.BucketInfo `protobuf:"bytes,1,opt,name=bucket_info,json=bucketInfo,proto3" json:"bucket_info,omitempty"`
	// removed defines the bucket is deleted or not
	Removed bool `protobuf:"varint,2,opt,name=removed,proto3" json:"removed,omitempty"`
	// delete_at defines the block number when the bucket deleted.
	DeleteAt int64 `protobuf:"varint,3,opt,name=delete_at,json=deleteAt,proto3" json:"delete_at,omitempty"`
	// delete_reason defines the deleted reason of bucket
	DeleteReason string `protobuf:"bytes,4,opt,name=delete_reason,json=deleteReason,proto3" json:"delete_reason,omitempty"`
	// operator defines the operator address of bucket
	Operator string `protobuf:"bytes,5,opt,name=operator,proto3" json:"operator,omitempty"`
	// create_tx_hash defines the creation transaction hash of object
	CreateTxHash string `protobuf:"bytes,6,opt,name=create_tx_hash,json=createTxHash,proto3" json:"create_tx_hash,omitempty"`
	// update_tx_hash defines the update transaction hash of object
	UpdateTxHash string `protobuf:"bytes,7,opt,name=update_tx_hash,json=updateTxHash,proto3" json:"update_tx_hash,omitempty"`
	// update_at defines the block number when the object updated
	UpdateAt int64 `protobuf:"varint,8,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	// update_time defines the block number when the object updated
	UpdateTime int64 `protobuf:"varint,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// vgf defines the vgf info
	Vgf *types1.GlobalVirtualGroupFamily `protobuf:"bytes,10,opt,name=vgf,proto3" json:"vgf,omitempty"`
}

func (m *VGFInfoBucket) Reset()         { *m = VGFInfoBucket{} }
func (m *VGFInfoBucket) String() string { return proto.CompactTextString(m) }
func (*VGFInfoBucket) ProtoMessage()    {}
func (*VGFInfoBucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{3}
}
func (m *VGFInfoBucket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VGFInfoBucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VGFInfoBucket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VGFInfoBucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VGFInfoBucket.Merge(m, src)
}
func (m *VGFInfoBucket) XXX_Size() int {
	return m.Size()
}
func (m *VGFInfoBucket) XXX_DiscardUnknown() {
	xxx_messageInfo_VGFInfoBucket.DiscardUnknown(m)
}

var xxx_messageInfo_VGFInfoBucket proto.InternalMessageInfo

func (m *VGFInfoBucket) GetBucketInfo() *types.BucketInfo {
	if m != nil {
		return m.BucketInfo
	}
	return nil
}

func (m *VGFInfoBucket) GetRemoved() bool {
	if m != nil {
		return m.Removed
	}
	return false
}

func (m *VGFInfoBucket) GetDeleteAt() int64 {
	if m != nil {
		return m.DeleteAt
	}
	return 0
}

func (m *VGFInfoBucket) GetDeleteReason() string {
	if m != nil {
		return m.DeleteReason
	}
	return ""
}

func (m *VGFInfoBucket) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *VGFInfoBucket) GetCreateTxHash() string {
	if m != nil {
		return m.CreateTxHash
	}
	return ""
}

func (m *VGFInfoBucket) GetUpdateTxHash() string {
	if m != nil {
		return m.UpdateTxHash
	}
	return ""
}

func (m *VGFInfoBucket) GetUpdateAt() int64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func (m *VGFInfoBucket) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *VGFInfoBucket) GetVgf() *types1.GlobalVirtualGroupFamily {
	if m != nil {
		return m.Vgf
	}
	return nil
}

// PaymentAccount is the structure for user payment account info
type PaymentAccount struct {
	// address defines the address of payment account
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// owner defines the owner of this payment account
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// refundable defines the payment account is refundable or not
	Refundable bool `protobuf:"varint,3,opt,name=refundable,proto3" json:"refundable,omitempty"`
	// update_at defines the update block height of this payment account
	UpdateAt int64 `protobuf:"varint,4,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	// update_time defines the update time of this payment account
	UpdateTime int64 `protobuf:"varint,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (m *PaymentAccount) Reset()         { *m = PaymentAccount{} }
func (m *PaymentAccount) String() string { return proto.CompactTextString(m) }
func (*PaymentAccount) ProtoMessage()    {}
func (*PaymentAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{4}
}
func (m *PaymentAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentAccount.Merge(m, src)
}
func (m *PaymentAccount) XXX_Size() int {
	return m.Size()
}
func (m *PaymentAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentAccount.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentAccount proto.InternalMessageInfo

func (m *PaymentAccount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *PaymentAccount) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *PaymentAccount) GetRefundable() bool {
	if m != nil {
		return m.Refundable
	}
	return false
}

func (m *PaymentAccount) GetUpdateAt() int64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func (m *PaymentAccount) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

type PaymentAccountMeta struct {
	// payment_account defines payment account info
	PaymentAccount *PaymentAccount `protobuf:"bytes,1,opt,name=payment_account,json=paymentAccount,proto3" json:"payment_account,omitempty"`
	// stream_record defines stream payment record of a stream account
	StreamRecord *types2.StreamRecord `protobuf:"bytes,2,opt,name=stream_record,json=streamRecord,proto3" json:"stream_record,omitempty"`
}

func (m *PaymentAccountMeta) Reset()         { *m = PaymentAccountMeta{} }
func (m *PaymentAccountMeta) String() string { return proto.CompactTextString(m) }
func (*PaymentAccountMeta) ProtoMessage()    {}
func (*PaymentAccountMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{5}
}
func (m *PaymentAccountMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentAccountMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentAccountMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentAccountMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentAccountMeta.Merge(m, src)
}
func (m *PaymentAccountMeta) XXX_Size() int {
	return m.Size()
}
func (m *PaymentAccountMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentAccountMeta.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentAccountMeta proto.InternalMessageInfo

func (m *PaymentAccountMeta) GetPaymentAccount() *PaymentAccount {
	if m != nil {
		return m.PaymentAccount
	}
	return nil
}

func (m *PaymentAccountMeta) GetStreamRecord() *types2.StreamRecord {
	if m != nil {
		return m.StreamRecord
	}
	return nil
}

// GfSpGetUserBucketsRequest is request type for the GfSpGetUserBuckets RPC method.
type GfSpGetUserBucketsRequest struct {
	// account_id is the account address of user
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// include_removed indicates whether this request can get the removed buckets information
	IncludeRemoved bool `protobuf:"varint,2,opt,name=include_removed,json=includeRemoved,proto3" json:"include_removed,omitempty"`
}

func (m *GfSpGetUserBucketsRequest) Reset()         { *m = GfSpGetUserBucketsRequest{} }
func (m *GfSpGetUserBucketsRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpGetUserBucketsRequest) ProtoMessage()    {}
func (*GfSpGetUserBucketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{6}
}
func (m *GfSpGetUserBucketsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetUserBucketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetUserBucketsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetUserBucketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetUserBucketsRequest.Merge(m, src)
}
func (m *GfSpGetUserBucketsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetUserBucketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetUserBucketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetUserBucketsRequest proto.InternalMessageInfo

func (m *GfSpGetUserBucketsRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *GfSpGetUserBucketsRequest) GetIncludeRemoved() bool {
	if m != nil {
		return m.IncludeRemoved
	}
	return false
}

// GfSpGetUserBucketsResponse is response type for the GfSpGetUserBuckets RPC method.
type GfSpGetUserBucketsResponse struct {
	// buckets defines the list of bucket
	Buckets []*VGFInfoBucket `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (m *GfSpGetUserBucketsResponse) Reset()         { *m = GfSpGetUserBucketsResponse{} }
func (m *GfSpGetUserBucketsResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpGetUserBucketsResponse) ProtoMessage()    {}
func (*GfSpGetUserBucketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{7}
}
func (m *GfSpGetUserBucketsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetUserBucketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetUserBucketsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetUserBucketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetUserBucketsResponse.Merge(m, src)
}
func (m *GfSpGetUserBucketsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetUserBucketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetUserBucketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetUserBucketsResponse proto.InternalMessageInfo

func (m *GfSpGetUserBucketsResponse) GetBuckets() []*VGFInfoBucket {
	if m != nil {
		return m.Buckets
	}
	return nil
}

// GfSpListObjectsByBucketNameRequest is request type for the GfSpListObjectsByBucketName RPC method
type GfSpListObjectsByBucketNameRequest struct {
	// bucket_name is the name of the bucket
	BucketName string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// account_id is the account address of user
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// max_keys sets the maximum number of keys returned in the response
	MaxKeys uint64 `protobuf:"varint,3,opt,name=max_keys,json=maxKeys,proto3" json:"max_keys,omitempty"`
	// start_after is where you want to start listing from
	StartAfter string `protobuf:"bytes,4,opt,name=start_after,json=startAfter,proto3" json:"start_after,omitempty"`
	// continuation_token indicates that the list is being continued on this bucket with a token
	ContinuationToken string `protobuf:"bytes,5,opt,name=continuation_token,json=continuationToken,proto3" json:"continuation_token,omitempty"`
	// delimiter is a character you use to group keys
	Delimiter string `protobuf:"bytes,6,opt,name=delimiter,proto3" json:"delimiter,omitempty"`
	// prefix limits the response to keys that begin with the specified prefix
	Prefix string `protobuf:"bytes,7,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// include_removed indicates whether this request can get the removed objects information
	IncludeRemoved bool `protobuf:"varint,8,opt,name=include_removed,json=includeRemoved,proto3" json:"include_removed,omitempty"`
}

func (m *GfSpListObjectsByBucketNameRequest) Reset()         { *m = GfSpListObjectsByBucketNameRequest{} }
func (m *GfSpListObjectsByBucketNameRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpListObjectsByBucketNameRequest) ProtoMessage()    {}
func (*GfSpListObjectsByBucketNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{8}
}
func (m *GfSpListObjectsByBucketNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListObjectsByBucketNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListObjectsByBucketNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListObjectsByBucketNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListObjectsByBucketNameRequest.Merge(m, src)
}
func (m *GfSpListObjectsByBucketNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListObjectsByBucketNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListObjectsByBucketNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListObjectsByBucketNameRequest proto.InternalMessageInfo

func (m *GfSpListObjectsByBucketNameRequest) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *GfSpListObjectsByBucketNameRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *GfSpListObjectsByBucketNameRequest) GetMaxKeys() uint64 {
	if m != nil {
		return m.MaxKeys
	}
	return 0
}

func (m *GfSpListObjectsByBucketNameRequest) GetStartAfter() string {
	if m != nil {
		return m.StartAfter
	}
	return ""
}

func (m *GfSpListObjectsByBucketNameRequest) GetContinuationToken() string {
	if m != nil {
		return m.ContinuationToken
	}
	return ""
}

func (m *GfSpListObjectsByBucketNameRequest) GetDelimiter() string {
	if m != nil {
		return m.Delimiter
	}
	return ""
}

func (m *GfSpListObjectsByBucketNameRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *GfSpListObjectsByBucketNameRequest) GetIncludeRemoved() bool {
	if m != nil {
		return m.IncludeRemoved
	}
	return false
}

// GfSpListObjectsByBucketNameResponse is response type for the GfSpListObjectsByBucketName RPC method.
type GfSpListObjectsByBucketNameResponse struct {
	// objects defines the list of object
	Objects []*Object `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty"`
	// key_count is the number of keys returned with this request
	KeyCount uint64 `protobuf:"varint,2,opt,name=key_count,json=keyCount,proto3" json:"key_count,omitempty"`
	// max_keys sets the maximum number of keys returned in the response
	MaxKeys uint64 `protobuf:"varint,3,opt,name=max_keys,json=maxKeys,proto3" json:"max_keys,omitempty"`
	// is_truncated set to false if all of the results were returned. set to true if more keys are available to return
	IsTruncated bool `protobuf:"varint,4,opt,name=is_truncated,json=isTruncated,proto3" json:"is_truncated,omitempty"`
	// next_continuation_token is sent when is_truncated is true, which means there are more keys in the bucket that can be listed
	NextContinuationToken string `protobuf:"bytes,5,opt,name=next_continuation_token,json=nextContinuationToken,proto3" json:"next_continuation_token,omitempty"`
	// name of the bucket
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// prefix is the prefix used during the query.
	Prefix string `protobuf:"bytes,7,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// delimiter is the delimiter used during the query
	Delimiter string `protobuf:"bytes,8,opt,name=delimiter,proto3" json:"delimiter,omitempty"`
	// common_prefixes a list of strings representing common prefixes. common_prefixes are those parts of object key names that fall between the specified delimiters
	CommonPrefixes []string `protobuf:"bytes,9,rep,name=common_prefixes,json=commonPrefixes,proto3" json:"common_prefixes,omitempty"`
	// continuationToken is the continuation token used during the query
	ContinuationToken string `protobuf:"bytes,10,opt,name=continuation_token,json=continuationToken,proto3" json:"continuation_token,omitempty"`
}

func (m *GfSpListObjectsByBucketNameResponse) Reset()         { *m = GfSpListObjectsByBucketNameResponse{} }
func (m *GfSpListObjectsByBucketNameResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpListObjectsByBucketNameResponse) ProtoMessage()    {}
func (*GfSpListObjectsByBucketNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{9}
}
func (m *GfSpListObjectsByBucketNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListObjectsByBucketNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListObjectsByBucketNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListObjectsByBucketNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListObjectsByBucketNameResponse.Merge(m, src)
}
func (m *GfSpListObjectsByBucketNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListObjectsByBucketNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListObjectsByBucketNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListObjectsByBucketNameResponse proto.InternalMessageInfo

func (m *GfSpListObjectsByBucketNameResponse) GetObjects() []*Object {
	if m != nil {
		return m.Objects
	}
	return nil
}

func (m *GfSpListObjectsByBucketNameResponse) GetKeyCount() uint64 {
	if m != nil {
		return m.KeyCount
	}
	return 0
}

func (m *GfSpListObjectsByBucketNameResponse) GetMaxKeys() uint64 {
	if m != nil {
		return m.MaxKeys
	}
	return 0
}

func (m *GfSpListObjectsByBucketNameResponse) GetIsTruncated() bool {
	if m != nil {
		return m.IsTruncated
	}
	return false
}

func (m *GfSpListObjectsByBucketNameResponse) GetNextContinuationToken() string {
	if m != nil {
		return m.NextContinuationToken
	}
	return ""
}

func (m *GfSpListObjectsByBucketNameResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GfSpListObjectsByBucketNameResponse) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *GfSpListObjectsByBucketNameResponse) GetDelimiter() string {
	if m != nil {
		return m.Delimiter
	}
	return ""
}

func (m *GfSpListObjectsByBucketNameResponse) GetCommonPrefixes() []string {
	if m != nil {
		return m.CommonPrefixes
	}
	return nil
}

func (m *GfSpListObjectsByBucketNameResponse) GetContinuationToken() string {
	if m != nil {
		return m.ContinuationToken
	}
	return ""
}

// GfSpGetBucketByBucketNameRequest is request type for the GfSpGetBucketByBucketName RPC method
type GfSpGetBucketByBucketNameRequest struct {
	// bucket_name is the name of the bucket
	BucketName string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// include_private indicates whether this request can get the private buckets information
	IncludePrivate bool `protobuf:"varint,2,opt,name=include_private,json=includePrivate,proto3" json:"include_private,omitempty"`
}

func (m *GfSpGetBucketByBucketNameRequest) Reset()         { *m = GfSpGetBucketByBucketNameRequest{} }
func (m *GfSpGetBucketByBucketNameRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpGetBucketByBucketNameRequest) ProtoMessage()    {}
func (*GfSpGetBucketByBucketNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{10}
}
func (m *GfSpGetBucketByBucketNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetBucketByBucketNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetBucketByBucketNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetBucketByBucketNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetBucketByBucketNameRequest.Merge(m, src)
}
func (m *GfSpGetBucketByBucketNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetBucketByBucketNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetBucketByBucketNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetBucketByBucketNameRequest proto.InternalMessageInfo

func (m *GfSpGetBucketByBucketNameRequest) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *GfSpGetBucketByBucketNameRequest) GetIncludePrivate() bool {
	if m != nil {
		return m.IncludePrivate
	}
	return false
}

// GfSpGetBucketByBucketNameResponse is response type for the GfSpGetBucketByBucketName RPC method.
type GfSpGetBucketByBucketNameResponse struct {
	// bucket defines the information of a bucket
	Bucket *Bucket `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
}

func (m *GfSpGetBucketByBucketNameResponse) Reset()         { *m = GfSpGetBucketByBucketNameResponse{} }
func (m *GfSpGetBucketByBucketNameResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpGetBucketByBucketNameResponse) ProtoMessage()    {}
func (*GfSpGetBucketByBucketNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{11}
}
func (m *GfSpGetBucketByBucketNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetBucketByBucketNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetBucketByBucketNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetBucketByBucketNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetBucketByBucketNameResponse.Merge(m, src)
}
func (m *GfSpGetBucketByBucketNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetBucketByBucketNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetBucketByBucketNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetBucketByBucketNameResponse proto.InternalMessageInfo

func (m *GfSpGetBucketByBucketNameResponse) GetBucket() *Bucket {
	if m != nil {
		return m.Bucket
	}
	return nil
}

// GfSpGetBucketByBucketIDRequest is request type for the GfSpGetBucketByBucketID RPC method
type GfSpGetBucketByBucketIDRequest struct {
	// bucket_id is the unique identifier of bucket
	BucketId int64 `protobuf:"varint,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	// include_private indicates whether this request can get the private buckets information
	IncludePrivate bool `protobuf:"varint,2,opt,name=include_private,json=includePrivate,proto3" json:"include_private,omitempty"`
}

func (m *GfSpGetBucketByBucketIDRequest) Reset()         { *m = GfSpGetBucketByBucketIDRequest{} }
func (m *GfSpGetBucketByBucketIDRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpGetBucketByBucketIDRequest) ProtoMessage()    {}
func (*GfSpGetBucketByBucketIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{12}
}
func (m *GfSpGetBucketByBucketIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetBucketByBucketIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetBucketByBucketIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetBucketByBucketIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetBucketByBucketIDRequest.Merge(m, src)
}
func (m *GfSpGetBucketByBucketIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetBucketByBucketIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetBucketByBucketIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetBucketByBucketIDRequest proto.InternalMessageInfo

func (m *GfSpGetBucketByBucketIDRequest) GetBucketId() int64 {
	if m != nil {
		return m.BucketId
	}
	return 0
}

func (m *GfSpGetBucketByBucketIDRequest) GetIncludePrivate() bool {
	if m != nil {
		return m.IncludePrivate
	}
	return false
}

// GfSpGetBucketByBucketIDResponse is response type for the GfSpGetBucketByBucketID RPC method.
type GfSpGetBucketByBucketIDResponse struct {
	// bucket defines the information of a bucket
	Bucket *Bucket `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
}

func (m *GfSpGetBucketByBucketIDResponse) Reset()         { *m = GfSpGetBucketByBucketIDResponse{} }
func (m *GfSpGetBucketByBucketIDResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpGetBucketByBucketIDResponse) ProtoMessage()    {}
func (*GfSpGetBucketByBucketIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{13}
}
func (m *GfSpGetBucketByBucketIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetBucketByBucketIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetBucketByBucketIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetBucketByBucketIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetBucketByBucketIDResponse.Merge(m, src)
}
func (m *GfSpGetBucketByBucketIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetBucketByBucketIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetBucketByBucketIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetBucketByBucketIDResponse proto.InternalMessageInfo

func (m *GfSpGetBucketByBucketIDResponse) GetBucket() *Bucket {
	if m != nil {
		return m.Bucket
	}
	return nil
}

// GfSpListDeletedObjectsByBlockNumberRangeRequest is request type for the GfSpListDeletedObjectsByBlockNumberRange RPC method
type GfSpListDeletedObjectsByBlockNumberRangeRequest struct {
	// start_block_number defines the start of range
	// [start_block_number, end_block_number], start_block_number > end_block_number is invalid
	StartBlockNumber int64 `protobuf:"varint,1,opt,name=start_block_number,json=startBlockNumber,proto3" json:"start_block_number,omitempty"`
	// end_block_number defines the end of range
	// end_block_number < 0 or start_block_number > end_block_number is invalid
	EndBlockNumber int64 `protobuf:"varint,2,opt,name=end_block_number,json=endBlockNumber,proto3" json:"end_block_number,omitempty"`
	// include_private indicates whether this request can get the private objects information
	IncludePrivate bool `protobuf:"varint,3,opt,name=include_private,json=includePrivate,proto3" json:"include_private,omitempty"`
}

func (m *GfSpListDeletedObjectsByBlockNumberRangeRequest) Reset() {
	*m = GfSpListDeletedObjectsByBlockNumberRangeRequest{}
}
func (m *GfSpListDeletedObjectsByBlockNumberRangeRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GfSpListDeletedObjectsByBlockNumberRangeRequest) ProtoMessage() {}
func (*GfSpListDeletedObjectsByBlockNumberRangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{14}
}
func (m *GfSpListDeletedObjectsByBlockNumberRangeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListDeletedObjectsByBlockNumberRangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListDeletedObjectsByBlockNumberRangeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListDeletedObjectsByBlockNumberRangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListDeletedObjectsByBlockNumberRangeRequest.Merge(m, src)
}
func (m *GfSpListDeletedObjectsByBlockNumberRangeRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListDeletedObjectsByBlockNumberRangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListDeletedObjectsByBlockNumberRangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListDeletedObjectsByBlockNumberRangeRequest proto.InternalMessageInfo

func (m *GfSpListDeletedObjectsByBlockNumberRangeRequest) GetStartBlockNumber() int64 {
	if m != nil {
		return m.StartBlockNumber
	}
	return 0
}

func (m *GfSpListDeletedObjectsByBlockNumberRangeRequest) GetEndBlockNumber() int64 {
	if m != nil {
		return m.EndBlockNumber
	}
	return 0
}

func (m *GfSpListDeletedObjectsByBlockNumberRangeRequest) GetIncludePrivate() bool {
	if m != nil {
		return m.IncludePrivate
	}
	return false
}

// GfSpListDeletedObjectsByBlockNumberRangeResponse is response type for the GfSpListDeletedObjectsByBlockNumberRange RPC method.
type GfSpListDeletedObjectsByBlockNumberRangeResponse struct {
	// objects defines the list of object
	Objects []*Object `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty"`
	// latest_block_number defines the response objects latest block number
	EndBlockNumber int64 `protobuf:"varint,2,opt,name=end_block_number,json=endBlockNumber,proto3" json:"end_block_number,omitempty"`
}

func (m *GfSpListDeletedObjectsByBlockNumberRangeResponse) Reset() {
	*m = GfSpListDeletedObjectsByBlockNumberRangeResponse{}
}
func (m *GfSpListDeletedObjectsByBlockNumberRangeResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GfSpListDeletedObjectsByBlockNumberRangeResponse) ProtoMessage() {}
func (*GfSpListDeletedObjectsByBlockNumberRangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{15}
}
func (m *GfSpListDeletedObjectsByBlockNumberRangeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListDeletedObjectsByBlockNumberRangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListDeletedObjectsByBlockNumberRangeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListDeletedObjectsByBlockNumberRangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListDeletedObjectsByBlockNumberRangeResponse.Merge(m, src)
}
func (m *GfSpListDeletedObjectsByBlockNumberRangeResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListDeletedObjectsByBlockNumberRangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListDeletedObjectsByBlockNumberRangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListDeletedObjectsByBlockNumberRangeResponse proto.InternalMessageInfo

func (m *GfSpListDeletedObjectsByBlockNumberRangeResponse) GetObjects() []*Object {
	if m != nil {
		return m.Objects
	}
	return nil
}

func (m *GfSpListDeletedObjectsByBlockNumberRangeResponse) GetEndBlockNumber() int64 {
	if m != nil {
		return m.EndBlockNumber
	}
	return 0
}

// GfSpGetUserBucketsCountRequest is request type for the GfSpGetUserBucketsCount RPC method.
type GfSpGetUserBucketsCountRequest struct {
	// account_id is the account address of user
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// include_removed indicates whether this request can get the removed buckets information
	IncludeRemoved bool `protobuf:"varint,2,opt,name=include_removed,json=includeRemoved,proto3" json:"include_removed,omitempty"`
}

func (m *GfSpGetUserBucketsCountRequest) Reset()         { *m = GfSpGetUserBucketsCountRequest{} }
func (m *GfSpGetUserBucketsCountRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpGetUserBucketsCountRequest) ProtoMessage()    {}
func (*GfSpGetUserBucketsCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{16}
}
func (m *GfSpGetUserBucketsCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetUserBucketsCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetUserBucketsCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetUserBucketsCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetUserBucketsCountRequest.Merge(m, src)
}
func (m *GfSpGetUserBucketsCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetUserBucketsCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetUserBucketsCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetUserBucketsCountRequest proto.InternalMessageInfo

func (m *GfSpGetUserBucketsCountRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *GfSpGetUserBucketsCountRequest) GetIncludeRemoved() bool {
	if m != nil {
		return m.IncludeRemoved
	}
	return false
}

// GfSpGetUserBucketsCountResponse is response type for the GfSpGetUserBucketsCount RPC method.
type GfSpGetUserBucketsCountResponse struct {
	// count defines total count of user buckets
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *GfSpGetUserBucketsCountResponse) Reset()         { *m = GfSpGetUserBucketsCountResponse{} }
func (m *GfSpGetUserBucketsCountResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpGetUserBucketsCountResponse) ProtoMessage()    {}
func (*GfSpGetUserBucketsCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{17}
}
func (m *GfSpGetUserBucketsCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetUserBucketsCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetUserBucketsCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetUserBucketsCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetUserBucketsCountResponse.Merge(m, src)
}
func (m *GfSpGetUserBucketsCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetUserBucketsCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetUserBucketsCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetUserBucketsCountResponse proto.InternalMessageInfo

func (m *GfSpGetUserBucketsCountResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// GfSpListExpiredBucketsBySpRequest is the request type for the GfSpListExpiredBucketsBySp RPC method.
type GfSpListExpiredBucketsBySpRequest struct {
	// create_at defines the create timestamp of bucket
	CreateAt int64 `protobuf:"varint,1,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	// primary_sp_id defines the primary sp id of bucket
	PrimarySpId uint32 `protobuf:"varint,2,opt,name=primary_sp_id,json=primarySpId,proto3" json:"primary_sp_id,omitempty"`
	// limit defines the return number limit of bucket
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *GfSpListExpiredBucketsBySpRequest) Reset()         { *m = GfSpListExpiredBucketsBySpRequest{} }
func (m *GfSpListExpiredBucketsBySpRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpListExpiredBucketsBySpRequest) ProtoMessage()    {}
func (*GfSpListExpiredBucketsBySpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{18}
}
func (m *GfSpListExpiredBucketsBySpRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListExpiredBucketsBySpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListExpiredBucketsBySpRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListExpiredBucketsBySpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListExpiredBucketsBySpRequest.Merge(m, src)
}
func (m *GfSpListExpiredBucketsBySpRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListExpiredBucketsBySpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListExpiredBucketsBySpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListExpiredBucketsBySpRequest proto.InternalMessageInfo

func (m *GfSpListExpiredBucketsBySpRequest) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *GfSpListExpiredBucketsBySpRequest) GetPrimarySpId() uint32 {
	if m != nil {
		return m.PrimarySpId
	}
	return 0
}

func (m *GfSpListExpiredBucketsBySpRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// GfSpListExpiredBucketsBySpResponse is the response type for the GfSpListExpiredBucketsBySp RPC method.
type GfSpListExpiredBucketsBySpResponse struct {
	// buckets defines the list of expired bucket
	Buckets []*Bucket `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (m *GfSpListExpiredBucketsBySpResponse) Reset()         { *m = GfSpListExpiredBucketsBySpResponse{} }
func (m *GfSpListExpiredBucketsBySpResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpListExpiredBucketsBySpResponse) ProtoMessage()    {}
func (*GfSpListExpiredBucketsBySpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{19}
}
func (m *GfSpListExpiredBucketsBySpResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListExpiredBucketsBySpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListExpiredBucketsBySpResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListExpiredBucketsBySpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListExpiredBucketsBySpResponse.Merge(m, src)
}
func (m *GfSpListExpiredBucketsBySpResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListExpiredBucketsBySpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListExpiredBucketsBySpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListExpiredBucketsBySpResponse proto.InternalMessageInfo

func (m *GfSpListExpiredBucketsBySpResponse) GetBuckets() []*Bucket {
	if m != nil {
		return m.Buckets
	}
	return nil
}

// GfSpGetObjectMetaRequest is request type for the GfSpGetObjectMeta RPC method
type GfSpGetObjectMetaRequest struct {
	// object_name is the name of the object
	ObjectName string `protobuf:"bytes,1,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	// bucket_name is the name of the bucket
	BucketName string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// include_private indicates whether this request can get the private objects information
	IncludePrivate bool `protobuf:"varint,3,opt,name=include_private,json=includePrivate,proto3" json:"include_private,omitempty"`
}

func (m *GfSpGetObjectMetaRequest) Reset()         { *m = GfSpGetObjectMetaRequest{} }
func (m *GfSpGetObjectMetaRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpGetObjectMetaRequest) ProtoMessage()    {}
func (*GfSpGetObjectMetaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{20}
}
func (m *GfSpGetObjectMetaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetObjectMetaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetObjectMetaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetObjectMetaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetObjectMetaRequest.Merge(m, src)
}
func (m *GfSpGetObjectMetaRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetObjectMetaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetObjectMetaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetObjectMetaRequest proto.InternalMessageInfo

func (m *GfSpGetObjectMetaRequest) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

func (m *GfSpGetObjectMetaRequest) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *GfSpGetObjectMetaRequest) GetIncludePrivate() bool {
	if m != nil {
		return m.IncludePrivate
	}
	return false
}

// GfSpGetObjectMetaResponse is response type for the GfSpGetObjectMeta RPC method.
type GfSpGetObjectMetaResponse struct {
	// object defines the information of an object
	Object *Object `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
}

func (m *GfSpGetObjectMetaResponse) Reset()         { *m = GfSpGetObjectMetaResponse{} }
func (m *GfSpGetObjectMetaResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpGetObjectMetaResponse) ProtoMessage()    {}
func (*GfSpGetObjectMetaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{21}
}
func (m *GfSpGetObjectMetaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetObjectMetaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetObjectMetaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetObjectMetaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetObjectMetaResponse.Merge(m, src)
}
func (m *GfSpGetObjectMetaResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetObjectMetaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetObjectMetaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetObjectMetaResponse proto.InternalMessageInfo

func (m *GfSpGetObjectMetaResponse) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

// GfSpGetPaymentByBucketNameRequest is request type for the GfSpGetPaymentByBucketName RPC method
type GfSpGetPaymentByBucketNameRequest struct {
	// bucket_name is the name of the bucket
	BucketName string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// include_private indicates whether this request can get the private buckets information
	IncludePrivate bool `protobuf:"varint,2,opt,name=include_private,json=includePrivate,proto3" json:"include_private,omitempty"`
}

func (m *GfSpGetPaymentByBucketNameRequest) Reset()         { *m = GfSpGetPaymentByBucketNameRequest{} }
func (m *GfSpGetPaymentByBucketNameRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpGetPaymentByBucketNameRequest) ProtoMessage()    {}
func (*GfSpGetPaymentByBucketNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{22}
}
func (m *GfSpGetPaymentByBucketNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetPaymentByBucketNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetPaymentByBucketNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetPaymentByBucketNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetPaymentByBucketNameRequest.Merge(m, src)
}
func (m *GfSpGetPaymentByBucketNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetPaymentByBucketNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetPaymentByBucketNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetPaymentByBucketNameRequest proto.InternalMessageInfo

func (m *GfSpGetPaymentByBucketNameRequest) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *GfSpGetPaymentByBucketNameRequest) GetIncludePrivate() bool {
	if m != nil {
		return m.IncludePrivate
	}
	return false
}

// GfSpGetPaymentByBucketNameResponse is response type for the GfSpGetPaymentByBucketName RPC method.
type GfSpGetPaymentByBucketNameResponse struct {
	// stream_record defines stream payment record of a stream account
	StreamRecord *types2.StreamRecord `protobuf:"bytes,1,opt,name=stream_record,json=streamRecord,proto3" json:"stream_record,omitempty"`
}

func (m *GfSpGetPaymentByBucketNameResponse) Reset()         { *m = GfSpGetPaymentByBucketNameResponse{} }
func (m *GfSpGetPaymentByBucketNameResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpGetPaymentByBucketNameResponse) ProtoMessage()    {}
func (*GfSpGetPaymentByBucketNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{23}
}
func (m *GfSpGetPaymentByBucketNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetPaymentByBucketNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetPaymentByBucketNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetPaymentByBucketNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetPaymentByBucketNameResponse.Merge(m, src)
}
func (m *GfSpGetPaymentByBucketNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetPaymentByBucketNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetPaymentByBucketNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetPaymentByBucketNameResponse proto.InternalMessageInfo

func (m *GfSpGetPaymentByBucketNameResponse) GetStreamRecord() *types2.StreamRecord {
	if m != nil {
		return m.StreamRecord
	}
	return nil
}

// GfSpGetPaymentByBucketIDRequest is request type for the GfSpGetPaymentByBucketID RPC method
type GfSpGetPaymentByBucketIDRequest struct {
	// bucket_id is the unique identifier of bucket
	BucketId int64 `protobuf:"varint,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	// include_private indicates whether this request can get the private buckets information
	IncludePrivate bool `protobuf:"varint,2,opt,name=include_private,json=includePrivate,proto3" json:"include_private,omitempty"`
}

func (m *GfSpGetPaymentByBucketIDRequest) Reset()         { *m = GfSpGetPaymentByBucketIDRequest{} }
func (m *GfSpGetPaymentByBucketIDRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpGetPaymentByBucketIDRequest) ProtoMessage()    {}
func (*GfSpGetPaymentByBucketIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{24}
}
func (m *GfSpGetPaymentByBucketIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetPaymentByBucketIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetPaymentByBucketIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetPaymentByBucketIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetPaymentByBucketIDRequest.Merge(m, src)
}
func (m *GfSpGetPaymentByBucketIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetPaymentByBucketIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetPaymentByBucketIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetPaymentByBucketIDRequest proto.InternalMessageInfo

func (m *GfSpGetPaymentByBucketIDRequest) GetBucketId() int64 {
	if m != nil {
		return m.BucketId
	}
	return 0
}

func (m *GfSpGetPaymentByBucketIDRequest) GetIncludePrivate() bool {
	if m != nil {
		return m.IncludePrivate
	}
	return false
}

// GfSpGetPaymentByBucketIDResponse is response type for the GfSpGetPaymentByBucketID RPC method.
type GfSpGetPaymentByBucketIDResponse struct {
	// stream_record defines stream payment record of a stream account
	StreamRecord *types2.StreamRecord `protobuf:"bytes,1,opt,name=stream_record,json=streamRecord,proto3" json:"stream_record,omitempty"`
}

func (m *GfSpGetPaymentByBucketIDResponse) Reset()         { *m = GfSpGetPaymentByBucketIDResponse{} }
func (m *GfSpGetPaymentByBucketIDResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpGetPaymentByBucketIDResponse) ProtoMessage()    {}
func (*GfSpGetPaymentByBucketIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{25}
}
func (m *GfSpGetPaymentByBucketIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetPaymentByBucketIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetPaymentByBucketIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetPaymentByBucketIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetPaymentByBucketIDResponse.Merge(m, src)
}
func (m *GfSpGetPaymentByBucketIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetPaymentByBucketIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetPaymentByBucketIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetPaymentByBucketIDResponse proto.InternalMessageInfo

func (m *GfSpGetPaymentByBucketIDResponse) GetStreamRecord() *types2.StreamRecord {
	if m != nil {
		return m.StreamRecord
	}
	return nil
}

// GfSpGetBucketMetaRequest is request type for the GfSpGetBucketMeta RPC method
type GfSpGetBucketMetaRequest struct {
	// bucket_name is the name of the bucket
	BucketName string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// include_private indicates whether this request can get the private buckets information
	IncludePrivate bool `protobuf:"varint,2,opt,name=include_private,json=includePrivate,proto3" json:"include_private,omitempty"`
}

func (m *GfSpGetBucketMetaRequest) Reset()         { *m = GfSpGetBucketMetaRequest{} }
func (m *GfSpGetBucketMetaRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpGetBucketMetaRequest) ProtoMessage()    {}
func (*GfSpGetBucketMetaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{26}
}
func (m *GfSpGetBucketMetaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetBucketMetaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetBucketMetaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetBucketMetaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetBucketMetaRequest.Merge(m, src)
}
func (m *GfSpGetBucketMetaRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetBucketMetaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetBucketMetaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetBucketMetaRequest proto.InternalMessageInfo

func (m *GfSpGetBucketMetaRequest) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *GfSpGetBucketMetaRequest) GetIncludePrivate() bool {
	if m != nil {
		return m.IncludePrivate
	}
	return false
}

// GfSpGetBucketMetaResponse is response type for the GfSpGetBucketMeta RPC method
type GfSpGetBucketMetaResponse struct {
	// bucket defines the information of a bucket
	Bucket *VGFInfoBucket `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// stream_record defines stream payment record of a stream account
	StreamRecord *types2.StreamRecord `protobuf:"bytes,2,opt,name=stream_record,json=streamRecord,proto3" json:"stream_record,omitempty"`
}

func (m *GfSpGetBucketMetaResponse) Reset()         { *m = GfSpGetBucketMetaResponse{} }
func (m *GfSpGetBucketMetaResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpGetBucketMetaResponse) ProtoMessage()    {}
func (*GfSpGetBucketMetaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{27}
}
func (m *GfSpGetBucketMetaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetBucketMetaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetBucketMetaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetBucketMetaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetBucketMetaResponse.Merge(m, src)
}
func (m *GfSpGetBucketMetaResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetBucketMetaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetBucketMetaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetBucketMetaResponse proto.InternalMessageInfo

func (m *GfSpGetBucketMetaResponse) GetBucket() *VGFInfoBucket {
	if m != nil {
		return m.Bucket
	}
	return nil
}

func (m *GfSpGetBucketMetaResponse) GetStreamRecord() *types2.StreamRecord {
	if m != nil {
		return m.StreamRecord
	}
	return nil
}

// GfSpGetEndpointBySpIDRequest is request type for the GfSpGetEndpointBySpID RPC method
type GfSpGetEndpointBySpIDRequest struct {
	// sp_id is the id of the sp
	SpId uint32 `protobuf:"varint,1,opt,name=sp_id,json=spId,proto3" json:"sp_id,omitempty"`
}

func (m *GfSpGetEndpointBySpIDRequest) Reset()         { *m = GfSpGetEndpointBySpIDRequest{} }
func (m *GfSpGetEndpointBySpIDRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpGetEndpointBySpIDRequest) ProtoMessage()    {}
func (*GfSpGetEndpointBySpIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{28}
}
func (m *GfSpGetEndpointBySpIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetEndpointBySpIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetEndpointBySpIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetEndpointBySpIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetEndpointBySpIDRequest.Merge(m, src)
}
func (m *GfSpGetEndpointBySpIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetEndpointBySpIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetEndpointBySpIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetEndpointBySpIDRequest proto.InternalMessageInfo

func (m *GfSpGetEndpointBySpIDRequest) GetSpId() uint32 {
	if m != nil {
		return m.SpId
	}
	return 0
}

// GfSpGetEndpointBySpIDResponse is response type for the GfSpGetEndpointBySpID RPC method.
type GfSpGetEndpointBySpIDResponse struct {
	// endpoint defines endpoint of a sp
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (m *GfSpGetEndpointBySpIDResponse) Reset()         { *m = GfSpGetEndpointBySpIDResponse{} }
func (m *GfSpGetEndpointBySpIDResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpGetEndpointBySpIDResponse) ProtoMessage()    {}
func (*GfSpGetEndpointBySpIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{29}
}
func (m *GfSpGetEndpointBySpIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetEndpointBySpIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetEndpointBySpIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetEndpointBySpIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetEndpointBySpIDResponse.Merge(m, src)
}
func (m *GfSpGetEndpointBySpIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetEndpointBySpIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetEndpointBySpIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetEndpointBySpIDResponse proto.InternalMessageInfo

func (m *GfSpGetEndpointBySpIDResponse) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

// GfSpGetBucketReadQuotaRequest is request type for the GfSpGetBucketReadQuota RPC method.
type GfSpGetBucketReadQuotaRequest struct {
	// bucket info from the greenfield chain
	BucketInfo *types.BucketInfo `protobuf:"bytes,1,opt,name=bucket_info,json=bucketInfo,proto3" json:"bucket_info,omitempty"`
	// year_month is the query bucket quota's month, like "2023-03"
	YearMonth string `protobuf:"bytes,2,opt,name=year_month,json=yearMonth,proto3" json:"year_month,omitempty"`
}

func (m *GfSpGetBucketReadQuotaRequest) Reset()         { *m = GfSpGetBucketReadQuotaRequest{} }
func (m *GfSpGetBucketReadQuotaRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpGetBucketReadQuotaRequest) ProtoMessage()    {}
func (*GfSpGetBucketReadQuotaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{30}
}
func (m *GfSpGetBucketReadQuotaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetBucketReadQuotaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetBucketReadQuotaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetBucketReadQuotaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetBucketReadQuotaRequest.Merge(m, src)
}
func (m *GfSpGetBucketReadQuotaRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetBucketReadQuotaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetBucketReadQuotaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetBucketReadQuotaRequest proto.InternalMessageInfo

func (m *GfSpGetBucketReadQuotaRequest) GetBucketInfo() *types.BucketInfo {
	if m != nil {
		return m.BucketInfo
	}
	return nil
}

func (m *GfSpGetBucketReadQuotaRequest) GetYearMonth() string {
	if m != nil {
		return m.YearMonth
	}
	return ""
}

// GfSpGetBucketReadQuotaResponse is response type for the GfSpGetBucketReadQuota RPC method.
type GfSpGetBucketReadQuotaResponse struct {
	Err *gfsperrors.GfSpError `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	// charged_quota_size is the greenfield chain bucket info's read quota size
	ChargedQuotaSize uint64 `protobuf:"varint,2,opt,name=charged_quota_size,json=chargedQuotaSize,proto3" json:"charged_quota_size,omitempty"`
	// sp_free_quota_size is the sp default free quota
	SpFreeQuotaSize uint64 `protobuf:"varint,3,opt,name=sp_free_quota_size,json=spFreeQuotaSize,proto3" json:"sp_free_quota_size,omitempty"`
	// consumed_size is currently consumed size
	ConsumedSize uint64 `protobuf:"varint,4,opt,name=consumed_size,json=consumedSize,proto3" json:"consumed_size,omitempty"`
	// free_quota_consume_siz is currently consumed size
	FreeQuotaConsumeSize uint64 `protobuf:"varint,5,opt,name=free_quota_consume_size,json=freeQuotaConsumeSize,proto3" json:"free_quota_consume_size,omitempty"`
}

func (m *GfSpGetBucketReadQuotaResponse) Reset()         { *m = GfSpGetBucketReadQuotaResponse{} }
func (m *GfSpGetBucketReadQuotaResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpGetBucketReadQuotaResponse) ProtoMessage()    {}
func (*GfSpGetBucketReadQuotaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{31}
}
func (m *GfSpGetBucketReadQuotaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetBucketReadQuotaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetBucketReadQuotaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetBucketReadQuotaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetBucketReadQuotaResponse.Merge(m, src)
}
func (m *GfSpGetBucketReadQuotaResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetBucketReadQuotaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetBucketReadQuotaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetBucketReadQuotaResponse proto.InternalMessageInfo

func (m *GfSpGetBucketReadQuotaResponse) GetErr() *gfsperrors.GfSpError {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GfSpGetBucketReadQuotaResponse) GetChargedQuotaSize() uint64 {
	if m != nil {
		return m.ChargedQuotaSize
	}
	return 0
}

func (m *GfSpGetBucketReadQuotaResponse) GetSpFreeQuotaSize() uint64 {
	if m != nil {
		return m.SpFreeQuotaSize
	}
	return 0
}

func (m *GfSpGetBucketReadQuotaResponse) GetConsumedSize() uint64 {
	if m != nil {
		return m.ConsumedSize
	}
	return 0
}

func (m *GfSpGetBucketReadQuotaResponse) GetFreeQuotaConsumeSize() uint64 {
	if m != nil {
		return m.FreeQuotaConsumeSize
	}
	return 0
}

// GfSpGetLatestBucketReadQuotaRequest is request type for the GfSpGetLatestBucketReadQuota RPC method.
type GfSpGetLatestBucketReadQuotaRequest struct {
	// bucket id from the greenfield chain
	BucketId uint64 `protobuf:"varint,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
}

func (m *GfSpGetLatestBucketReadQuotaRequest) Reset()         { *m = GfSpGetLatestBucketReadQuotaRequest{} }
func (m *GfSpGetLatestBucketReadQuotaRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpGetLatestBucketReadQuotaRequest) ProtoMessage()    {}
func (*GfSpGetLatestBucketReadQuotaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{32}
}
func (m *GfSpGetLatestBucketReadQuotaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetLatestBucketReadQuotaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetLatestBucketReadQuotaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetLatestBucketReadQuotaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetLatestBucketReadQuotaRequest.Merge(m, src)
}
func (m *GfSpGetLatestBucketReadQuotaRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetLatestBucketReadQuotaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetLatestBucketReadQuotaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetLatestBucketReadQuotaRequest proto.InternalMessageInfo

func (m *GfSpGetLatestBucketReadQuotaRequest) GetBucketId() uint64 {
	if m != nil {
		return m.BucketId
	}
	return 0
}

// GfSpGetLatestBucketReadQuotaResponse is response type for the GfSpGetLatestBucketReadQuota RPC method.
type GfSpGetLatestBucketReadQuotaResponse struct {
	Err   *gfsperrors.GfSpError         `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Quota *gfsptask.GfSpBucketQuotaInfo `protobuf:"bytes,2,opt,name=quota,proto3" json:"quota,omitempty"`
}

func (m *GfSpGetLatestBucketReadQuotaResponse) Reset()         { *m = GfSpGetLatestBucketReadQuotaResponse{} }
func (m *GfSpGetLatestBucketReadQuotaResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpGetLatestBucketReadQuotaResponse) ProtoMessage()    {}
func (*GfSpGetLatestBucketReadQuotaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{33}
}
func (m *GfSpGetLatestBucketReadQuotaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetLatestBucketReadQuotaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetLatestBucketReadQuotaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetLatestBucketReadQuotaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetLatestBucketReadQuotaResponse.Merge(m, src)
}
func (m *GfSpGetLatestBucketReadQuotaResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetLatestBucketReadQuotaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetLatestBucketReadQuotaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetLatestBucketReadQuotaResponse proto.InternalMessageInfo

func (m *GfSpGetLatestBucketReadQuotaResponse) GetErr() *gfsperrors.GfSpError {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GfSpGetLatestBucketReadQuotaResponse) GetQuota() *gfsptask.GfSpBucketQuotaInfo {
	if m != nil {
		return m.Quota
	}
	return nil
}

// ListBucketReadRecordRequest is request type for the ListBucketReadRecord RPC method.
type GfSpListBucketReadRecordRequest struct {
	// bucket info from the greenfield chain
	BucketInfo *types.BucketInfo `protobuf:"bytes,1,opt,name=bucket_info,json=bucketInfo,proto3" json:"bucket_info,omitempty"`
	// start_timestamp_us is the list request's left side, like [start_timestamp_us, end_timestamp_us)
	StartTimestampUs int64 `protobuf:"varint,2,opt,name=start_timestamp_us,json=startTimestampUs,proto3" json:"start_timestamp_us,omitempty"`
	// start_timestamp_us is the list request's right side, like [start_timestamp_us, end_timestamp_us)
	EndTimestampUs int64 `protobuf:"varint,3,opt,name=end_timestamp_us,json=endTimestampUs,proto3" json:"end_timestamp_us,omitempty"`
	// max_record_num is used to limit max list records
	MaxRecordNum int64 `protobuf:"varint,4,opt,name=max_record_num,json=maxRecordNum,proto3" json:"max_record_num,omitempty"`
}

func (m *GfSpListBucketReadRecordRequest) Reset()         { *m = GfSpListBucketReadRecordRequest{} }
func (m *GfSpListBucketReadRecordRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpListBucketReadRecordRequest) ProtoMessage()    {}
func (*GfSpListBucketReadRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{34}
}
func (m *GfSpListBucketReadRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListBucketReadRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListBucketReadRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListBucketReadRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListBucketReadRecordRequest.Merge(m, src)
}
func (m *GfSpListBucketReadRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListBucketReadRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListBucketReadRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListBucketReadRecordRequest proto.InternalMessageInfo

func (m *GfSpListBucketReadRecordRequest) GetBucketInfo() *types.BucketInfo {
	if m != nil {
		return m.BucketInfo
	}
	return nil
}

func (m *GfSpListBucketReadRecordRequest) GetStartTimestampUs() int64 {
	if m != nil {
		return m.StartTimestampUs
	}
	return 0
}

func (m *GfSpListBucketReadRecordRequest) GetEndTimestampUs() int64 {
	if m != nil {
		return m.EndTimestampUs
	}
	return 0
}

func (m *GfSpListBucketReadRecordRequest) GetMaxRecordNum() int64 {
	if m != nil {
		return m.MaxRecordNum
	}
	return 0
}

// ReadRecord is used to record the read request.
type ReadRecord struct {
	// object_name is the read object name
	ObjectName string `protobuf:"bytes,1,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	// object_id is the read object id
	ObjectId uint64 `protobuf:"varint,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// account_address is the read account address
	AccountAddress string `protobuf:"bytes,3,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	// timestamp_us is the read time stamp
	TimestampUs int64 `protobuf:"varint,4,opt,name=timestamp_us,json=timestampUs,proto3" json:"timestamp_us,omitempty"`
	// read_size is the read object size
	ReadSize uint64 `protobuf:"varint,5,opt,name=read_size,json=readSize,proto3" json:"read_size,omitempty"`
}

func (m *ReadRecord) Reset()         { *m = ReadRecord{} }
func (m *ReadRecord) String() string { return proto.CompactTextString(m) }
func (*ReadRecord) ProtoMessage()    {}
func (*ReadRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{35}
}
func (m *ReadRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadRecord.Merge(m, src)
}
func (m *ReadRecord) XXX_Size() int {
	return m.Size()
}
func (m *ReadRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ReadRecord proto.InternalMessageInfo

func (m *ReadRecord) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

func (m *ReadRecord) GetObjectId() uint64 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *ReadRecord) GetAccountAddress() string {
	if m != nil {
		return m.AccountAddress
	}
	return ""
}

func (m *ReadRecord) GetTimestampUs() int64 {
	if m != nil {
		return m.TimestampUs
	}
	return 0
}

func (m *ReadRecord) GetReadSize() uint64 {
	if m != nil {
		return m.ReadSize
	}
	return 0
}

// ListBucketReadRecordResponse is response type for the ListBucketReadRecord RPC method.
type GfSpListBucketReadRecordResponse struct {
	Err *gfsperrors.GfSpError `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	// read_records are the read record list
	ReadRecords []*ReadRecord `protobuf:"bytes,2,rep,name=read_records,json=readRecords,proto3" json:"read_records,omitempty"`
	// next_start_timestamp_us is used to fetch next batch, When the list is completed, it is 0.
	NextStartTimestampUs int64 `protobuf:"varint,3,opt,name=next_start_timestamp_us,json=nextStartTimestampUs,proto3" json:"next_start_timestamp_us,omitempty"`
}

func (m *GfSpListBucketReadRecordResponse) Reset()         { *m = GfSpListBucketReadRecordResponse{} }
func (m *GfSpListBucketReadRecordResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpListBucketReadRecordResponse) ProtoMessage()    {}
func (*GfSpListBucketReadRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{36}
}
func (m *GfSpListBucketReadRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListBucketReadRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListBucketReadRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListBucketReadRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListBucketReadRecordResponse.Merge(m, src)
}
func (m *GfSpListBucketReadRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListBucketReadRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListBucketReadRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListBucketReadRecordResponse proto.InternalMessageInfo

func (m *GfSpListBucketReadRecordResponse) GetErr() *gfsperrors.GfSpError {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GfSpListBucketReadRecordResponse) GetReadRecords() []*ReadRecord {
	if m != nil {
		return m.ReadRecords
	}
	return nil
}

func (m *GfSpListBucketReadRecordResponse) GetNextStartTimestampUs() int64 {
	if m != nil {
		return m.NextStartTimestampUs
	}
	return 0
}

// QueryUploadProgressRequest is request type for the QueryObjectPutState RPC method.
type GfSpQueryUploadProgressRequest struct {
	// object_id defines the unique id of the object.
	ObjectId uint64 `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (m *GfSpQueryUploadProgressRequest) Reset()         { *m = GfSpQueryUploadProgressRequest{} }
func (m *GfSpQueryUploadProgressRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpQueryUploadProgressRequest) ProtoMessage()    {}
func (*GfSpQueryUploadProgressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{37}
}
func (m *GfSpQueryUploadProgressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpQueryUploadProgressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpQueryUploadProgressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpQueryUploadProgressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpQueryUploadProgressRequest.Merge(m, src)
}
func (m *GfSpQueryUploadProgressRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpQueryUploadProgressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpQueryUploadProgressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpQueryUploadProgressRequest proto.InternalMessageInfo

func (m *GfSpQueryUploadProgressRequest) GetObjectId() uint64 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

// QueryUploadProgressResponse is response type for the QueryObjectPutState RPC method.
type GfSpQueryUploadProgressResponse struct {
	Err *gfsperrors.GfSpError `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	// state defines the state of put object.
	State          types3.TaskState `protobuf:"varint,2,opt,name=state,proto3,enum=store.types.TaskState" json:"state,omitempty"`
	ErrDescription string           `protobuf:"bytes,3,opt,name=err_description,json=errDescription,proto3" json:"err_description,omitempty"`
}

func (m *GfSpQueryUploadProgressResponse) Reset()         { *m = GfSpQueryUploadProgressResponse{} }
func (m *GfSpQueryUploadProgressResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpQueryUploadProgressResponse) ProtoMessage()    {}
func (*GfSpQueryUploadProgressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{38}
}
func (m *GfSpQueryUploadProgressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpQueryUploadProgressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpQueryUploadProgressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpQueryUploadProgressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpQueryUploadProgressResponse.Merge(m, src)
}
func (m *GfSpQueryUploadProgressResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpQueryUploadProgressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpQueryUploadProgressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpQueryUploadProgressResponse proto.InternalMessageInfo

func (m *GfSpQueryUploadProgressResponse) GetErr() *gfsperrors.GfSpError {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GfSpQueryUploadProgressResponse) GetState() types3.TaskState {
	if m != nil {
		return m.State
	}
	return types3.TaskState_TASK_STATE_INIT_UNSPECIFIED
}

func (m *GfSpQueryUploadProgressResponse) GetErrDescription() string {
	if m != nil {
		return m.ErrDescription
	}
	return ""
}

// GfSpQueryResumableUploadSegmentRequest is request type for the QueryObjectPutState RPC method.
type GfSpQueryResumableUploadSegmentRequest struct {
	// object_id defines the unique id of the object.
	ObjectId uint64 `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (m *GfSpQueryResumableUploadSegmentRequest) Reset() {
	*m = GfSpQueryResumableUploadSegmentRequest{}
}
func (m *GfSpQueryResumableUploadSegmentRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpQueryResumableUploadSegmentRequest) ProtoMessage()    {}
func (*GfSpQueryResumableUploadSegmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{39}
}
func (m *GfSpQueryResumableUploadSegmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpQueryResumableUploadSegmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpQueryResumableUploadSegmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpQueryResumableUploadSegmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpQueryResumableUploadSegmentRequest.Merge(m, src)
}
func (m *GfSpQueryResumableUploadSegmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpQueryResumableUploadSegmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpQueryResumableUploadSegmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpQueryResumableUploadSegmentRequest proto.InternalMessageInfo

func (m *GfSpQueryResumableUploadSegmentRequest) GetObjectId() uint64 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

// GfSpQueryResumableUploadSegmentResponse is response type for the QueryObjectPutState RPC method.
type GfSpQueryResumableUploadSegmentResponse struct {
	Err *gfsperrors.GfSpError `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	// state defines the number of segment count.
	SegmentCount uint32 `protobuf:"varint,2,opt,name=segment_count,json=segmentCount,proto3" json:"segment_count,omitempty"`
}

func (m *GfSpQueryResumableUploadSegmentResponse) Reset() {
	*m = GfSpQueryResumableUploadSegmentResponse{}
}
func (m *GfSpQueryResumableUploadSegmentResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpQueryResumableUploadSegmentResponse) ProtoMessage()    {}
func (*GfSpQueryResumableUploadSegmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{40}
}
func (m *GfSpQueryResumableUploadSegmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpQueryResumableUploadSegmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpQueryResumableUploadSegmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpQueryResumableUploadSegmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpQueryResumableUploadSegmentResponse.Merge(m, src)
}
func (m *GfSpQueryResumableUploadSegmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpQueryResumableUploadSegmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpQueryResumableUploadSegmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpQueryResumableUploadSegmentResponse proto.InternalMessageInfo

func (m *GfSpQueryResumableUploadSegmentResponse) GetErr() *gfsperrors.GfSpError {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GfSpQueryResumableUploadSegmentResponse) GetSegmentCount() uint32 {
	if m != nil {
		return m.SegmentCount
	}
	return 0
}

// Group is the structure for group information
type Group struct {
	// group defines the basic group info
	Group *types.GroupInfo `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	// operator defines operator address of group
	Operator string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	// create_at defines the block number when the group created
	CreateAt int64 `protobuf:"varint,3,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	// create_time defines the timestamp when the group created
	CreateTime int64 `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// update_at defines the block number when the group updated
	UpdateAt int64 `protobuf:"varint,5,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	// update_time defines the timestamp when the group updated
	UpdateTime int64 `protobuf:"varint,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// number_of_members defines how many members in this group
	NumberOfMembers int64 `protobuf:"varint,7,opt,name=number_of_members,json=numberOfMembers,proto3" json:"number_of_members,omitempty"`
	// removed defines the group is deleted or not
	Removed bool `protobuf:"varint,8,opt,name=removed,proto3" json:"removed,omitempty"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{41}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Group.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return m.Size()
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetGroup() *types.GroupInfo {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *Group) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *Group) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *Group) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Group) GetUpdateAt() int64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func (m *Group) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *Group) GetNumberOfMembers() int64 {
	if m != nil {
		return m.NumberOfMembers
	}
	return 0
}

func (m *Group) GetRemoved() bool {
	if m != nil {
		return m.Removed
	}
	return false
}

// GroupMember is the structure for group-account information
type GroupMember struct {
	// group defines the basic group info
	Group     *types.GroupInfo `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	AccountId string           `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// operator defines operator address of group
	Operator string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	// create_at defines the block number when the group created
	CreateAt int64 `protobuf:"varint,4,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	// create_time defines the timestamp when the group created
	CreateTime int64 `protobuf:"varint,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// update_at defines the block number when the group updated
	UpdateAt int64 `protobuf:"varint,6,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	// update_time defines the timestamp when the group updated
	UpdateTime int64 `protobuf:"varint,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// removed defines the group is deleted or not
	Removed bool `protobuf:"varint,8,opt,name=removed,proto3" json:"removed,omitempty"`
	// expiration_time is the user expiration time for this group
	ExpirationTime int64 `protobuf:"varint,9,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
}

func (m *GroupMember) Reset()         { *m = GroupMember{} }
func (m *GroupMember) String() string { return proto.CompactTextString(m) }
func (*GroupMember) ProtoMessage()    {}
func (*GroupMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{42}
}
func (m *GroupMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMember.Merge(m, src)
}
func (m *GroupMember) XXX_Size() int {
	return m.Size()
}
func (m *GroupMember) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMember.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMember proto.InternalMessageInfo

func (m *GroupMember) GetGroup() *types.GroupInfo {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *GroupMember) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *GroupMember) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *GroupMember) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *GroupMember) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *GroupMember) GetUpdateAt() int64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func (m *GroupMember) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *GroupMember) GetRemoved() bool {
	if m != nil {
		return m.Removed
	}
	return false
}

func (m *GroupMember) GetExpirationTime() int64 {
	if m != nil {
		return m.ExpirationTime
	}
	return 0
}

// GfSpGetGroupListRequest is request type for the GetGroupList RPC method.
type GfSpGetGroupListRequest struct {
	// name defines the query group name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// prefix defines the prefix of the group name
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// source_type defines which chain the user should send the bucket management transactions to
	SourceType string `protobuf:"bytes,3,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	// limit defines the maximum number of results that should be returned in response
	Limit int64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// offset defines the position in the list from where to start returning results
	Offset int64 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	// include_removed indicates whether this request can get the removed groups information
	IncludeRemoved bool `protobuf:"varint,6,opt,name=include_removed,json=includeRemoved,proto3" json:"include_removed,omitempty"`
}

func (m *GfSpGetGroupListRequest) Reset()         { *m = GfSpGetGroupListRequest{} }
func (m *GfSpGetGroupListRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpGetGroupListRequest) ProtoMessage()    {}
func (*GfSpGetGroupListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{43}
}
func (m *GfSpGetGroupListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetGroupListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetGroupListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetGroupListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetGroupListRequest.Merge(m, src)
}
func (m *GfSpGetGroupListRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetGroupListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetGroupListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetGroupListRequest proto.InternalMessageInfo

func (m *GfSpGetGroupListRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GfSpGetGroupListRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *GfSpGetGroupListRequest) GetSourceType() string {
	if m != nil {
		return m.SourceType
	}
	return ""
}

func (m *GfSpGetGroupListRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GfSpGetGroupListRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GfSpGetGroupListRequest) GetIncludeRemoved() bool {
	if m != nil {
		return m.IncludeRemoved
	}
	return false
}

// GfSpGetGroupListResponse is response type for the GetGroupList RPC method.
type GfSpGetGroupListResponse struct {
	// groups defines the response of group list
	Groups []*Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	// count defines total groups amount
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *GfSpGetGroupListResponse) Reset()         { *m = GfSpGetGroupListResponse{} }
func (m *GfSpGetGroupListResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpGetGroupListResponse) ProtoMessage()    {}
func (*GfSpGetGroupListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{44}
}
func (m *GfSpGetGroupListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetGroupListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetGroupListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetGroupListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetGroupListResponse.Merge(m, src)
}
func (m *GfSpGetGroupListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetGroupListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetGroupListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetGroupListResponse proto.InternalMessageInfo

func (m *GfSpGetGroupListResponse) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *GfSpGetGroupListResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// GfSpGetBucketByIDsRequest is request type for the GfSpListBucketsByIDs RPC method
type GfSpListBucketsByIDsRequest struct {
	// bucket_id is the list of unique identifier for buckets
	BucketIds []uint64 `protobuf:"varint,1,rep,packed,name=bucket_ids,json=bucketIds,proto3" json:"bucket_ids,omitempty"`
	// include_removed indicates whether this request can get the removed buckets information
	IncludeRemoved bool `protobuf:"varint,2,opt,name=include_removed,json=includeRemoved,proto3" json:"include_removed,omitempty"`
}

func (m *GfSpListBucketsByIDsRequest) Reset()         { *m = GfSpListBucketsByIDsRequest{} }
func (m *GfSpListBucketsByIDsRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpListBucketsByIDsRequest) ProtoMessage()    {}
func (*GfSpListBucketsByIDsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{45}
}
func (m *GfSpListBucketsByIDsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListBucketsByIDsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListBucketsByIDsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListBucketsByIDsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListBucketsByIDsRequest.Merge(m, src)
}
func (m *GfSpListBucketsByIDsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListBucketsByIDsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListBucketsByIDsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListBucketsByIDsRequest proto.InternalMessageInfo

func (m *GfSpListBucketsByIDsRequest) GetBucketIds() []uint64 {
	if m != nil {
		return m.BucketIds
	}
	return nil
}

func (m *GfSpListBucketsByIDsRequest) GetIncludeRemoved() bool {
	if m != nil {
		return m.IncludeRemoved
	}
	return false
}

// GfSpGetBucketByIDsResponse is response type for the GfSpListBucketsByIDs RPC method.
type GfSpListBucketsByIDsResponse struct {
	// buckets defines the information of a bucket map
	Buckets map[uint64]*Bucket `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GfSpListBucketsByIDsResponse) Reset()         { *m = GfSpListBucketsByIDsResponse{} }
func (m *GfSpListBucketsByIDsResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpListBucketsByIDsResponse) ProtoMessage()    {}
func (*GfSpListBucketsByIDsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{46}
}
func (m *GfSpListBucketsByIDsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListBucketsByIDsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListBucketsByIDsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListBucketsByIDsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListBucketsByIDsResponse.Merge(m, src)
}
func (m *GfSpListBucketsByIDsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListBucketsByIDsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListBucketsByIDsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListBucketsByIDsResponse proto.InternalMessageInfo

func (m *GfSpListBucketsByIDsResponse) GetBuckets() map[uint64]*Bucket {
	if m != nil {
		return m.Buckets
	}
	return nil
}

// GfSpListObjectsByIDsRequest is request type for the GfSpListObjectsByIDs RPC method
type GfSpListObjectsByIDsRequest struct {
	// object_ids is the list of unique identifier for objects
	ObjectIds []uint64 `protobuf:"varint,1,rep,packed,name=object_ids,json=objectIds,proto3" json:"object_ids,omitempty"`
	// include_removed indicates whether this request can get the removed objects information
	IncludeRemoved bool `protobuf:"varint,2,opt,name=include_removed,json=includeRemoved,proto3" json:"include_removed,omitempty"`
}

func (m *GfSpListObjectsByIDsRequest) Reset()         { *m = GfSpListObjectsByIDsRequest{} }
func (m *GfSpListObjectsByIDsRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpListObjectsByIDsRequest) ProtoMessage()    {}
func (*GfSpListObjectsByIDsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{47}
}
func (m *GfSpListObjectsByIDsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListObjectsByIDsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListObjectsByIDsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListObjectsByIDsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListObjectsByIDsRequest.Merge(m, src)
}
func (m *GfSpListObjectsByIDsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListObjectsByIDsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListObjectsByIDsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListObjectsByIDsRequest proto.InternalMessageInfo

func (m *GfSpListObjectsByIDsRequest) GetObjectIds() []uint64 {
	if m != nil {
		return m.ObjectIds
	}
	return nil
}

func (m *GfSpListObjectsByIDsRequest) GetIncludeRemoved() bool {
	if m != nil {
		return m.IncludeRemoved
	}
	return false
}

// GfSpListObjectsByIDsRequest is response type for the GfSpListObjectsByIDs RPC method.
type GfSpListObjectsByIDsResponse struct {
	// objects defines the information of a object map
	Objects map[uint64]*Object `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GfSpListObjectsByIDsResponse) Reset()         { *m = GfSpListObjectsByIDsResponse{} }
func (m *GfSpListObjectsByIDsResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpListObjectsByIDsResponse) ProtoMessage()    {}
func (*GfSpListObjectsByIDsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{48}
}
func (m *GfSpListObjectsByIDsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListObjectsByIDsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListObjectsByIDsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListObjectsByIDsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListObjectsByIDsResponse.Merge(m, src)
}
func (m *GfSpListObjectsByIDsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListObjectsByIDsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListObjectsByIDsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListObjectsByIDsResponse proto.InternalMessageInfo

func (m *GfSpListObjectsByIDsResponse) GetObjects() map[uint64]*Object {
	if m != nil {
		return m.Objects
	}
	return nil
}

// GfSpVerifyPermissionByIDRequest is request type for the GfSpVerifyPermissionByID RPC method
type GfSpVerifyPermissionByIDRequest struct {
	// operator defines the account address of operator
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// source_type defines the source of resource creation
	ResourceType resource.ResourceType `protobuf:"varint,2,opt,name=resource_type,json=resourceType,proto3,enum=greenfield.resource.ResourceType" json:"resource_type,omitempty"`
	// resource_id defines the id of source
	ResourceId uint64 `protobuf:"varint,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// action_type defines the requested action type of permission
	ActionType types4.ActionType `protobuf:"varint,4,opt,name=action_type,json=actionType,proto3,enum=greenfield.permission.ActionType" json:"action_type,omitempty"`
}

func (m *GfSpVerifyPermissionByIDRequest) Reset()         { *m = GfSpVerifyPermissionByIDRequest{} }
func (m *GfSpVerifyPermissionByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpVerifyPermissionByIDRequest) ProtoMessage()    {}
func (*GfSpVerifyPermissionByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{49}
}
func (m *GfSpVerifyPermissionByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpVerifyPermissionByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpVerifyPermissionByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpVerifyPermissionByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpVerifyPermissionByIDRequest.Merge(m, src)
}
func (m *GfSpVerifyPermissionByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpVerifyPermissionByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpVerifyPermissionByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpVerifyPermissionByIDRequest proto.InternalMessageInfo

func (m *GfSpVerifyPermissionByIDRequest) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *GfSpVerifyPermissionByIDRequest) GetResourceType() resource.ResourceType {
	if m != nil {
		return m.ResourceType
	}
	return resource.RESOURCE_TYPE_UNSPECIFIED
}

func (m *GfSpVerifyPermissionByIDRequest) GetResourceId() uint64 {
	if m != nil {
		return m.ResourceId
	}
	return 0
}

func (m *GfSpVerifyPermissionByIDRequest) GetActionType() types4.ActionType {
	if m != nil {
		return m.ActionType
	}
	return types4.ACTION_UNSPECIFIED
}

// GfSpVerifyPermissionByIDResponse is response type for the GfSpVerifyPermissionByID RPC method
type GfSpVerifyPermissionByIDResponse struct {
	// effect define the effect of the operation permission, include Allow or deny
	Effect types4.Effect `protobuf:"varint,1,opt,name=effect,proto3,enum=greenfield.permission.Effect" json:"effect,omitempty"`
}

func (m *GfSpVerifyPermissionByIDResponse) Reset()         { *m = GfSpVerifyPermissionByIDResponse{} }
func (m *GfSpVerifyPermissionByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpVerifyPermissionByIDResponse) ProtoMessage()    {}
func (*GfSpVerifyPermissionByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{50}
}
func (m *GfSpVerifyPermissionByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpVerifyPermissionByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpVerifyPermissionByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpVerifyPermissionByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpVerifyPermissionByIDResponse.Merge(m, src)
}
func (m *GfSpVerifyPermissionByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpVerifyPermissionByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpVerifyPermissionByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpVerifyPermissionByIDResponse proto.InternalMessageInfo

func (m *GfSpVerifyPermissionByIDResponse) GetEffect() types4.Effect {
	if m != nil {
		return m.Effect
	}
	return types4.EFFECT_UNSPECIFIED
}

// GfSpListVirtualGroupFamiliesBySpIDRequest is request type for the GfSpListVirtualGroupFamilies RPC method
type GfSpListVirtualGroupFamiliesBySpIDRequest struct {
	// sp_id is the unique identification for sp
	SpId uint32 `protobuf:"varint,1,opt,name=sp_id,json=spId,proto3" json:"sp_id,omitempty"`
}

func (m *GfSpListVirtualGroupFamiliesBySpIDRequest) Reset() {
	*m = GfSpListVirtualGroupFamiliesBySpIDRequest{}
}
func (m *GfSpListVirtualGroupFamiliesBySpIDRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GfSpListVirtualGroupFamiliesBySpIDRequest) ProtoMessage() {}
func (*GfSpListVirtualGroupFamiliesBySpIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{51}
}
func (m *GfSpListVirtualGroupFamiliesBySpIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListVirtualGroupFamiliesBySpIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListVirtualGroupFamiliesBySpIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListVirtualGroupFamiliesBySpIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListVirtualGroupFamiliesBySpIDRequest.Merge(m, src)
}
func (m *GfSpListVirtualGroupFamiliesBySpIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListVirtualGroupFamiliesBySpIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListVirtualGroupFamiliesBySpIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListVirtualGroupFamiliesBySpIDRequest proto.InternalMessageInfo

func (m *GfSpListVirtualGroupFamiliesBySpIDRequest) GetSpId() uint32 {
	if m != nil {
		return m.SpId
	}
	return 0
}

// GfSpListVirtualGroupFamiliesBySpIDResponse is response type for the GfSpListVirtualGroupFamilies RPC method
type GfSpListVirtualGroupFamiliesBySpIDResponse struct {
	// global_virtual_group_families is a list of global virtual group families
	GlobalVirtualGroupFamilies []*types1.GlobalVirtualGroupFamily `protobuf:"bytes,1,rep,name=global_virtual_group_families,json=globalVirtualGroupFamilies,proto3" json:"global_virtual_group_families,omitempty"`
}

func (m *GfSpListVirtualGroupFamiliesBySpIDResponse) Reset() {
	*m = GfSpListVirtualGroupFamiliesBySpIDResponse{}
}
func (m *GfSpListVirtualGroupFamiliesBySpIDResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GfSpListVirtualGroupFamiliesBySpIDResponse) ProtoMessage() {}
func (*GfSpListVirtualGroupFamiliesBySpIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{52}
}
func (m *GfSpListVirtualGroupFamiliesBySpIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListVirtualGroupFamiliesBySpIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListVirtualGroupFamiliesBySpIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListVirtualGroupFamiliesBySpIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListVirtualGroupFamiliesBySpIDResponse.Merge(m, src)
}
func (m *GfSpListVirtualGroupFamiliesBySpIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListVirtualGroupFamiliesBySpIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListVirtualGroupFamiliesBySpIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListVirtualGroupFamiliesBySpIDResponse proto.InternalMessageInfo

func (m *GfSpListVirtualGroupFamiliesBySpIDResponse) GetGlobalVirtualGroupFamilies() []*types1.GlobalVirtualGroupFamily {
	if m != nil {
		return m.GlobalVirtualGroupFamilies
	}
	return nil
}

// GfSpGetGlobalVirtualGroupByGvgIDRequest is request type for the GfSpQueryGlobalVirtualGroup RPC method
type GfSpGetGlobalVirtualGroupByGvgIDRequest struct {
	// gvg_id is the unique identification for gvg
	GvgId uint32 `protobuf:"varint,1,opt,name=gvg_id,json=gvgId,proto3" json:"gvg_id,omitempty"`
}

func (m *GfSpGetGlobalVirtualGroupByGvgIDRequest) Reset() {
	*m = GfSpGetGlobalVirtualGroupByGvgIDRequest{}
}
func (m *GfSpGetGlobalVirtualGroupByGvgIDRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpGetGlobalVirtualGroupByGvgIDRequest) ProtoMessage()    {}
func (*GfSpGetGlobalVirtualGroupByGvgIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{53}
}
func (m *GfSpGetGlobalVirtualGroupByGvgIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetGlobalVirtualGroupByGvgIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetGlobalVirtualGroupByGvgIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetGlobalVirtualGroupByGvgIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetGlobalVirtualGroupByGvgIDRequest.Merge(m, src)
}
func (m *GfSpGetGlobalVirtualGroupByGvgIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetGlobalVirtualGroupByGvgIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetGlobalVirtualGroupByGvgIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetGlobalVirtualGroupByGvgIDRequest proto.InternalMessageInfo

func (m *GfSpGetGlobalVirtualGroupByGvgIDRequest) GetGvgId() uint32 {
	if m != nil {
		return m.GvgId
	}
	return 0
}

// GfSpGetGlobalVirtualGroupByGvgIDResponse is response type for the GfSpQueryGlobalVirtualGroup RPC method
type GfSpGetGlobalVirtualGroupByGvgIDResponse struct {
	// global_virtual_group defines a global virtual group consists of one primary SP (SP) and multiple secondary SP
	GlobalVirtualGroup *types1.GlobalVirtualGroup `protobuf:"bytes,1,opt,name=global_virtual_group,json=globalVirtualGroup,proto3" json:"global_virtual_group,omitempty"`
}

func (m *GfSpGetGlobalVirtualGroupByGvgIDResponse) Reset() {
	*m = GfSpGetGlobalVirtualGroupByGvgIDResponse{}
}
func (m *GfSpGetGlobalVirtualGroupByGvgIDResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpGetGlobalVirtualGroupByGvgIDResponse) ProtoMessage()    {}
func (*GfSpGetGlobalVirtualGroupByGvgIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{54}
}
func (m *GfSpGetGlobalVirtualGroupByGvgIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetGlobalVirtualGroupByGvgIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetGlobalVirtualGroupByGvgIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetGlobalVirtualGroupByGvgIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetGlobalVirtualGroupByGvgIDResponse.Merge(m, src)
}
func (m *GfSpGetGlobalVirtualGroupByGvgIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetGlobalVirtualGroupByGvgIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetGlobalVirtualGroupByGvgIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetGlobalVirtualGroupByGvgIDResponse proto.InternalMessageInfo

func (m *GfSpGetGlobalVirtualGroupByGvgIDResponse) GetGlobalVirtualGroup() *types1.GlobalVirtualGroup {
	if m != nil {
		return m.GlobalVirtualGroup
	}
	return nil
}

// GfSpGetVirtualGroupFamilyRequest is request type for the GfSpGetVirtualGroupFamily RPC method
type GfSpGetVirtualGroupFamilyRequest struct {
	// vgf_id is the unique identification for vgf
	VgfId uint32 `protobuf:"varint,1,opt,name=vgf_id,json=vgfId,proto3" json:"vgf_id,omitempty"`
}

func (m *GfSpGetVirtualGroupFamilyRequest) Reset()         { *m = GfSpGetVirtualGroupFamilyRequest{} }
func (m *GfSpGetVirtualGroupFamilyRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpGetVirtualGroupFamilyRequest) ProtoMessage()    {}
func (*GfSpGetVirtualGroupFamilyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{55}
}
func (m *GfSpGetVirtualGroupFamilyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetVirtualGroupFamilyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetVirtualGroupFamilyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetVirtualGroupFamilyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetVirtualGroupFamilyRequest.Merge(m, src)
}
func (m *GfSpGetVirtualGroupFamilyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetVirtualGroupFamilyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetVirtualGroupFamilyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetVirtualGroupFamilyRequest proto.InternalMessageInfo

func (m *GfSpGetVirtualGroupFamilyRequest) GetVgfId() uint32 {
	if m != nil {
		return m.VgfId
	}
	return 0
}

// GfSpGetVirtualGroupFamilyResponse is response type for the GfSpGetVirtualGroupFamily RPC method
type GfSpGetVirtualGroupFamilyResponse struct {
	// vgf defines the vgf info
	Vgf *types1.GlobalVirtualGroupFamily `protobuf:"bytes,1,opt,name=vgf,proto3" json:"vgf,omitempty"`
}

func (m *GfSpGetVirtualGroupFamilyResponse) Reset()         { *m = GfSpGetVirtualGroupFamilyResponse{} }
func (m *GfSpGetVirtualGroupFamilyResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpGetVirtualGroupFamilyResponse) ProtoMessage()    {}
func (*GfSpGetVirtualGroupFamilyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{56}
}
func (m *GfSpGetVirtualGroupFamilyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetVirtualGroupFamilyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetVirtualGroupFamilyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetVirtualGroupFamilyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetVirtualGroupFamilyResponse.Merge(m, src)
}
func (m *GfSpGetVirtualGroupFamilyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetVirtualGroupFamilyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetVirtualGroupFamilyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetVirtualGroupFamilyResponse proto.InternalMessageInfo

func (m *GfSpGetVirtualGroupFamilyResponse) GetVgf() *types1.GlobalVirtualGroupFamily {
	if m != nil {
		return m.Vgf
	}
	return nil
}

// GfSpGetGlobalVirtualGroupRequest is request type for the GfSpGetGlobalVirtualGroup RPC method
type GfSpGetGlobalVirtualGroupRequest struct {
	// bucket_id is the unique identification for bucket
	BucketId uint64 `protobuf:"varint,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	// lvg_id and bucket_id are the unique identification for lvg
	LvgId uint32 `protobuf:"varint,2,opt,name=lvg_id,json=lvgId,proto3" json:"lvg_id,omitempty"`
}

func (m *GfSpGetGlobalVirtualGroupRequest) Reset()         { *m = GfSpGetGlobalVirtualGroupRequest{} }
func (m *GfSpGetGlobalVirtualGroupRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpGetGlobalVirtualGroupRequest) ProtoMessage()    {}
func (*GfSpGetGlobalVirtualGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{57}
}
func (m *GfSpGetGlobalVirtualGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetGlobalVirtualGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetGlobalVirtualGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetGlobalVirtualGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetGlobalVirtualGroupRequest.Merge(m, src)
}
func (m *GfSpGetGlobalVirtualGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetGlobalVirtualGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetGlobalVirtualGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetGlobalVirtualGroupRequest proto.InternalMessageInfo

func (m *GfSpGetGlobalVirtualGroupRequest) GetBucketId() uint64 {
	if m != nil {
		return m.BucketId
	}
	return 0
}

func (m *GfSpGetGlobalVirtualGroupRequest) GetLvgId() uint32 {
	if m != nil {
		return m.LvgId
	}
	return 0
}

// GfSpGetGlobalVirtualGroupResponse is response type for the GfSpGetGlobalVirtualGroup RPC method
type GfSpGetGlobalVirtualGroupResponse struct {
	// gvg defines the gvg info
	Gvg *types1.GlobalVirtualGroup `protobuf:"bytes,1,opt,name=gvg,proto3" json:"gvg,omitempty"`
}

func (m *GfSpGetGlobalVirtualGroupResponse) Reset()         { *m = GfSpGetGlobalVirtualGroupResponse{} }
func (m *GfSpGetGlobalVirtualGroupResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpGetGlobalVirtualGroupResponse) ProtoMessage()    {}
func (*GfSpGetGlobalVirtualGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{58}
}
func (m *GfSpGetGlobalVirtualGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetGlobalVirtualGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetGlobalVirtualGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetGlobalVirtualGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetGlobalVirtualGroupResponse.Merge(m, src)
}
func (m *GfSpGetGlobalVirtualGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetGlobalVirtualGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetGlobalVirtualGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetGlobalVirtualGroupResponse proto.InternalMessageInfo

func (m *GfSpGetGlobalVirtualGroupResponse) GetGvg() *types1.GlobalVirtualGroup {
	if m != nil {
		return m.Gvg
	}
	return nil
}

// GfSpListObjectsInGVGRequest is request type for the GfSpListObjectsInGVG RPC method
type GfSpListObjectsInGVGRequest struct {
	// gvg_id is the unique identification for gvg
	GvgId uint32 `protobuf:"varint,1,opt,name=gvg_id,json=gvgId,proto3" json:"gvg_id,omitempty"`
	// start_after is where you want to start listing from
	StartAfter uint64 `protobuf:"varint,3,opt,name=start_after,json=startAfter,proto3" json:"start_after,omitempty"`
	// defines the number of results that should be returned in response, the maximum is 1000, default 50
	Limit uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *GfSpListObjectsInGVGRequest) Reset()         { *m = GfSpListObjectsInGVGRequest{} }
func (m *GfSpListObjectsInGVGRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpListObjectsInGVGRequest) ProtoMessage()    {}
func (*GfSpListObjectsInGVGRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{59}
}
func (m *GfSpListObjectsInGVGRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListObjectsInGVGRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListObjectsInGVGRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListObjectsInGVGRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListObjectsInGVGRequest.Merge(m, src)
}
func (m *GfSpListObjectsInGVGRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListObjectsInGVGRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListObjectsInGVGRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListObjectsInGVGRequest proto.InternalMessageInfo

func (m *GfSpListObjectsInGVGRequest) GetGvgId() uint32 {
	if m != nil {
		return m.GvgId
	}
	return 0
}

func (m *GfSpListObjectsInGVGRequest) GetStartAfter() uint64 {
	if m != nil {
		return m.StartAfter
	}
	return 0
}

func (m *GfSpListObjectsInGVGRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// GfSpListObjectsInGVGResponse is response type for the GfSpListObjectsInGVG RPC method
type GfSpListObjectsInGVGResponse struct {
	// object defines object related bucket and gvg info
	Objects []*ObjectDetails `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty"`
}

func (m *GfSpListObjectsInGVGResponse) Reset()         { *m = GfSpListObjectsInGVGResponse{} }
func (m *GfSpListObjectsInGVGResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpListObjectsInGVGResponse) ProtoMessage()    {}
func (*GfSpListObjectsInGVGResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{60}
}
func (m *GfSpListObjectsInGVGResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListObjectsInGVGResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListObjectsInGVGResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListObjectsInGVGResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListObjectsInGVGResponse.Merge(m, src)
}
func (m *GfSpListObjectsInGVGResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListObjectsInGVGResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListObjectsInGVGResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListObjectsInGVGResponse proto.InternalMessageInfo

func (m *GfSpListObjectsInGVGResponse) GetObjects() []*ObjectDetails {
	if m != nil {
		return m.Objects
	}
	return nil
}

// GfSpListObjectsInGVGAndBucketRequest is request type for the GfSpListObjectsInGVGAndBucket RPC method
type GfSpListObjectsInGVGAndBucketRequest struct {
	// gvg_id is the unique identification for gvg
	GvgId uint32 `protobuf:"varint,1,opt,name=gvg_id,json=gvgId,proto3" json:"gvg_id,omitempty"`
	// bucket_id is the unique identification for bucket
	BucketId uint64 `protobuf:"varint,2,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	// start_after is where you want to start listing from
	StartAfter uint64 `protobuf:"varint,3,opt,name=start_after,json=startAfter,proto3" json:"start_after,omitempty"`
	// defines the number of results that should be returned in response, the maximum is 1000, default 50
	Limit uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *GfSpListObjectsInGVGAndBucketRequest) Reset()         { *m = GfSpListObjectsInGVGAndBucketRequest{} }
func (m *GfSpListObjectsInGVGAndBucketRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpListObjectsInGVGAndBucketRequest) ProtoMessage()    {}
func (*GfSpListObjectsInGVGAndBucketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{61}
}
func (m *GfSpListObjectsInGVGAndBucketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListObjectsInGVGAndBucketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListObjectsInGVGAndBucketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListObjectsInGVGAndBucketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListObjectsInGVGAndBucketRequest.Merge(m, src)
}
func (m *GfSpListObjectsInGVGAndBucketRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListObjectsInGVGAndBucketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListObjectsInGVGAndBucketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListObjectsInGVGAndBucketRequest proto.InternalMessageInfo

func (m *GfSpListObjectsInGVGAndBucketRequest) GetGvgId() uint32 {
	if m != nil {
		return m.GvgId
	}
	return 0
}

func (m *GfSpListObjectsInGVGAndBucketRequest) GetBucketId() uint64 {
	if m != nil {
		return m.BucketId
	}
	return 0
}

func (m *GfSpListObjectsInGVGAndBucketRequest) GetStartAfter() uint64 {
	if m != nil {
		return m.StartAfter
	}
	return 0
}

func (m *GfSpListObjectsInGVGAndBucketRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// GfSpListObjectsInGVGAndBucketResponse is response type for the GfSpListObjectsInGVGAndBucket RPC method
type GfSpListObjectsInGVGAndBucketResponse struct {
	// object defines object related bucket and gvg info
	Objects []*ObjectDetails `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty"`
}

func (m *GfSpListObjectsInGVGAndBucketResponse) Reset()         { *m = GfSpListObjectsInGVGAndBucketResponse{} }
func (m *GfSpListObjectsInGVGAndBucketResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpListObjectsInGVGAndBucketResponse) ProtoMessage()    {}
func (*GfSpListObjectsInGVGAndBucketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{62}
}
func (m *GfSpListObjectsInGVGAndBucketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListObjectsInGVGAndBucketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListObjectsInGVGAndBucketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListObjectsInGVGAndBucketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListObjectsInGVGAndBucketResponse.Merge(m, src)
}
func (m *GfSpListObjectsInGVGAndBucketResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListObjectsInGVGAndBucketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListObjectsInGVGAndBucketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListObjectsInGVGAndBucketResponse proto.InternalMessageInfo

func (m *GfSpListObjectsInGVGAndBucketResponse) GetObjects() []*ObjectDetails {
	if m != nil {
		return m.Objects
	}
	return nil
}

// GfSpListObjectByGVGAndBucketForGCRequest is request type for the GfSpListObjectByGVGAndBucketForGC RPC method
type GfSpListObjectsByGVGAndBucketForGCRequest struct {
	// gvg_id is the unique identification for gvg
	GvgId uint32 `protobuf:"varint,1,opt,name=gvg_id,json=gvgId,proto3" json:"gvg_id,omitempty"`
	// bucket_id is the unique identification for bucket
	BucketId uint64 `protobuf:"varint,2,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	// start_after is where you want to start listing from
	StartAfter uint64 `protobuf:"varint,3,opt,name=start_after,json=startAfter,proto3" json:"start_after,omitempty"`
	// defines the number of results that should be returned in response, the maximum is 1000, default 50
	Limit uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *GfSpListObjectsByGVGAndBucketForGCRequest) Reset() {
	*m = GfSpListObjectsByGVGAndBucketForGCRequest{}
}
func (m *GfSpListObjectsByGVGAndBucketForGCRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GfSpListObjectsByGVGAndBucketForGCRequest) ProtoMessage() {}
func (*GfSpListObjectsByGVGAndBucketForGCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{63}
}
func (m *GfSpListObjectsByGVGAndBucketForGCRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListObjectsByGVGAndBucketForGCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListObjectsByGVGAndBucketForGCRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListObjectsByGVGAndBucketForGCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListObjectsByGVGAndBucketForGCRequest.Merge(m, src)
}
func (m *GfSpListObjectsByGVGAndBucketForGCRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListObjectsByGVGAndBucketForGCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListObjectsByGVGAndBucketForGCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListObjectsByGVGAndBucketForGCRequest proto.InternalMessageInfo

func (m *GfSpListObjectsByGVGAndBucketForGCRequest) GetGvgId() uint32 {
	if m != nil {
		return m.GvgId
	}
	return 0
}

func (m *GfSpListObjectsByGVGAndBucketForGCRequest) GetBucketId() uint64 {
	if m != nil {
		return m.BucketId
	}
	return 0
}

func (m *GfSpListObjectsByGVGAndBucketForGCRequest) GetStartAfter() uint64 {
	if m != nil {
		return m.StartAfter
	}
	return 0
}

func (m *GfSpListObjectsByGVGAndBucketForGCRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// GfSpListObjectByGVGAndBucketForGCResponse is response type for the GfSpListObjectByGVGAndBucketForGC RPC method
type GfSpListObjectsByGVGAndBucketForGCResponse struct {
	// object defines object related bucket and gvg info
	Objects []*ObjectDetails `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty"`
}

func (m *GfSpListObjectsByGVGAndBucketForGCResponse) Reset() {
	*m = GfSpListObjectsByGVGAndBucketForGCResponse{}
}
func (m *GfSpListObjectsByGVGAndBucketForGCResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GfSpListObjectsByGVGAndBucketForGCResponse) ProtoMessage() {}
func (*GfSpListObjectsByGVGAndBucketForGCResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{64}
}
func (m *GfSpListObjectsByGVGAndBucketForGCResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListObjectsByGVGAndBucketForGCResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListObjectsByGVGAndBucketForGCResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListObjectsByGVGAndBucketForGCResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListObjectsByGVGAndBucketForGCResponse.Merge(m, src)
}
func (m *GfSpListObjectsByGVGAndBucketForGCResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListObjectsByGVGAndBucketForGCResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListObjectsByGVGAndBucketForGCResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListObjectsByGVGAndBucketForGCResponse proto.InternalMessageInfo

func (m *GfSpListObjectsByGVGAndBucketForGCResponse) GetObjects() []*ObjectDetails {
	if m != nil {
		return m.Objects
	}
	return nil
}

// GfSpListMigrateBucketEventsRequest is request type for the GfSpListMigrateBucketEvents RPC method
type GfSpListMigrateBucketEventsRequest struct {
	// block_id is the unique identification for block
	BlockId uint64 `protobuf:"varint,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	// sp_id is the unique identification for sp
	SpId uint32 `protobuf:"varint,2,opt,name=sp_id,json=spId,proto3" json:"sp_id,omitempty"`
}

func (m *GfSpListMigrateBucketEventsRequest) Reset()         { *m = GfSpListMigrateBucketEventsRequest{} }
func (m *GfSpListMigrateBucketEventsRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpListMigrateBucketEventsRequest) ProtoMessage()    {}
func (*GfSpListMigrateBucketEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{65}
}
func (m *GfSpListMigrateBucketEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListMigrateBucketEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListMigrateBucketEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListMigrateBucketEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListMigrateBucketEventsRequest.Merge(m, src)
}
func (m *GfSpListMigrateBucketEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListMigrateBucketEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListMigrateBucketEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListMigrateBucketEventsRequest proto.InternalMessageInfo

func (m *GfSpListMigrateBucketEventsRequest) GetBlockId() uint64 {
	if m != nil {
		return m.BlockId
	}
	return 0
}

func (m *GfSpListMigrateBucketEventsRequest) GetSpId() uint32 {
	if m != nil {
		return m.SpId
	}
	return 0
}

// ListMigrateBucketEvents is the combination of migrate bucket events
type ListMigrateBucketEvents struct {
	// event defines the migration bucket event
	Event *types.EventMigrationBucket `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	// cancel_event defines the migration bucket event
	CancelEvent *types.EventCancelMigrationBucket `protobuf:"bytes,2,opt,name=cancel_event,json=cancelEvent,proto3" json:"cancel_event,omitempty"`
	// complete_event defines the complete migration bucket event
	CompleteEvent *types.EventCompleteMigrationBucket `protobuf:"bytes,3,opt,name=complete_event,json=completeEvent,proto3" json:"complete_event,omitempty"`
	// reject_event defines the reject migration bucket event
	RejectEvent *types.EventRejectMigrateBucket `protobuf:"bytes,4,opt,name=reject_event,json=rejectEvent,proto3" json:"reject_event,omitempty"`
}

func (m *ListMigrateBucketEvents) Reset()         { *m = ListMigrateBucketEvents{} }
func (m *ListMigrateBucketEvents) String() string { return proto.CompactTextString(m) }
func (*ListMigrateBucketEvents) ProtoMessage()    {}
func (*ListMigrateBucketEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{66}
}
func (m *ListMigrateBucketEvents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListMigrateBucketEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListMigrateBucketEvents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListMigrateBucketEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMigrateBucketEvents.Merge(m, src)
}
func (m *ListMigrateBucketEvents) XXX_Size() int {
	return m.Size()
}
func (m *ListMigrateBucketEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMigrateBucketEvents.DiscardUnknown(m)
}

var xxx_messageInfo_ListMigrateBucketEvents proto.InternalMessageInfo

func (m *ListMigrateBucketEvents) GetEvent() *types.EventMigrationBucket {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *ListMigrateBucketEvents) GetCancelEvent() *types.EventCancelMigrationBucket {
	if m != nil {
		return m.CancelEvent
	}
	return nil
}

func (m *ListMigrateBucketEvents) GetCompleteEvent() *types.EventCompleteMigrationBucket {
	if m != nil {
		return m.CompleteEvent
	}
	return nil
}

func (m *ListMigrateBucketEvents) GetRejectEvent() *types.EventRejectMigrateBucket {
	if m != nil {
		return m.RejectEvent
	}
	return nil
}

// GfSpListMigrateBucketEventsResponse is response type for the GfSpListMigrateBucketEvents RPC method
type GfSpListMigrateBucketEventsResponse struct {
	// ListMigrateBucketEvents is the combination of migrate bucket events
	Events []*ListMigrateBucketEvents `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *GfSpListMigrateBucketEventsResponse) Reset()         { *m = GfSpListMigrateBucketEventsResponse{} }
func (m *GfSpListMigrateBucketEventsResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpListMigrateBucketEventsResponse) ProtoMessage()    {}
func (*GfSpListMigrateBucketEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{67}
}
func (m *GfSpListMigrateBucketEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListMigrateBucketEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListMigrateBucketEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListMigrateBucketEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListMigrateBucketEventsResponse.Merge(m, src)
}
func (m *GfSpListMigrateBucketEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListMigrateBucketEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListMigrateBucketEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListMigrateBucketEventsResponse proto.InternalMessageInfo

func (m *GfSpListMigrateBucketEventsResponse) GetEvents() []*ListMigrateBucketEvents {
	if m != nil {
		return m.Events
	}
	return nil
}

// GfSpListSwapOutEventsRequest is request type for the GfSpListSwapOutEvents RPC method
type GfSpListSwapOutEventsRequest struct {
	// block_id is the unique identification for block
	BlockId uint64 `protobuf:"varint,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	// sp_id is the unique identification for sp
	SpId uint32 `protobuf:"varint,2,opt,name=sp_id,json=spId,proto3" json:"sp_id,omitempty"`
}

func (m *GfSpListSwapOutEventsRequest) Reset()         { *m = GfSpListSwapOutEventsRequest{} }
func (m *GfSpListSwapOutEventsRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpListSwapOutEventsRequest) ProtoMessage()    {}
func (*GfSpListSwapOutEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{68}
}
func (m *GfSpListSwapOutEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListSwapOutEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListSwapOutEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListSwapOutEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListSwapOutEventsRequest.Merge(m, src)
}
func (m *GfSpListSwapOutEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListSwapOutEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListSwapOutEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListSwapOutEventsRequest proto.InternalMessageInfo

func (m *GfSpListSwapOutEventsRequest) GetBlockId() uint64 {
	if m != nil {
		return m.BlockId
	}
	return 0
}

func (m *GfSpListSwapOutEventsRequest) GetSpId() uint32 {
	if m != nil {
		return m.SpId
	}
	return 0
}

// ListSwapOutEvents is the combination of swap out events
type ListSwapOutEvents struct {
	// events defines the swap out event
	Events *types1.EventSwapOut `protobuf:"bytes,1,opt,name=events,proto3" json:"events,omitempty"`
	// cancel_events defines the cancel swap out event
	CancelEvents *types1.EventCancelSwapOut `protobuf:"bytes,2,opt,name=cancel_events,json=cancelEvents,proto3" json:"cancel_events,omitempty"`
	// complete_events defines the complete swap out event
	CompleteEvents *types1.EventCompleteSwapOut `protobuf:"bytes,3,opt,name=complete_events,json=completeEvents,proto3" json:"complete_events,omitempty"`
}

func (m *ListSwapOutEvents) Reset()         { *m = ListSwapOutEvents{} }
func (m *ListSwapOutEvents) String() string { return proto.CompactTextString(m) }
func (*ListSwapOutEvents) ProtoMessage()    {}
func (*ListSwapOutEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{69}
}
func (m *ListSwapOutEvents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSwapOutEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSwapOutEvents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSwapOutEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSwapOutEvents.Merge(m, src)
}
func (m *ListSwapOutEvents) XXX_Size() int {
	return m.Size()
}
func (m *ListSwapOutEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSwapOutEvents.DiscardUnknown(m)
}

var xxx_messageInfo_ListSwapOutEvents proto.InternalMessageInfo

func (m *ListSwapOutEvents) GetEvents() *types1.EventSwapOut {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *ListSwapOutEvents) GetCancelEvents() *types1.EventCancelSwapOut {
	if m != nil {
		return m.CancelEvents
	}
	return nil
}

func (m *ListSwapOutEvents) GetCompleteEvents() *types1.EventCompleteSwapOut {
	if m != nil {
		return m.CompleteEvents
	}
	return nil
}

// GfSpListSwapOutEventsResponse is response type for the GfSpListSwapOutEvents RPC method
type GfSpListSwapOutEventsResponse struct {
	// ListSwapOutEvents is the combination of swap out events
	Events []*ListSwapOutEvents `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *GfSpListSwapOutEventsResponse) Reset()         { *m = GfSpListSwapOutEventsResponse{} }
func (m *GfSpListSwapOutEventsResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpListSwapOutEventsResponse) ProtoMessage()    {}
func (*GfSpListSwapOutEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{70}
}
func (m *GfSpListSwapOutEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListSwapOutEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListSwapOutEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListSwapOutEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListSwapOutEventsResponse.Merge(m, src)
}
func (m *GfSpListSwapOutEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListSwapOutEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListSwapOutEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListSwapOutEventsResponse proto.InternalMessageInfo

func (m *GfSpListSwapOutEventsResponse) GetEvents() []*ListSwapOutEvents {
	if m != nil {
		return m.Events
	}
	return nil
}

// GfSpListGlobalVirtualGroupsBySecondarySPRequest is request type for the GfSpListGlobalVirtualGroupsBySecondarySP RPC method
type GfSpListGlobalVirtualGroupsBySecondarySPRequest struct {
	// sp_id is the unique identification for sp
	SpId uint32 `protobuf:"varint,1,opt,name=sp_id,json=spId,proto3" json:"sp_id,omitempty"`
}

func (m *GfSpListGlobalVirtualGroupsBySecondarySPRequest) Reset() {
	*m = GfSpListGlobalVirtualGroupsBySecondarySPRequest{}
}
func (m *GfSpListGlobalVirtualGroupsBySecondarySPRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GfSpListGlobalVirtualGroupsBySecondarySPRequest) ProtoMessage() {}
func (*GfSpListGlobalVirtualGroupsBySecondarySPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{71}
}
func (m *GfSpListGlobalVirtualGroupsBySecondarySPRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListGlobalVirtualGroupsBySecondarySPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListGlobalVirtualGroupsBySecondarySPRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListGlobalVirtualGroupsBySecondarySPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListGlobalVirtualGroupsBySecondarySPRequest.Merge(m, src)
}
func (m *GfSpListGlobalVirtualGroupsBySecondarySPRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListGlobalVirtualGroupsBySecondarySPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListGlobalVirtualGroupsBySecondarySPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListGlobalVirtualGroupsBySecondarySPRequest proto.InternalMessageInfo

func (m *GfSpListGlobalVirtualGroupsBySecondarySPRequest) GetSpId() uint32 {
	if m != nil {
		return m.SpId
	}
	return 0
}

// GfSpListGlobalVirtualGroupsBySecondarySPResponse is response type for the GfSpListGlobalVirtualGroupsBySecondarySP RPC method
type GfSpListGlobalVirtualGroupsBySecondarySPResponse struct {
	// groups defines a list of gvg info
	Groups []*types1.GlobalVirtualGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (m *GfSpListGlobalVirtualGroupsBySecondarySPResponse) Reset() {
	*m = GfSpListGlobalVirtualGroupsBySecondarySPResponse{}
}
func (m *GfSpListGlobalVirtualGroupsBySecondarySPResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GfSpListGlobalVirtualGroupsBySecondarySPResponse) ProtoMessage() {}
func (*GfSpListGlobalVirtualGroupsBySecondarySPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{72}
}
func (m *GfSpListGlobalVirtualGroupsBySecondarySPResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListGlobalVirtualGroupsBySecondarySPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListGlobalVirtualGroupsBySecondarySPResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListGlobalVirtualGroupsBySecondarySPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListGlobalVirtualGroupsBySecondarySPResponse.Merge(m, src)
}
func (m *GfSpListGlobalVirtualGroupsBySecondarySPResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListGlobalVirtualGroupsBySecondarySPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListGlobalVirtualGroupsBySecondarySPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListGlobalVirtualGroupsBySecondarySPResponse proto.InternalMessageInfo

func (m *GfSpListGlobalVirtualGroupsBySecondarySPResponse) GetGroups() []*types1.GlobalVirtualGroup {
	if m != nil {
		return m.Groups
	}
	return nil
}

// GfSpListGlobalVirtualGroupsByBucketRequest is request type for the ListGlobalVirtualGroupsByBucket RPC method
type GfSpListGlobalVirtualGroupsByBucketRequest struct {
	// bucket_id is the unique identification for bucket
	BucketId uint64 `protobuf:"varint,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
}

func (m *GfSpListGlobalVirtualGroupsByBucketRequest) Reset() {
	*m = GfSpListGlobalVirtualGroupsByBucketRequest{}
}
func (m *GfSpListGlobalVirtualGroupsByBucketRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GfSpListGlobalVirtualGroupsByBucketRequest) ProtoMessage() {}
func (*GfSpListGlobalVirtualGroupsByBucketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{73}
}
func (m *GfSpListGlobalVirtualGroupsByBucketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListGlobalVirtualGroupsByBucketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListGlobalVirtualGroupsByBucketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListGlobalVirtualGroupsByBucketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListGlobalVirtualGroupsByBucketRequest.Merge(m, src)
}
func (m *GfSpListGlobalVirtualGroupsByBucketRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListGlobalVirtualGroupsByBucketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListGlobalVirtualGroupsByBucketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListGlobalVirtualGroupsByBucketRequest proto.InternalMessageInfo

func (m *GfSpListGlobalVirtualGroupsByBucketRequest) GetBucketId() uint64 {
	if m != nil {
		return m.BucketId
	}
	return 0
}

// GfSpListGlobalVirtualGroupsByBucketResponse is response type for the ListGlobalVirtualGroupsByBucket RPC method
type GfSpListGlobalVirtualGroupsByBucketResponse struct {
	// groups defines a list of gvg info
	Groups []*types1.GlobalVirtualGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (m *GfSpListGlobalVirtualGroupsByBucketResponse) Reset() {
	*m = GfSpListGlobalVirtualGroupsByBucketResponse{}
}
func (m *GfSpListGlobalVirtualGroupsByBucketResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GfSpListGlobalVirtualGroupsByBucketResponse) ProtoMessage() {}
func (*GfSpListGlobalVirtualGroupsByBucketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{74}
}
func (m *GfSpListGlobalVirtualGroupsByBucketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListGlobalVirtualGroupsByBucketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListGlobalVirtualGroupsByBucketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListGlobalVirtualGroupsByBucketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListGlobalVirtualGroupsByBucketResponse.Merge(m, src)
}
func (m *GfSpListGlobalVirtualGroupsByBucketResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListGlobalVirtualGroupsByBucketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListGlobalVirtualGroupsByBucketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListGlobalVirtualGroupsByBucketResponse proto.InternalMessageInfo

func (m *GfSpListGlobalVirtualGroupsByBucketResponse) GetGroups() []*types1.GlobalVirtualGroup {
	if m != nil {
		return m.Groups
	}
	return nil
}

// GfSpListSpExitEventsRequest is request type for the GfSpListSPExitEvents RPC method
type GfSpListSpExitEventsRequest struct {
	// block_id is the unique identification for block
	BlockId uint64 `protobuf:"varint,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	// sp_id is the unique identification for sp
	SpId uint32 `protobuf:"varint,2,opt,name=sp_id,json=spId,proto3" json:"sp_id,omitempty"`
}

func (m *GfSpListSpExitEventsRequest) Reset()         { *m = GfSpListSpExitEventsRequest{} }
func (m *GfSpListSpExitEventsRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpListSpExitEventsRequest) ProtoMessage()    {}
func (*GfSpListSpExitEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{75}
}
func (m *GfSpListSpExitEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListSpExitEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListSpExitEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListSpExitEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListSpExitEventsRequest.Merge(m, src)
}
func (m *GfSpListSpExitEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListSpExitEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListSpExitEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListSpExitEventsRequest proto.InternalMessageInfo

func (m *GfSpListSpExitEventsRequest) GetBlockId() uint64 {
	if m != nil {
		return m.BlockId
	}
	return 0
}

func (m *GfSpListSpExitEventsRequest) GetSpId() uint32 {
	if m != nil {
		return m.SpId
	}
	return 0
}

// ListSpExitEvents is the combination of sp exit events
type ListSpExitEvents struct {
	// events defines the sp exit event
	Event *types1.EventStorageProviderExit `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	// complete_events defines the complete sp exit event
	CompleteEvent *types1.EventCompleteStorageProviderExit `protobuf:"bytes,2,opt,name=complete_event,json=completeEvent,proto3" json:"complete_event,omitempty"`
}

func (m *ListSpExitEvents) Reset()         { *m = ListSpExitEvents{} }
func (m *ListSpExitEvents) String() string { return proto.CompactTextString(m) }
func (*ListSpExitEvents) ProtoMessage()    {}
func (*ListSpExitEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{76}
}
func (m *ListSpExitEvents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSpExitEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSpExitEvents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSpExitEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSpExitEvents.Merge(m, src)
}
func (m *ListSpExitEvents) XXX_Size() int {
	return m.Size()
}
func (m *ListSpExitEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSpExitEvents.DiscardUnknown(m)
}

var xxx_messageInfo_ListSpExitEvents proto.InternalMessageInfo

func (m *ListSpExitEvents) GetEvent() *types1.EventStorageProviderExit {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *ListSpExitEvents) GetCompleteEvent() *types1.EventCompleteStorageProviderExit {
	if m != nil {
		return m.CompleteEvent
	}
	return nil
}

// GfSpListSpExitEventsResponse is response type for the GfSpListSPExitEvents RPC method
type GfSpListSpExitEventsResponse struct {
	// ListSpExitEvents is the combination of sp exit events
	Events *ListSpExitEvents `protobuf:"bytes,1,opt,name=events,proto3" json:"events,omitempty"`
}

func (m *GfSpListSpExitEventsResponse) Reset()         { *m = GfSpListSpExitEventsResponse{} }
func (m *GfSpListSpExitEventsResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpListSpExitEventsResponse) ProtoMessage()    {}
func (*GfSpListSpExitEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{77}
}
func (m *GfSpListSpExitEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListSpExitEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListSpExitEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListSpExitEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListSpExitEventsResponse.Merge(m, src)
}
func (m *GfSpListSpExitEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListSpExitEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListSpExitEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListSpExitEventsResponse proto.InternalMessageInfo

func (m *GfSpListSpExitEventsResponse) GetEvents() *ListSpExitEvents {
	if m != nil {
		return m.Events
	}
	return nil
}

// GfSpGetSPInfoRequest is request type for the GfSpGetSPInfo RPC method
type GfSpGetSPInfoRequest struct {
	// operator_address is the unique identification address for operator
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
}

func (m *GfSpGetSPInfoRequest) Reset()         { *m = GfSpGetSPInfoRequest{} }
func (m *GfSpGetSPInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpGetSPInfoRequest) ProtoMessage()    {}
func (*GfSpGetSPInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{78}
}
func (m *GfSpGetSPInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetSPInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetSPInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetSPInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetSPInfoRequest.Merge(m, src)
}
func (m *GfSpGetSPInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetSPInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetSPInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetSPInfoRequest proto.InternalMessageInfo

func (m *GfSpGetSPInfoRequest) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

// GfSpGetSPInfoResponse is response type for the GfSpGetSPInfo RPC method
type GfSpGetSPInfoResponse struct {
	// sp defines the meta info of storage provider
	StorageProvider *types5.StorageProvider `protobuf:"bytes,1,opt,name=storage_provider,json=storageProvider,proto3" json:"storage_provider,omitempty"`
}

func (m *GfSpGetSPInfoResponse) Reset()         { *m = GfSpGetSPInfoResponse{} }
func (m *GfSpGetSPInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpGetSPInfoResponse) ProtoMessage()    {}
func (*GfSpGetSPInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{79}
}
func (m *GfSpGetSPInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetSPInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetSPInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetSPInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetSPInfoResponse.Merge(m, src)
}
func (m *GfSpGetSPInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetSPInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetSPInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetSPInfoResponse proto.InternalMessageInfo

func (m *GfSpGetSPInfoResponse) GetStorageProvider() *types5.StorageProvider {
	if m != nil {
		return m.StorageProvider
	}
	return nil
}

type Status struct {
	StorageProviderInfo *StorageProviderInfo `protobuf:"bytes,1,opt,name=storage_provider_info,json=storageProviderInfo,proto3" json:"storage_provider_info,omitempty"`
	BlockSyncerInfo     *BlockSyncerInfo     `protobuf:"bytes,2,opt,name=block_syncer_info,json=blockSyncerInfo,proto3" json:"block_syncer_info,omitempty"`
	ChainInfo           *ChainInfo           `protobuf:"bytes,3,opt,name=chain_info,json=chainInfo,proto3" json:"chain_info,omitempty"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{80}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetStorageProviderInfo() *StorageProviderInfo {
	if m != nil {
		return m.StorageProviderInfo
	}
	return nil
}

func (m *Status) GetBlockSyncerInfo() *BlockSyncerInfo {
	if m != nil {
		return m.BlockSyncerInfo
	}
	return nil
}

func (m *Status) GetChainInfo() *ChainInfo {
	if m != nil {
		return m.ChainInfo
	}
	return nil
}

// BlockSyncerInfo is the debug info for block syncer
type BlockSyncerInfo struct {
	BsBlockHeight             int64    `protobuf:"varint,1,opt,name=bs_block_height,json=bsBlockHeight,proto3" json:"bs_block_height,omitempty"`
	BsBlockHash               string   `protobuf:"bytes,2,opt,name=bs_block_hash,json=bsBlockHash,proto3" json:"bs_block_hash,omitempty"`
	BsUpdateTime              int64    `protobuf:"varint,3,opt,name=bs_update_time,json=bsUpdateTime,proto3" json:"bs_update_time,omitempty"`
	BsMysqlVersion            string   `protobuf:"bytes,4,opt,name=bs_mysql_version,json=bsMysqlVersion,proto3" json:"bs_mysql_version,omitempty"`
	BsDefaultCharacterSetName string   `protobuf:"bytes,5,opt,name=bs_default_character_set_name,json=bsDefaultCharacterSetName,proto3" json:"bs_default_character_set_name,omitempty"`
	BsDefaultCollationName    string   `protobuf:"bytes,6,opt,name=bs_default_collation_name,json=bsDefaultCollationName,proto3" json:"bs_default_collation_name,omitempty"`
	BsModules                 []string `protobuf:"bytes,7,rep,name=bs_modules,json=bsModules,proto3" json:"bs_modules,omitempty"`
	BsWorkers                 uint32   `protobuf:"varint,8,opt,name=bs_workers,json=bsWorkers,proto3" json:"bs_workers,omitempty"`
	BsEnableDualDb            bool     `protobuf:"varint,9,opt,name=bs_enable_dual_db,json=bsEnableDualDb,proto3" json:"bs_enable_dual_db,omitempty"`
}

func (m *BlockSyncerInfo) Reset()         { *m = BlockSyncerInfo{} }
func (m *BlockSyncerInfo) String() string { return proto.CompactTextString(m) }
func (*BlockSyncerInfo) ProtoMessage()    {}
func (*BlockSyncerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{81}
}
func (m *BlockSyncerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockSyncerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockSyncerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockSyncerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockSyncerInfo.Merge(m, src)
}
func (m *BlockSyncerInfo) XXX_Size() int {
	return m.Size()
}
func (m *BlockSyncerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockSyncerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BlockSyncerInfo proto.InternalMessageInfo

func (m *BlockSyncerInfo) GetBsBlockHeight() int64 {
	if m != nil {
		return m.BsBlockHeight
	}
	return 0
}

func (m *BlockSyncerInfo) GetBsBlockHash() string {
	if m != nil {
		return m.BsBlockHash
	}
	return ""
}

func (m *BlockSyncerInfo) GetBsUpdateTime() int64 {
	if m != nil {
		return m.BsUpdateTime
	}
	return 0
}

func (m *BlockSyncerInfo) GetBsMysqlVersion() string {
	if m != nil {
		return m.BsMysqlVersion
	}
	return ""
}

func (m *BlockSyncerInfo) GetBsDefaultCharacterSetName() string {
	if m != nil {
		return m.BsDefaultCharacterSetName
	}
	return ""
}

func (m *BlockSyncerInfo) GetBsDefaultCollationName() string {
	if m != nil {
		return m.BsDefaultCollationName
	}
	return ""
}

func (m *BlockSyncerInfo) GetBsModules() []string {
	if m != nil {
		return m.BsModules
	}
	return nil
}

func (m *BlockSyncerInfo) GetBsWorkers() uint32 {
	if m != nil {
		return m.BsWorkers
	}
	return 0
}

func (m *BlockSyncerInfo) GetBsEnableDualDb() bool {
	if m != nil {
		return m.BsEnableDualDb
	}
	return false
}

type ChainInfo struct {
	ChainId      string   `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ChainAddress []string `protobuf:"bytes,2,rep,name=chain_address,json=chainAddress,proto3" json:"chain_address,omitempty"`
}

func (m *ChainInfo) Reset()         { *m = ChainInfo{} }
func (m *ChainInfo) String() string { return proto.CompactTextString(m) }
func (*ChainInfo) ProtoMessage()    {}
func (*ChainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{82}
}
func (m *ChainInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainInfo.Merge(m, src)
}
func (m *ChainInfo) XXX_Size() int {
	return m.Size()
}
func (m *ChainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChainInfo proto.InternalMessageInfo

func (m *ChainInfo) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ChainInfo) GetChainAddress() []string {
	if m != nil {
		return m.ChainAddress
	}
	return nil
}

type StorageProviderInfo struct {
	SpCodeVersion     string `protobuf:"bytes,1,opt,name=sp_code_version,json=spCodeVersion,proto3" json:"sp_code_version,omitempty"`
	SpCodeCommit      string `protobuf:"bytes,2,opt,name=sp_code_commit,json=spCodeCommit,proto3" json:"sp_code_commit,omitempty"`
	SpArchitecture    string `protobuf:"bytes,3,opt,name=sp_architecture,json=spArchitecture,proto3" json:"sp_architecture,omitempty"`
	SpGoVersion       string `protobuf:"bytes,4,opt,name=sp_go_version,json=spGoVersion,proto3" json:"sp_go_version,omitempty"`
	SpOperatingSystem string `protobuf:"bytes,5,opt,name=sp_operating_system,json=spOperatingSystem,proto3" json:"sp_operating_system,omitempty"`
	SpOperatorAddress string `protobuf:"bytes,6,opt,name=sp_operator_address,json=spOperatorAddress,proto3" json:"sp_operator_address,omitempty"`
	SpDomainName      string `protobuf:"bytes,7,opt,name=sp_domain_name,json=spDomainName,proto3" json:"sp_domain_name,omitempty"`
}

func (m *StorageProviderInfo) Reset()         { *m = StorageProviderInfo{} }
func (m *StorageProviderInfo) String() string { return proto.CompactTextString(m) }
func (*StorageProviderInfo) ProtoMessage()    {}
func (*StorageProviderInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{83}
}
func (m *StorageProviderInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageProviderInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageProviderInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageProviderInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageProviderInfo.Merge(m, src)
}
func (m *StorageProviderInfo) XXX_Size() int {
	return m.Size()
}
func (m *StorageProviderInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageProviderInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StorageProviderInfo proto.InternalMessageInfo

func (m *StorageProviderInfo) GetSpCodeVersion() string {
	if m != nil {
		return m.SpCodeVersion
	}
	return ""
}

func (m *StorageProviderInfo) GetSpCodeCommit() string {
	if m != nil {
		return m.SpCodeCommit
	}
	return ""
}

func (m *StorageProviderInfo) GetSpArchitecture() string {
	if m != nil {
		return m.SpArchitecture
	}
	return ""
}

func (m *StorageProviderInfo) GetSpGoVersion() string {
	if m != nil {
		return m.SpGoVersion
	}
	return ""
}

func (m *StorageProviderInfo) GetSpOperatingSystem() string {
	if m != nil {
		return m.SpOperatingSystem
	}
	return ""
}

func (m *StorageProviderInfo) GetSpOperatorAddress() string {
	if m != nil {
		return m.SpOperatorAddress
	}
	return ""
}

func (m *StorageProviderInfo) GetSpDomainName() string {
	if m != nil {
		return m.SpDomainName
	}
	return ""
}

type GfSpGetStatusRequest struct {
}

func (m *GfSpGetStatusRequest) Reset()         { *m = GfSpGetStatusRequest{} }
func (m *GfSpGetStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpGetStatusRequest) ProtoMessage()    {}
func (*GfSpGetStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{84}
}
func (m *GfSpGetStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetStatusRequest.Merge(m, src)
}
func (m *GfSpGetStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetStatusRequest proto.InternalMessageInfo

type GfSpGetStatusResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *GfSpGetStatusResponse) Reset()         { *m = GfSpGetStatusResponse{} }
func (m *GfSpGetStatusResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpGetStatusResponse) ProtoMessage()    {}
func (*GfSpGetStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{85}
}
func (m *GfSpGetStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetStatusResponse.Merge(m, src)
}
func (m *GfSpGetStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetStatusResponse proto.InternalMessageInfo

func (m *GfSpGetStatusResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

// GfSpGetUserGroupsRequest is request type for the GfSpGetUserGroups RPC method
type GfSpGetUserGroupsRequest struct {
	// account_id is the account address of user
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// limit sets the limit of keys returned in the response
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// start_after is where you want to start listing from
	StartAfter uint64 `protobuf:"varint,3,opt,name=start_after,json=startAfter,proto3" json:"start_after,omitempty"`
}

func (m *GfSpGetUserGroupsRequest) Reset()         { *m = GfSpGetUserGroupsRequest{} }
func (m *GfSpGetUserGroupsRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpGetUserGroupsRequest) ProtoMessage()    {}
func (*GfSpGetUserGroupsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{86}
}
func (m *GfSpGetUserGroupsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetUserGroupsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetUserGroupsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetUserGroupsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetUserGroupsRequest.Merge(m, src)
}
func (m *GfSpGetUserGroupsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetUserGroupsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetUserGroupsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetUserGroupsRequest proto.InternalMessageInfo

func (m *GfSpGetUserGroupsRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *GfSpGetUserGroupsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GfSpGetUserGroupsRequest) GetStartAfter() uint64 {
	if m != nil {
		return m.StartAfter
	}
	return 0
}

// GfSpGetUserGroupsResponse is response type for the GfSpGetUserGroups RPC method
type GfSpGetUserGroupsResponse struct {
	// groups defines the response of group list
	Groups []*GroupMember `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (m *GfSpGetUserGroupsResponse) Reset()         { *m = GfSpGetUserGroupsResponse{} }
func (m *GfSpGetUserGroupsResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpGetUserGroupsResponse) ProtoMessage()    {}
func (*GfSpGetUserGroupsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{87}
}
func (m *GfSpGetUserGroupsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetUserGroupsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetUserGroupsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetUserGroupsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetUserGroupsResponse.Merge(m, src)
}
func (m *GfSpGetUserGroupsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetUserGroupsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetUserGroupsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetUserGroupsResponse proto.InternalMessageInfo

func (m *GfSpGetUserGroupsResponse) GetGroups() []*GroupMember {
	if m != nil {
		return m.Groups
	}
	return nil
}

// GfSpGetGroupMembersRequest is request type for the GfSpGetGroupMembers RPC method
type GfSpGetGroupMembersRequest struct {
	// group_id is the id of group
	GroupId uint64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// limit sets the limit of keys returned in the response
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// start_after is where you want to start listing from
	StartAfter string `protobuf:"bytes,3,opt,name=start_after,json=startAfter,proto3" json:"start_after,omitempty"`
}

func (m *GfSpGetGroupMembersRequest) Reset()         { *m = GfSpGetGroupMembersRequest{} }
func (m *GfSpGetGroupMembersRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpGetGroupMembersRequest) ProtoMessage()    {}
func (*GfSpGetGroupMembersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{88}
}
func (m *GfSpGetGroupMembersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetGroupMembersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetGroupMembersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetGroupMembersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetGroupMembersRequest.Merge(m, src)
}
func (m *GfSpGetGroupMembersRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetGroupMembersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetGroupMembersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetGroupMembersRequest proto.InternalMessageInfo

func (m *GfSpGetGroupMembersRequest) GetGroupId() uint64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GfSpGetGroupMembersRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GfSpGetGroupMembersRequest) GetStartAfter() string {
	if m != nil {
		return m.StartAfter
	}
	return ""
}

// GfSpGetGroupMembersResponse is response type for the GfSpGetGroupMembers RPC method
type GfSpGetGroupMembersResponse struct {
	// group defines the response of group members
	Groups []*GroupMember `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (m *GfSpGetGroupMembersResponse) Reset()         { *m = GfSpGetGroupMembersResponse{} }
func (m *GfSpGetGroupMembersResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpGetGroupMembersResponse) ProtoMessage()    {}
func (*GfSpGetGroupMembersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{89}
}
func (m *GfSpGetGroupMembersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetGroupMembersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetGroupMembersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetGroupMembersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetGroupMembersResponse.Merge(m, src)
}
func (m *GfSpGetGroupMembersResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetGroupMembersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetGroupMembersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetGroupMembersResponse proto.InternalMessageInfo

func (m *GfSpGetGroupMembersResponse) GetGroups() []*GroupMember {
	if m != nil {
		return m.Groups
	}
	return nil
}

// GfSpGetUserOwnedGroupsRequest is request type for the GfSpGetUserOwnedGroups RPC method
type GfSpGetUserOwnedGroupsRequest struct {
	// account_id is the account address of user
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// limit sets the limit of keys returned in the response
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// start_after is where you want to start listing from
	StartAfter uint64 `protobuf:"varint,3,opt,name=start_after,json=startAfter,proto3" json:"start_after,omitempty"`
}

func (m *GfSpGetUserOwnedGroupsRequest) Reset()         { *m = GfSpGetUserOwnedGroupsRequest{} }
func (m *GfSpGetUserOwnedGroupsRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpGetUserOwnedGroupsRequest) ProtoMessage()    {}
func (*GfSpGetUserOwnedGroupsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{90}
}
func (m *GfSpGetUserOwnedGroupsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetUserOwnedGroupsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetUserOwnedGroupsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetUserOwnedGroupsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetUserOwnedGroupsRequest.Merge(m, src)
}
func (m *GfSpGetUserOwnedGroupsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetUserOwnedGroupsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetUserOwnedGroupsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetUserOwnedGroupsRequest proto.InternalMessageInfo

func (m *GfSpGetUserOwnedGroupsRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *GfSpGetUserOwnedGroupsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GfSpGetUserOwnedGroupsRequest) GetStartAfter() uint64 {
	if m != nil {
		return m.StartAfter
	}
	return 0
}

// GfSpGetUserOwnedGroupsResponse is response type for the GfSpGetUserOwnedGroups RPC method
type GfSpGetUserOwnedGroupsResponse struct {
	// groups defines the response of group list
	Groups []*GroupMember `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (m *GfSpGetUserOwnedGroupsResponse) Reset()         { *m = GfSpGetUserOwnedGroupsResponse{} }
func (m *GfSpGetUserOwnedGroupsResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpGetUserOwnedGroupsResponse) ProtoMessage()    {}
func (*GfSpGetUserOwnedGroupsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{91}
}
func (m *GfSpGetUserOwnedGroupsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetUserOwnedGroupsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetUserOwnedGroupsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetUserOwnedGroupsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetUserOwnedGroupsResponse.Merge(m, src)
}
func (m *GfSpGetUserOwnedGroupsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetUserOwnedGroupsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetUserOwnedGroupsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetUserOwnedGroupsResponse proto.InternalMessageInfo

func (m *GfSpGetUserOwnedGroupsResponse) GetGroups() []*GroupMember {
	if m != nil {
		return m.Groups
	}
	return nil
}

type Policy struct {
	// principal_type defines the type of principal
	PrincipalType int32 `protobuf:"varint,1,opt,name=principal_type,json=principalType,proto3" json:"principal_type,omitempty"`
	// principal_value defines the value of principal
	PrincipalValue string `protobuf:"bytes,2,opt,name=principal_value,json=principalValue,proto3" json:"principal_value,omitempty"`
	// resource_type defines the type of resource that grants permission for
	ResourceType resource.ResourceType `protobuf:"varint,3,opt,name=resource_type,json=resourceType,proto3,enum=greenfield.resource.ResourceType" json:"resource_type,omitempty"`
	// resource_id defines the bucket/object/group id of the resource that grants permission for
	ResourceId string `protobuf:"bytes,4,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// create_timestamp defines the create time of permission
	CreateTimestamp int64 `protobuf:"varint,5,opt,name=create_timestamp,json=createTimestamp,proto3" json:"create_timestamp,omitempty"`
	// update_timestamp defines the update time of permission
	UpdateTimestamp int64 `protobuf:"varint,6,opt,name=update_timestamp,json=updateTimestamp,proto3" json:"update_timestamp,omitempty"`
	// expiration_time defines the expiration time of permission
	ExpirationTime int64 `protobuf:"varint,7,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
}

func (m *Policy) Reset()         { *m = Policy{} }
func (m *Policy) String() string { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()    {}
func (*Policy) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{92}
}
func (m *Policy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Policy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Policy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Policy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Policy.Merge(m, src)
}
func (m *Policy) XXX_Size() int {
	return m.Size()
}
func (m *Policy) XXX_DiscardUnknown() {
	xxx_messageInfo_Policy.DiscardUnknown(m)
}

var xxx_messageInfo_Policy proto.InternalMessageInfo

func (m *Policy) GetPrincipalType() int32 {
	if m != nil {
		return m.PrincipalType
	}
	return 0
}

func (m *Policy) GetPrincipalValue() string {
	if m != nil {
		return m.PrincipalValue
	}
	return ""
}

func (m *Policy) GetResourceType() resource.ResourceType {
	if m != nil {
		return m.ResourceType
	}
	return resource.RESOURCE_TYPE_UNSPECIFIED
}

func (m *Policy) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *Policy) GetCreateTimestamp() int64 {
	if m != nil {
		return m.CreateTimestamp
	}
	return 0
}

func (m *Policy) GetUpdateTimestamp() int64 {
	if m != nil {
		return m.UpdateTimestamp
	}
	return 0
}

func (m *Policy) GetExpirationTime() int64 {
	if m != nil {
		return m.ExpirationTime
	}
	return 0
}

// GfSpListObjectPoliciesRequest is request type for the GfSpListObjectPolicies RPC method
type GfSpListObjectPoliciesRequest struct {
	// object_name defines the name of object
	ObjectName string `protobuf:"bytes,1,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	// bucket_name defines the name of bucket
	BucketName string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// action_type defines the requested action type of permission
	ActionType types4.ActionType `protobuf:"varint,3,opt,name=action_type,json=actionType,proto3,enum=greenfield.permission.ActionType" json:"action_type,omitempty"`
	// limit sets the limit of keys returned in the response
	Limit uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// start_after is where you want to start listing from
	StartAfter uint64 `protobuf:"varint,5,opt,name=start_after,json=startAfter,proto3" json:"start_after,omitempty"`
}

func (m *GfSpListObjectPoliciesRequest) Reset()         { *m = GfSpListObjectPoliciesRequest{} }
func (m *GfSpListObjectPoliciesRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpListObjectPoliciesRequest) ProtoMessage()    {}
func (*GfSpListObjectPoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{93}
}
func (m *GfSpListObjectPoliciesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListObjectPoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListObjectPoliciesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListObjectPoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListObjectPoliciesRequest.Merge(m, src)
}
func (m *GfSpListObjectPoliciesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListObjectPoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListObjectPoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListObjectPoliciesRequest proto.InternalMessageInfo

func (m *GfSpListObjectPoliciesRequest) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

func (m *GfSpListObjectPoliciesRequest) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *GfSpListObjectPoliciesRequest) GetActionType() types4.ActionType {
	if m != nil {
		return m.ActionType
	}
	return types4.ACTION_UNSPECIFIED
}

func (m *GfSpListObjectPoliciesRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GfSpListObjectPoliciesRequest) GetStartAfter() uint64 {
	if m != nil {
		return m.StartAfter
	}
	return 0
}

// GfSpListObjectPoliciesResponse is response type for the GfSpListObjectPolicies RPC method
type GfSpListObjectPoliciesResponse struct {
	Policies []*Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (m *GfSpListObjectPoliciesResponse) Reset()         { *m = GfSpListObjectPoliciesResponse{} }
func (m *GfSpListObjectPoliciesResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpListObjectPoliciesResponse) ProtoMessage()    {}
func (*GfSpListObjectPoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{94}
}
func (m *GfSpListObjectPoliciesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListObjectPoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListObjectPoliciesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListObjectPoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListObjectPoliciesResponse.Merge(m, src)
}
func (m *GfSpListObjectPoliciesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListObjectPoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListObjectPoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListObjectPoliciesResponse proto.InternalMessageInfo

func (m *GfSpListObjectPoliciesResponse) GetPolicies() []*Policy {
	if m != nil {
		return m.Policies
	}
	return nil
}

// GfSpListPaymentAccountStreamsRequest is request type for the GfSpListPaymentAccountStreams RPC method
type GfSpListPaymentAccountStreamsRequest struct {
	// payment_account defines the address of payment account
	PaymentAccount string `protobuf:"bytes,1,opt,name=payment_account,json=paymentAccount,proto3" json:"payment_account,omitempty"`
}

func (m *GfSpListPaymentAccountStreamsRequest) Reset()         { *m = GfSpListPaymentAccountStreamsRequest{} }
func (m *GfSpListPaymentAccountStreamsRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpListPaymentAccountStreamsRequest) ProtoMessage()    {}
func (*GfSpListPaymentAccountStreamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{95}
}
func (m *GfSpListPaymentAccountStreamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListPaymentAccountStreamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListPaymentAccountStreamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListPaymentAccountStreamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListPaymentAccountStreamsRequest.Merge(m, src)
}
func (m *GfSpListPaymentAccountStreamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListPaymentAccountStreamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListPaymentAccountStreamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListPaymentAccountStreamsRequest proto.InternalMessageInfo

func (m *GfSpListPaymentAccountStreamsRequest) GetPaymentAccount() string {
	if m != nil {
		return m.PaymentAccount
	}
	return ""
}

// GfSpListPaymentAccountStreamsResponse is response type for the GfSpListPaymentAccountStreams RPC method
type GfSpListPaymentAccountStreamsResponse struct {
	// buckets defines the list of bucket
	Buckets []*Bucket `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (m *GfSpListPaymentAccountStreamsResponse) Reset()         { *m = GfSpListPaymentAccountStreamsResponse{} }
func (m *GfSpListPaymentAccountStreamsResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpListPaymentAccountStreamsResponse) ProtoMessage()    {}
func (*GfSpListPaymentAccountStreamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{96}
}
func (m *GfSpListPaymentAccountStreamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListPaymentAccountStreamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListPaymentAccountStreamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListPaymentAccountStreamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListPaymentAccountStreamsResponse.Merge(m, src)
}
func (m *GfSpListPaymentAccountStreamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListPaymentAccountStreamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListPaymentAccountStreamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListPaymentAccountStreamsResponse proto.InternalMessageInfo

func (m *GfSpListPaymentAccountStreamsResponse) GetBuckets() []*Bucket {
	if m != nil {
		return m.Buckets
	}
	return nil
}

// GfSpListUserPaymentAccountsRequest is request type for the GfSpListUserPaymentAccounts RPC method
type GfSpListUserPaymentAccountsRequest struct {
	// account_id is the account address of user
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (m *GfSpListUserPaymentAccountsRequest) Reset()         { *m = GfSpListUserPaymentAccountsRequest{} }
func (m *GfSpListUserPaymentAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpListUserPaymentAccountsRequest) ProtoMessage()    {}
func (*GfSpListUserPaymentAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{97}
}
func (m *GfSpListUserPaymentAccountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListUserPaymentAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListUserPaymentAccountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListUserPaymentAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListUserPaymentAccountsRequest.Merge(m, src)
}
func (m *GfSpListUserPaymentAccountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListUserPaymentAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListUserPaymentAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListUserPaymentAccountsRequest proto.InternalMessageInfo

func (m *GfSpListUserPaymentAccountsRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

// GfSpListUserPaymentAccountsResponse is response type for the GfSpListUserPaymentAccounts RPC method
type GfSpListUserPaymentAccountsResponse struct {
	// payment_accounts defines payment accounts info
	PaymentAccounts []*PaymentAccountMeta `protobuf:"bytes,2,rep,name=payment_accounts,json=paymentAccounts,proto3" json:"payment_accounts,omitempty"`
}

func (m *GfSpListUserPaymentAccountsResponse) Reset()         { *m = GfSpListUserPaymentAccountsResponse{} }
func (m *GfSpListUserPaymentAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpListUserPaymentAccountsResponse) ProtoMessage()    {}
func (*GfSpListUserPaymentAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{98}
}
func (m *GfSpListUserPaymentAccountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListUserPaymentAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListUserPaymentAccountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListUserPaymentAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListUserPaymentAccountsResponse.Merge(m, src)
}
func (m *GfSpListUserPaymentAccountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListUserPaymentAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListUserPaymentAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListUserPaymentAccountsResponse proto.InternalMessageInfo

func (m *GfSpListUserPaymentAccountsResponse) GetPaymentAccounts() []*PaymentAccountMeta {
	if m != nil {
		return m.PaymentAccounts
	}
	return nil
}

// GfSpListGroupsByIDsRequest is request type for the GfSpListGroupsByIDs RPC method
type GfSpListGroupsByIDsRequest struct {
	// group_ids is the list of unique identifier for groups
	GroupIds []uint64 `protobuf:"varint,1,rep,packed,name=group_ids,json=groupIds,proto3" json:"group_ids,omitempty"`
}

func (m *GfSpListGroupsByIDsRequest) Reset()         { *m = GfSpListGroupsByIDsRequest{} }
func (m *GfSpListGroupsByIDsRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpListGroupsByIDsRequest) ProtoMessage()    {}
func (*GfSpListGroupsByIDsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{99}
}
func (m *GfSpListGroupsByIDsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListGroupsByIDsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListGroupsByIDsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListGroupsByIDsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListGroupsByIDsRequest.Merge(m, src)
}
func (m *GfSpListGroupsByIDsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListGroupsByIDsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListGroupsByIDsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListGroupsByIDsRequest proto.InternalMessageInfo

func (m *GfSpListGroupsByIDsRequest) GetGroupIds() []uint64 {
	if m != nil {
		return m.GroupIds
	}
	return nil
}

// GfSpListGroupsByIDsResponse is response type for the GfSpListGroupsByIDs RPC method.
type GfSpListGroupsByIDsResponse struct {
	// groups defines the information of a group map
	Groups map[uint64]*Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GfSpListGroupsByIDsResponse) Reset()         { *m = GfSpListGroupsByIDsResponse{} }
func (m *GfSpListGroupsByIDsResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpListGroupsByIDsResponse) ProtoMessage()    {}
func (*GfSpListGroupsByIDsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{100}
}
func (m *GfSpListGroupsByIDsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpListGroupsByIDsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpListGroupsByIDsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpListGroupsByIDsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpListGroupsByIDsResponse.Merge(m, src)
}
func (m *GfSpListGroupsByIDsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpListGroupsByIDsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpListGroupsByIDsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpListGroupsByIDsResponse proto.InternalMessageInfo

func (m *GfSpListGroupsByIDsResponse) GetGroups() map[uint64]*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

// GfSpGetSPMigratingBucketNumberRequest is request type for the GfSpGetSPMigratingBucketNumber RPC method
type GfSpGetSPMigratingBucketNumberRequest struct {
	// sp_id is the unique identification for sp
	SpId uint32 `protobuf:"varint,1,opt,name=sp_id,json=spId,proto3" json:"sp_id,omitempty"`
}

func (m *GfSpGetSPMigratingBucketNumberRequest) Reset()         { *m = GfSpGetSPMigratingBucketNumberRequest{} }
func (m *GfSpGetSPMigratingBucketNumberRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpGetSPMigratingBucketNumberRequest) ProtoMessage()    {}
func (*GfSpGetSPMigratingBucketNumberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{101}
}
func (m *GfSpGetSPMigratingBucketNumberRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetSPMigratingBucketNumberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetSPMigratingBucketNumberRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetSPMigratingBucketNumberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetSPMigratingBucketNumberRequest.Merge(m, src)
}
func (m *GfSpGetSPMigratingBucketNumberRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetSPMigratingBucketNumberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetSPMigratingBucketNumberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetSPMigratingBucketNumberRequest proto.InternalMessageInfo

func (m *GfSpGetSPMigratingBucketNumberRequest) GetSpId() uint32 {
	if m != nil {
		return m.SpId
	}
	return 0
}

// GfSpGetSPMigratingBucketNumberResponse is response type for the GfSpGetSPMigratingBucketNumber RPC method
type GfSpGetSPMigratingBucketNumberResponse struct {
	// count defines the active migration bucket count
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *GfSpGetSPMigratingBucketNumberResponse) Reset() {
	*m = GfSpGetSPMigratingBucketNumberResponse{}
}
func (m *GfSpGetSPMigratingBucketNumberResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpGetSPMigratingBucketNumberResponse) ProtoMessage()    {}
func (*GfSpGetSPMigratingBucketNumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{102}
}
func (m *GfSpGetSPMigratingBucketNumberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetSPMigratingBucketNumberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetSPMigratingBucketNumberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetSPMigratingBucketNumberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetSPMigratingBucketNumberResponse.Merge(m, src)
}
func (m *GfSpGetSPMigratingBucketNumberResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetSPMigratingBucketNumberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetSPMigratingBucketNumberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetSPMigratingBucketNumberResponse proto.InternalMessageInfo

func (m *GfSpGetSPMigratingBucketNumberResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// GfSpVerifyMigrateGVGPermissionRequest is request type for the VerifyMigrateGVGPermission RPC method
type GfSpVerifyMigrateGVGPermissionRequest struct {
	// bucket_id is the unique identification for bucket
	BucketId uint64 `protobuf:"varint,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	// gvg_id is the unique identification for gvg
	GvgId uint32 `protobuf:"varint,2,opt,name=gvg_id,json=gvgId,proto3" json:"gvg_id,omitempty"`
	// dst_sp_id is the destination sp id
	DstSpId uint32 `protobuf:"varint,3,opt,name=dst_sp_id,json=dstSpId,proto3" json:"dst_sp_id,omitempty"`
}

func (m *GfSpVerifyMigrateGVGPermissionRequest) Reset()         { *m = GfSpVerifyMigrateGVGPermissionRequest{} }
func (m *GfSpVerifyMigrateGVGPermissionRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpVerifyMigrateGVGPermissionRequest) ProtoMessage()    {}
func (*GfSpVerifyMigrateGVGPermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{103}
}
func (m *GfSpVerifyMigrateGVGPermissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpVerifyMigrateGVGPermissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpVerifyMigrateGVGPermissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpVerifyMigrateGVGPermissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpVerifyMigrateGVGPermissionRequest.Merge(m, src)
}
func (m *GfSpVerifyMigrateGVGPermissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpVerifyMigrateGVGPermissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpVerifyMigrateGVGPermissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpVerifyMigrateGVGPermissionRequest proto.InternalMessageInfo

func (m *GfSpVerifyMigrateGVGPermissionRequest) GetBucketId() uint64 {
	if m != nil {
		return m.BucketId
	}
	return 0
}

func (m *GfSpVerifyMigrateGVGPermissionRequest) GetGvgId() uint32 {
	if m != nil {
		return m.GvgId
	}
	return 0
}

func (m *GfSpVerifyMigrateGVGPermissionRequest) GetDstSpId() uint32 {
	if m != nil {
		return m.DstSpId
	}
	return 0
}

// GfSpVerifyMigrateGVGPermissionResponse is response type for the VerifyMigrateGVGPermission RPC method
type GfSpVerifyMigrateGVGPermissionResponse struct {
	// effect define the effect of the operation permission, include Allow or deny
	Effect types4.Effect `protobuf:"varint,1,opt,name=effect,proto3,enum=greenfield.permission.Effect" json:"effect,omitempty"`
}

func (m *GfSpVerifyMigrateGVGPermissionResponse) Reset() {
	*m = GfSpVerifyMigrateGVGPermissionResponse{}
}
func (m *GfSpVerifyMigrateGVGPermissionResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpVerifyMigrateGVGPermissionResponse) ProtoMessage()    {}
func (*GfSpVerifyMigrateGVGPermissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{104}
}
func (m *GfSpVerifyMigrateGVGPermissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpVerifyMigrateGVGPermissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpVerifyMigrateGVGPermissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpVerifyMigrateGVGPermissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpVerifyMigrateGVGPermissionResponse.Merge(m, src)
}
func (m *GfSpVerifyMigrateGVGPermissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpVerifyMigrateGVGPermissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpVerifyMigrateGVGPermissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpVerifyMigrateGVGPermissionResponse proto.InternalMessageInfo

func (m *GfSpVerifyMigrateGVGPermissionResponse) GetEffect() types4.Effect {
	if m != nil {
		return m.Effect
	}
	return types4.EFFECT_UNSPECIFIED
}

// GfSpGetBucketSizeRequest is request type for the GfSpGetBucketSize RPC method
type GfSpGetBucketSizeRequest struct {
	// bucket_id is the unique identification for bucket
	BucketId uint64 `protobuf:"varint,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
}

func (m *GfSpGetBucketSizeRequest) Reset()         { *m = GfSpGetBucketSizeRequest{} }
func (m *GfSpGetBucketSizeRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpGetBucketSizeRequest) ProtoMessage()    {}
func (*GfSpGetBucketSizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{105}
}
func (m *GfSpGetBucketSizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetBucketSizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetBucketSizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetBucketSizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetBucketSizeRequest.Merge(m, src)
}
func (m *GfSpGetBucketSizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetBucketSizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetBucketSizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetBucketSizeRequest proto.InternalMessageInfo

func (m *GfSpGetBucketSizeRequest) GetBucketId() uint64 {
	if m != nil {
		return m.BucketId
	}
	return 0
}

// GfSpGetBucketSizeResponse is response type for the GfSpGetBucketSize RPC method
type GfSpGetBucketSizeResponse struct {
	// bucket_size define total objects of specific bucket
	BucketSize string `protobuf:"bytes,1,opt,name=bucket_size,json=bucketSize,proto3" json:"bucket_size,omitempty"`
}

func (m *GfSpGetBucketSizeResponse) Reset()         { *m = GfSpGetBucketSizeResponse{} }
func (m *GfSpGetBucketSizeResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpGetBucketSizeResponse) ProtoMessage()    {}
func (*GfSpGetBucketSizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cdcff708e247f22, []int{106}
}
func (m *GfSpGetBucketSizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetBucketSizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetBucketSizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetBucketSizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetBucketSizeResponse.Merge(m, src)
}
func (m *GfSpGetBucketSizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetBucketSizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetBucketSizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetBucketSizeResponse proto.InternalMessageInfo

func (m *GfSpGetBucketSizeResponse) GetBucketSize() string {
	if m != nil {
		return m.BucketSize
	}
	return ""
}

func init() {
	proto.RegisterType((*Bucket)(nil), "modular.metadata.types.Bucket")
	proto.RegisterType((*Object)(nil), "modular.metadata.types.Object")
	proto.RegisterType((*ObjectDetails)(nil), "modular.metadata.types.ObjectDetails")
	proto.RegisterType((*VGFInfoBucket)(nil), "modular.metadata.types.VGFInfoBucket")
	proto.RegisterType((*PaymentAccount)(nil), "modular.metadata.types.PaymentAccount")
	proto.RegisterType((*PaymentAccountMeta)(nil), "modular.metadata.types.PaymentAccountMeta")
	proto.RegisterType((*GfSpGetUserBucketsRequest)(nil), "modular.metadata.types.GfSpGetUserBucketsRequest")
	proto.RegisterType((*GfSpGetUserBucketsResponse)(nil), "modular.metadata.types.GfSpGetUserBucketsResponse")
	proto.RegisterType((*GfSpListObjectsByBucketNameRequest)(nil), "modular.metadata.types.GfSpListObjectsByBucketNameRequest")
	proto.RegisterType((*GfSpListObjectsByBucketNameResponse)(nil), "modular.metadata.types.GfSpListObjectsByBucketNameResponse")
	proto.RegisterType((*GfSpGetBucketByBucketNameRequest)(nil), "modular.metadata.types.GfSpGetBucketByBucketNameRequest")
	proto.RegisterType((*GfSpGetBucketByBucketNameResponse)(nil), "modular.metadata.types.GfSpGetBucketByBucketNameResponse")
	proto.RegisterType((*GfSpGetBucketByBucketIDRequest)(nil), "modular.metadata.types.GfSpGetBucketByBucketIDRequest")
	proto.RegisterType((*GfSpGetBucketByBucketIDResponse)(nil), "modular.metadata.types.GfSpGetBucketByBucketIDResponse")
	proto.RegisterType((*GfSpListDeletedObjectsByBlockNumberRangeRequest)(nil), "modular.metadata.types.GfSpListDeletedObjectsByBlockNumberRangeRequest")
	proto.RegisterType((*GfSpListDeletedObjectsByBlockNumberRangeResponse)(nil), "modular.metadata.types.GfSpListDeletedObjectsByBlockNumberRangeResponse")
	proto.RegisterType((*GfSpGetUserBucketsCountRequest)(nil), "modular.metadata.types.GfSpGetUserBucketsCountRequest")
	proto.RegisterType((*GfSpGetUserBucketsCountResponse)(nil), "modular.metadata.types.GfSpGetUserBucketsCountResponse")
	proto.RegisterType((*GfSpListExpiredBucketsBySpRequest)(nil), "modular.metadata.types.GfSpListExpiredBucketsBySpRequest")
	proto.RegisterType((*GfSpListExpiredBucketsBySpResponse)(nil), "modular.metadata.types.GfSpListExpiredBucketsBySpResponse")
	proto.RegisterType((*GfSpGetObjectMetaRequest)(nil), "modular.metadata.types.GfSpGetObjectMetaRequest")
	proto.RegisterType((*GfSpGetObjectMetaResponse)(nil), "modular.metadata.types.GfSpGetObjectMetaResponse")
	proto.RegisterType((*GfSpGetPaymentByBucketNameRequest)(nil), "modular.metadata.types.GfSpGetPaymentByBucketNameRequest")
	proto.RegisterType((*GfSpGetPaymentByBucketNameResponse)(nil), "modular.metadata.types.GfSpGetPaymentByBucketNameResponse")
	proto.RegisterType((*GfSpGetPaymentByBucketIDRequest)(nil), "modular.metadata.types.GfSpGetPaymentByBucketIDRequest")
	proto.RegisterType((*GfSpGetPaymentByBucketIDResponse)(nil), "modular.metadata.types.GfSpGetPaymentByBucketIDResponse")
	proto.RegisterType((*GfSpGetBucketMetaRequest)(nil), "modular.metadata.types.GfSpGetBucketMetaRequest")
	proto.RegisterType((*GfSpGetBucketMetaResponse)(nil), "modular.metadata.types.GfSpGetBucketMetaResponse")
	proto.RegisterType((*GfSpGetEndpointBySpIDRequest)(nil), "modular.metadata.types.GfSpGetEndpointBySpIDRequest")
	proto.RegisterType((*GfSpGetEndpointBySpIDResponse)(nil), "modular.metadata.types.GfSpGetEndpointBySpIDResponse")
	proto.RegisterType((*GfSpGetBucketReadQuotaRequest)(nil), "modular.metadata.types.GfSpGetBucketReadQuotaRequest")
	proto.RegisterType((*GfSpGetBucketReadQuotaResponse)(nil), "modular.metadata.types.GfSpGetBucketReadQuotaResponse")
	proto.RegisterType((*GfSpGetLatestBucketReadQuotaRequest)(nil), "modular.metadata.types.GfSpGetLatestBucketReadQuotaRequest")
	proto.RegisterType((*GfSpGetLatestBucketReadQuotaResponse)(nil), "modular.metadata.types.GfSpGetLatestBucketReadQuotaResponse")
	proto.RegisterType((*GfSpListBucketReadRecordRequest)(nil), "modular.metadata.types.GfSpListBucketReadRecordRequest")
	proto.RegisterType((*ReadRecord)(nil), "modular.metadata.types.ReadRecord")
	proto.RegisterType((*GfSpListBucketReadRecordResponse)(nil), "modular.metadata.types.GfSpListBucketReadRecordResponse")
	proto.RegisterType((*GfSpQueryUploadProgressRequest)(nil), "modular.metadata.types.GfSpQueryUploadProgressRequest")
	proto.RegisterType((*GfSpQueryUploadProgressResponse)(nil), "modular.metadata.types.GfSpQueryUploadProgressResponse")
	proto.RegisterType((*GfSpQueryResumableUploadSegmentRequest)(nil), "modular.metadata.types.GfSpQueryResumableUploadSegmentRequest")
	proto.RegisterType((*GfSpQueryResumableUploadSegmentResponse)(nil), "modular.metadata.types.GfSpQueryResumableUploadSegmentResponse")
	proto.RegisterType((*Group)(nil), "modular.metadata.types.Group")
	proto.RegisterType((*GroupMember)(nil), "modular.metadata.types.GroupMember")
	proto.RegisterType((*GfSpGetGroupListRequest)(nil), "modular.metadata.types.GfSpGetGroupListRequest")
	proto.RegisterType((*GfSpGetGroupListResponse)(nil), "modular.metadata.types.GfSpGetGroupListResponse")
	proto.RegisterType((*GfSpListBucketsByIDsRequest)(nil), "modular.metadata.types.GfSpListBucketsByIDsRequest")
	proto.RegisterType((*GfSpListBucketsByIDsResponse)(nil), "modular.metadata.types.GfSpListBucketsByIDsResponse")
	proto.RegisterMapType((map[uint64]*Bucket)(nil), "modular.metadata.types.GfSpListBucketsByIDsResponse.BucketsEntry")
	proto.RegisterType((*GfSpListObjectsByIDsRequest)(nil), "modular.metadata.types.GfSpListObjectsByIDsRequest")
	proto.RegisterType((*GfSpListObjectsByIDsResponse)(nil), "modular.metadata.types.GfSpListObjectsByIDsResponse")
	proto.RegisterMapType((map[uint64]*Object)(nil), "modular.metadata.types.GfSpListObjectsByIDsResponse.ObjectsEntry")
	proto.RegisterType((*GfSpVerifyPermissionByIDRequest)(nil), "modular.metadata.types.GfSpVerifyPermissionByIDRequest")
	proto.RegisterType((*GfSpVerifyPermissionByIDResponse)(nil), "modular.metadata.types.GfSpVerifyPermissionByIDResponse")
	proto.RegisterType((*GfSpListVirtualGroupFamiliesBySpIDRequest)(nil), "modular.metadata.types.GfSpListVirtualGroupFamiliesBySpIDRequest")
	proto.RegisterType((*GfSpListVirtualGroupFamiliesBySpIDResponse)(nil), "modular.metadata.types.GfSpListVirtualGroupFamiliesBySpIDResponse")
	proto.RegisterType((*GfSpGetGlobalVirtualGroupByGvgIDRequest)(nil), "modular.metadata.types.GfSpGetGlobalVirtualGroupByGvgIDRequest")
	proto.RegisterType((*GfSpGetGlobalVirtualGroupByGvgIDResponse)(nil), "modular.metadata.types.GfSpGetGlobalVirtualGroupByGvgIDResponse")
	proto.RegisterType((*GfSpGetVirtualGroupFamilyRequest)(nil), "modular.metadata.types.GfSpGetVirtualGroupFamilyRequest")
	proto.RegisterType((*GfSpGetVirtualGroupFamilyResponse)(nil), "modular.metadata.types.GfSpGetVirtualGroupFamilyResponse")
	proto.RegisterType((*GfSpGetGlobalVirtualGroupRequest)(nil), "modular.metadata.types.GfSpGetGlobalVirtualGroupRequest")
	proto.RegisterType((*GfSpGetGlobalVirtualGroupResponse)(nil), "modular.metadata.types.GfSpGetGlobalVirtualGroupResponse")
	proto.RegisterType((*GfSpListObjectsInGVGRequest)(nil), "modular.metadata.types.GfSpListObjectsInGVGRequest")
	proto.RegisterType((*GfSpListObjectsInGVGResponse)(nil), "modular.metadata.types.GfSpListObjectsInGVGResponse")
	proto.RegisterType((*GfSpListObjectsInGVGAndBucketRequest)(nil), "modular.metadata.types.GfSpListObjectsInGVGAndBucketRequest")
	proto.RegisterType((*GfSpListObjectsInGVGAndBucketResponse)(nil), "modular.metadata.types.GfSpListObjectsInGVGAndBucketResponse")
	proto.RegisterType((*GfSpListObjectsByGVGAndBucketForGCRequest)(nil), "modular.metadata.types.GfSpListObjectsByGVGAndBucketForGCRequest")
	proto.RegisterType((*GfSpListObjectsByGVGAndBucketForGCResponse)(nil), "modular.metadata.types.GfSpListObjectsByGVGAndBucketForGCResponse")
	proto.RegisterType((*GfSpListMigrateBucketEventsRequest)(nil), "modular.metadata.types.GfSpListMigrateBucketEventsRequest")
	proto.RegisterType((*ListMigrateBucketEvents)(nil), "modular.metadata.types.ListMigrateBucketEvents")
	proto.RegisterType((*GfSpListMigrateBucketEventsResponse)(nil), "modular.metadata.types.GfSpListMigrateBucketEventsResponse")
	proto.RegisterType((*GfSpListSwapOutEventsRequest)(nil), "modular.metadata.types.GfSpListSwapOutEventsRequest")
	proto.RegisterType((*ListSwapOutEvents)(nil), "modular.metadata.types.ListSwapOutEvents")
	proto.RegisterType((*GfSpListSwapOutEventsResponse)(nil), "modular.metadata.types.GfSpListSwapOutEventsResponse")
	proto.RegisterType((*GfSpListGlobalVirtualGroupsBySecondarySPRequest)(nil), "modular.metadata.types.GfSpListGlobalVirtualGroupsBySecondarySPRequest")
	proto.RegisterType((*GfSpListGlobalVirtualGroupsBySecondarySPResponse)(nil), "modular.metadata.types.GfSpListGlobalVirtualGroupsBySecondarySPResponse")
	proto.RegisterType((*GfSpListGlobalVirtualGroupsByBucketRequest)(nil), "modular.metadata.types.GfSpListGlobalVirtualGroupsByBucketRequest")
	proto.RegisterType((*GfSpListGlobalVirtualGroupsByBucketResponse)(nil), "modular.metadata.types.GfSpListGlobalVirtualGroupsByBucketResponse")
	proto.RegisterType((*GfSpListSpExitEventsRequest)(nil), "modular.metadata.types.GfSpListSpExitEventsRequest")
	proto.RegisterType((*ListSpExitEvents)(nil), "modular.metadata.types.ListSpExitEvents")
	proto.RegisterType((*GfSpListSpExitEventsResponse)(nil), "modular.metadata.types.GfSpListSpExitEventsResponse")
	proto.RegisterType((*GfSpGetSPInfoRequest)(nil), "modular.metadata.types.GfSpGetSPInfoRequest")
	proto.RegisterType((*GfSpGetSPInfoResponse)(nil), "modular.metadata.types.GfSpGetSPInfoResponse")
	proto.RegisterType((*Status)(nil), "modular.metadata.types.Status")
	proto.RegisterType((*BlockSyncerInfo)(nil), "modular.metadata.types.BlockSyncerInfo")
	proto.RegisterType((*ChainInfo)(nil), "modular.metadata.types.ChainInfo")
	proto.RegisterType((*StorageProviderInfo)(nil), "modular.metadata.types.StorageProviderInfo")
	proto.RegisterType((*GfSpGetStatusRequest)(nil), "modular.metadata.types.GfSpGetStatusRequest")
	proto.RegisterType((*GfSpGetStatusResponse)(nil), "modular.metadata.types.GfSpGetStatusResponse")
	proto.RegisterType((*GfSpGetUserGroupsRequest)(nil), "modular.metadata.types.GfSpGetUserGroupsRequest")
	proto.RegisterType((*GfSpGetUserGroupsResponse)(nil), "modular.metadata.types.GfSpGetUserGroupsResponse")
	proto.RegisterType((*GfSpGetGroupMembersRequest)(nil), "modular.metadata.types.GfSpGetGroupMembersRequest")
	proto.RegisterType((*GfSpGetGroupMembersResponse)(nil), "modular.metadata.types.GfSpGetGroupMembersResponse")
	proto.RegisterType((*GfSpGetUserOwnedGroupsRequest)(nil), "modular.metadata.types.GfSpGetUserOwnedGroupsRequest")
	proto.RegisterType((*GfSpGetUserOwnedGroupsResponse)(nil), "modular.metadata.types.GfSpGetUserOwnedGroupsResponse")
	proto.RegisterType((*Policy)(nil), "modular.metadata.types.Policy")
	proto.RegisterType((*GfSpListObjectPoliciesRequest)(nil), "modular.metadata.types.GfSpListObjectPoliciesRequest")
	proto.RegisterType((*GfSpListObjectPoliciesResponse)(nil), "modular.metadata.types.GfSpListObjectPoliciesResponse")
	proto.RegisterType((*GfSpListPaymentAccountStreamsRequest)(nil), "modular.metadata.types.GfSpListPaymentAccountStreamsRequest")
	proto.RegisterType((*GfSpListPaymentAccountStreamsResponse)(nil), "modular.metadata.types.GfSpListPaymentAccountStreamsResponse")
	proto.RegisterType((*GfSpListUserPaymentAccountsRequest)(nil), "modular.metadata.types.GfSpListUserPaymentAccountsRequest")
	proto.RegisterType((*GfSpListUserPaymentAccountsResponse)(nil), "modular.metadata.types.GfSpListUserPaymentAccountsResponse")
	proto.RegisterType((*GfSpListGroupsByIDsRequest)(nil), "modular.metadata.types.GfSpListGroupsByIDsRequest")
	proto.RegisterType((*GfSpListGroupsByIDsResponse)(nil), "modular.metadata.types.GfSpListGroupsByIDsResponse")
	proto.RegisterMapType((map[uint64]*Group)(nil), "modular.metadata.types.GfSpListGroupsByIDsResponse.GroupsEntry")
	proto.RegisterType((*GfSpGetSPMigratingBucketNumberRequest)(nil), "modular.metadata.types.GfSpGetSPMigratingBucketNumberRequest")
	proto.RegisterType((*GfSpGetSPMigratingBucketNumberResponse)(nil), "modular.metadata.types.GfSpGetSPMigratingBucketNumberResponse")
	proto.RegisterType((*GfSpVerifyMigrateGVGPermissionRequest)(nil), "modular.metadata.types.GfSpVerifyMigrateGVGPermissionRequest")
	proto.RegisterType((*GfSpVerifyMigrateGVGPermissionResponse)(nil), "modular.metadata.types.GfSpVerifyMigrateGVGPermissionResponse")
	proto.RegisterType((*GfSpGetBucketSizeRequest)(nil), "modular.metadata.types.GfSpGetBucketSizeRequest")
	proto.RegisterType((*GfSpGetBucketSizeResponse)(nil), "modular.metadata.types.GfSpGetBucketSizeResponse")
}

func init() {
	proto.RegisterFile("modular/metadata/types/metadata.proto", fileDescriptor_7cdcff708e247f22)
}

var fileDescriptor_7cdcff708e247f22 = []byte{
	// 5121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7c, 0x5b, 0x6f, 0x1c, 0x47,
	0x76, 0x30, 0x7b, 0x86, 0x97, 0x99, 0x22, 0x87, 0xa4, 0x4a, 0xb2, 0x44, 0x8d, 0x56, 0x94, 0xd4,
	0x92, 0x2c, 0xca, 0xb2, 0x48, 0xeb, 0x6a, 0xcb, 0xb6, 0x2e, 0x24, 0x45, 0xd1, 0x84, 0x57, 0x16,
	0xdd, 0x23, 0xc9, 0xbb, 0xde, 0xcf, 0x5f, 0x6f, 0xcf, 0x74, 0xcd, 0xb0, 0xc3, 0x99, 0xee, 0x76,
	0x57, 0x0f, 0xa5, 0x11, 0xb2, 0xc8, 0x22, 0x37, 0x60, 0x91, 0x00, 0xb9, 0x6f, 0x82, 0x0d, 0xb0,
	0xc0, 0x06, 0x01, 0xf2, 0xb2, 0x09, 0x82, 0x24, 0xc8, 0x53, 0x36, 0xc9, 0xe3, 0x02, 0x79, 0x31,
	0xf2, 0x90, 0x04, 0x41, 0x10, 0x2c, 0xec, 0x9f, 0x90, 0xd7, 0x3c, 0x04, 0x75, 0xeb, 0xae, 0xbe,
	0x0f, 0x87, 0x4c, 0xf2, 0x92, 0x17, 0x69, 0xfa, 0xd4, 0xa9, 0x53, 0x55, 0xe7, 0x56, 0x55, 0xe7,
	0x9c, 0x22, 0xb8, 0xd8, 0x73, 0xcc, 0x7e, 0xd7, 0xf0, 0x56, 0x7a, 0xc8, 0x37, 0x4c, 0xc3, 0x37,
	0x56, 0xfc, 0x81, 0x8b, 0x70, 0xf0, 0xb9, 0xec, 0x7a, 0x8e, 0xef, 0xc0, 0xe3, 0x1c, 0x6d, 0x39,
	0x80, 0x53, 0xb4, 0xfa, 0xb9, 0xa6, 0x81, 0x11, 0xef, 0xd2, 0x69, 0x63, 0x17, 0x79, 0x9e, 0xe3,
	0xe1, 0x15, 0xfa, 0x1f, 0xeb, 0x5a, 0x5f, 0x8c, 0xa1, 0xf8, 0x06, 0xde, 0x5d, 0x21, 0xff, 0xf0,
	0xf6, 0x93, 0x2d, 0x07, 0xf7, 0x1c, 0xac, 0xd3, 0xaf, 0x15, 0xf6, 0xc1, 0x9b, 0x8e, 0x75, 0x9c,
	0x8e, 0xc3, 0xe0, 0xe4, 0x17, 0x87, 0xbe, 0xde, 0xf1, 0x10, 0xb2, 0xdb, 0x16, 0xea, 0x9a, 0x2b,
	0xae, 0x31, 0xe8, 0x21, 0xdb, 0x5f, 0xc1, 0xbe, 0x87, 0x8c, 0x9e, 0xee, 0xa1, 0x96, 0xe3, 0x99,
	0x1c, 0x4f, 0x95, 0xf1, 0x90, 0xd7, 0xb3, 0x30, 0xb6, 0x1c, 0x7b, 0xa5, 0xe5, 0xf4, 0x7a, 0x8e,
	0xcd, 0x71, 0xce, 0x48, 0x38, 0x1e, 0xc2, 0x4e, 0xdf, 0x6b, 0xf1, 0xb9, 0x8a, 0xd9, 0x49, 0x08,
	0xd8, 0x8d, 0x34, 0xc9, 0x7d, 0xb1, 0xef, 0x78, 0x46, 0x07, 0xad, 0xa0, 0x3d, 0x64, 0xfb, 0x02,
	0x61, 0x31, 0x05, 0xe1, 0xf3, 0x3e, 0xf2, 0x06, 0x39, 0xed, 0xf2, 0x00, 0x17, 0xa4, 0xf6, 0x3d,
	0xcb, 0xf3, 0xfb, 0x46, 0xb7, 0xe3, 0x39, 0x7d, 0x37, 0x3a, 0xca, 0xf9, 0x2c, 0x2c, 0x99, 0xd4,
	0x09, 0x42, 0x5f, 0x48, 0x81, 0xfe, 0x66, 0x0d, 0xea, 0x3f, 0x94, 0xc0, 0xe4, 0x5a, 0xbf, 0xb5,
	0x8b, 0x7c, 0x78, 0x1f, 0x4c, 0x37, 0xe9, 0x2f, 0xdd, 0xb2, 0xdb, 0xce, 0x82, 0x72, 0x56, 0x59,
	0x9a, 0xbe, 0xbe, 0xb8, 0x1c, 0x92, 0x5f, 0xe6, 0x93, 0x5c, 0x66, 0x1d, 0xb6, 0xec, 0xb6, 0xa3,
	0x81, 0x66, 0xf0, 0x1b, 0x2e, 0x80, 0x29, 0x0f, 0xf5, 0x9c, 0x3d, 0x64, 0x2e, 0x94, 0xce, 0x2a,
	0x4b, 0x15, 0x4d, 0x7c, 0xc2, 0x53, 0xa0, 0x6a, 0xa2, 0x2e, 0xf2, 0x91, 0x6e, 0xf8, 0x0b, 0xe5,
	0xb3, 0xca, 0x52, 0x59, 0xab, 0x30, 0xc0, 0xaa, 0x0f, 0xcf, 0x83, 0x1a, 0x6f, 0xf4, 0x90, 0x81,
	0x1d, 0x7b, 0x61, 0xfc, 0xac, 0xb2, 0x54, 0xd5, 0x66, 0x18, 0x50, 0xa3, 0x30, 0x58, 0x07, 0x15,
	0xc7, 0x45, 0x9e, 0xe1, 0x3b, 0xde, 0xc2, 0x04, 0x6d, 0x0f, 0xbe, 0xe1, 0x05, 0x30, 0xdb, 0xf2,
	0x90, 0xe1, 0x23, 0xdd, 0x7f, 0xa9, 0xef, 0x18, 0x78, 0x67, 0x61, 0x92, 0x51, 0x60, 0xd0, 0xa7,
	0x2f, 0x3f, 0x30, 0xf0, 0x0e, 0xc1, 0xea, 0xbb, 0xa6, 0x8c, 0x35, 0xc5, 0xb0, 0x18, 0x94, 0x63,
	0x9d, 0x02, 0x55, 0x8e, 0x65, 0xf8, 0x0b, 0x15, 0x36, 0x53, 0x06, 0x58, 0xf5, 0xe1, 0x19, 0x30,
	0x2d, 0x48, 0x58, 0x3d, 0xb4, 0x50, 0xa5, 0xcd, 0x80, 0xf7, 0xb7, 0x7a, 0x48, 0xfd, 0x8f, 0x12,
	0x98, 0x7c, 0xd2, 0xfc, 0x39, 0xd4, 0xa2, 0xdc, 0x74, 0xe8, 0xaf, 0x42, 0x6e, 0xb2, 0x0e, 0x8c,
	0x9b, 0x4e, 0xf0, 0x1b, 0x5e, 0x04, 0xb3, 0x5d, 0xa7, 0xb5, 0x8b, 0x4c, 0xbd, 0x69, 0x74, 0x0d,
	0xbb, 0x85, 0x28, 0x53, 0xab, 0x5a, 0x8d, 0x41, 0xd7, 0x18, 0x50, 0x66, 0x7a, 0x39, 0xc1, 0xf4,
	0x70, 0x29, 0xe3, 0xb1, 0xa5, 0x44, 0x24, 0x32, 0x51, 0x24, 0x91, 0xc9, 0x02, 0x89, 0x4c, 0x15,
	0x4a, 0xa4, 0x32, 0x94, 0x44, 0xaa, 0x29, 0x12, 0x39, 0x0b, 0x66, 0x30, 0x32, 0xba, 0x01, 0x0e,
	0xa0, 0x38, 0x80, 0xc0, 0x18, 0x86, 0xfa, 0xb7, 0x0a, 0xa8, 0x31, 0x26, 0x3e, 0x44, 0xbe, 0x61,
	0x75, 0x31, 0xbc, 0x0d, 0x26, 0x19, 0x27, 0x03, 0xbe, 0xa7, 0xfb, 0x2f, 0xce, 0x7b, 0x8d, 0x63,
	0x93, 0x7e, 0x4c, 0x9f, 0x29, 0xaf, 0x73, 0xfa, 0x31, 0x0b, 0xd0, 0x38, 0x36, 0xbc, 0x0b, 0xca,
	0x9d, 0xbd, 0x0e, 0x15, 0xc0, 0xf4, 0xf5, 0x2b, 0xb2, 0x90, 0x65, 0x8b, 0x5c, 0xde, 0xec, 0x3a,
	0x4d, 0xa3, 0xfb, 0x9c, 0x81, 0x36, 0x09, 0x48, 0x23, 0xfd, 0xd4, 0xdf, 0x2f, 0x83, 0xda, 0xf3,
	0xcd, 0x47, 0x44, 0xec, 0xff, 0x67, 0x8b, 0x87, 0x64, 0x8b, 0x70, 0x1d, 0x94, 0xf7, 0x3a, 0x6d,
	0xaa, 0x2e, 0xd3, 0xd7, 0xaf, 0xed, 0x43, 0x26, 0x8f, 0x8c, 0x9e, 0xd5, 0x1d, 0x68, 0xa4, 0xb7,
	0xfa, 0x43, 0x05, 0xcc, 0x6e, 0xb3, 0x3d, 0x66, 0xb5, 0xd5, 0x72, 0xfa, 0xb6, 0x4f, 0x38, 0x6b,
	0x98, 0xa6, 0x87, 0x30, 0xa6, 0x62, 0xa9, 0x6a, 0xe2, 0x13, 0x1e, 0x03, 0x13, 0xce, 0x0b, 0x1b,
	0x79, 0xdc, 0x50, 0xd9, 0x07, 0x5c, 0x04, 0xc0, 0x43, 0xed, 0xbe, 0x6d, 0x1a, 0xcd, 0x2e, 0xe2,
	0x36, 0x2a, 0x41, 0xf2, 0xcd, 0x34, 0xb6, 0xca, 0x89, 0x84, 0xc7, 0xf9, 0xb1, 0x02, 0x60, 0x74,
	0x82, 0x8f, 0x91, 0x6f, 0xc0, 0x27, 0x60, 0x8e, 0x6f, 0x8d, 0xba, 0xc1, 0xc0, 0x5c, 0x87, 0x5e,
	0xcf, 0xd2, 0xe8, 0x28, 0x11, 0x6d, 0xd6, 0x8d, 0xae, 0x7a, 0x03, 0xd4, 0x22, 0x7b, 0x2c, 0x37,
	0x90, 0xb3, 0x32, 0x5f, 0x79, 0x97, 0xe5, 0x06, 0x45, 0xd4, 0x28, 0x9e, 0x36, 0x83, 0xa5, 0x2f,
	0xb5, 0x05, 0x4e, 0x6e, 0xb6, 0x1b, 0xee, 0x26, 0xf2, 0x9f, 0x61, 0xe4, 0x31, 0xdd, 0xc5, 0x1a,
	0xfa, 0xbc, 0x8f, 0xb0, 0x0f, 0x4f, 0x03, 0xc0, 0x27, 0xab, 0x5b, 0x26, 0x67, 0x6e, 0x95, 0x43,
	0xb6, 0x4c, 0x78, 0x09, 0xcc, 0x59, 0x76, 0xab, 0xdb, 0x37, 0x89, 0x72, 0xca, 0xaa, 0x3d, 0xcb,
	0xc1, 0x1a, 0x83, 0xaa, 0x9f, 0x81, 0x7a, 0xda, 0x20, 0xd8, 0x75, 0x6c, 0x8c, 0xe0, 0x7d, 0x30,
	0xc5, 0xec, 0x84, 0xc8, 0xaf, 0xbc, 0x34, 0x7d, 0xfd, 0x62, 0x16, 0x4b, 0x22, 0x26, 0xa9, 0x89,
	0x5e, 0xea, 0x9f, 0x95, 0x80, 0x4a, 0xe8, 0x7f, 0xdd, 0xc2, 0x3e, 0xf3, 0x1f, 0x78, 0x6d, 0xc0,
	0x90, 0x3e, 0x32, 0x7a, 0x48, 0xac, 0xe6, 0x4c, 0x60, 0xc2, 0xb6, 0xd1, 0x43, 0x7c, 0x39, 0xdc,
	0x44, 0x09, 0x5e, 0x6c, 0xb9, 0xa5, 0xf8, 0x72, 0x4f, 0x82, 0x4a, 0xcf, 0x78, 0xa9, 0xef, 0xa2,
	0x01, 0xa6, 0x5a, 0x33, 0xae, 0x4d, 0xf5, 0x8c, 0x97, 0x1f, 0xa2, 0x01, 0x26, 0xa4, 0xb1, 0x6f,
	0x78, 0xbe, 0x6e, 0xb4, 0x7d, 0xe4, 0x71, 0x1b, 0x05, 0x14, 0xb4, 0x4a, 0x20, 0xf0, 0x2a, 0x80,
	0x2d, 0xc7, 0xf6, 0x2d, 0xbb, 0x6f, 0xf8, 0x96, 0x63, 0xeb, 0xbe, 0xb3, 0x8b, 0x6c, 0x6e, 0xab,
	0x47, 0xe4, 0x96, 0xa7, 0xa4, 0x01, 0x7e, 0x8d, 0xba, 0x04, 0xab, 0x67, 0x11, 0x6a, 0xcc, 0x5e,
	0x43, 0x00, 0x3c, 0x0e, 0x26, 0x5d, 0x0f, 0xb5, 0xad, 0x97, 0xdc, 0x48, 0xf9, 0x57, 0x9a, 0x3c,
	0x2a, 0xa9, 0xf2, 0xf8, 0xdd, 0x32, 0x38, 0x9f, 0xcb, 0x30, 0x2e, 0x99, 0x77, 0xc0, 0x14, 0xf3,
	0xc3, 0x42, 0x32, 0x45, 0x6e, 0x5b, 0xa0, 0x13, 0x1b, 0xda, 0x45, 0x03, 0x9d, 0x29, 0x7a, 0x89,
	0x32, 0xab, 0xb2, 0x8b, 0x06, 0xeb, 0x54, 0x75, 0x73, 0x18, 0x79, 0x0e, 0xcc, 0x58, 0x58, 0xf7,
	0xbd, 0xbe, 0xdd, 0x32, 0x7c, 0x64, 0x52, 0x4e, 0x56, 0xb4, 0x69, 0x0b, 0x3f, 0x15, 0x20, 0x78,
	0x1b, 0x9c, 0xb0, 0xd1, 0x4b, 0x5f, 0xcf, 0xe4, 0xe7, 0x6b, 0xa4, 0x79, 0x3d, 0xc1, 0x53, 0x08,
	0xc6, 0xa9, 0xdc, 0x19, 0x3b, 0xe9, 0xef, 0x4c, 0x4e, 0x46, 0xf8, 0x5f, 0x89, 0xf3, 0xff, 0x12,
	0x98, 0x63, 0x67, 0x56, 0x9d, 0xa1, 0x23, 0xbc, 0x50, 0x3d, 0x5b, 0x5e, 0xaa, 0x6a, 0xb3, 0x0c,
	0xbc, 0xcd, 0xa1, 0x19, 0x52, 0x07, 0x19, 0x52, 0x57, 0xbb, 0xe0, 0x2c, 0x37, 0x13, 0x26, 0x8b,
	0x91, 0x94, 0x58, 0x52, 0x02, 0xd7, 0xb3, 0xf6, 0x0c, 0x1f, 0xc5, 0x8c, 0x72, 0x9b, 0x41, 0xd5,
	0x6f, 0x81, 0x73, 0x39, 0xa3, 0x71, 0x0d, 0x08, 0xf7, 0x5f, 0x65, 0x3f, 0xfb, 0xaf, 0xda, 0x06,
	0x8b, 0xa9, 0xc4, 0xb7, 0x1e, 0x8a, 0x85, 0x9c, 0x02, 0x55, 0xb1, 0xa1, 0x32, 0xd7, 0x52, 0xd6,
	0x2a, 0x7c, 0xbb, 0x34, 0x87, 0x5f, 0xc4, 0x37, 0xc1, 0x99, 0xcc, 0x71, 0x0e, 0xb8, 0x84, 0xbf,
	0x50, 0xc0, 0x8a, 0x30, 0x92, 0x87, 0x74, 0xb7, 0x35, 0x43, 0x5b, 0x21, 0x47, 0xbe, 0x8f, 0xfa,
	0xbd, 0x26, 0xf2, 0x34, 0xc3, 0xee, 0x04, 0xd2, 0x79, 0x13, 0x40, 0xe6, 0x07, 0x9a, 0x04, 0x41,
	0xb7, 0x29, 0x06, 0x5f, 0xdd, 0x3c, 0x6d, 0x91, 0x7a, 0xc2, 0x25, 0x30, 0x8f, 0x6c, 0x33, 0x8a,
	0x5b, 0xa2, 0xb8, 0xb3, 0xc8, 0x36, 0x65, 0xcc, 0x14, 0x7e, 0x94, 0x53, 0xf9, 0xf1, 0x7d, 0x05,
	0xbc, 0x35, 0xfc, 0xa4, 0x0f, 0x6c, 0xe6, 0x43, 0xaf, 0x40, 0xdd, 0x09, 0x14, 0x42, 0xda, 0x02,
	0xa8, 0x3b, 0x38, 0xec, 0xcd, 0xe6, 0xed, 0x40, 0x25, 0x92, 0x23, 0xf1, 0x05, 0x1f, 0x03, 0x13,
	0xe1, 0x16, 0x5c, 0xd6, 0xd8, 0x87, 0xfa, 0x8a, 0x19, 0x04, 0x61, 0xdd, 0xc6, 0x4b, 0xd7, 0xf2,
	0x90, 0xc9, 0x3b, 0xaf, 0x0d, 0x1a, 0xae, 0xa4, 0xb6, 0xfc, 0x38, 0x65, 0x88, 0xee, 0x15, 0x06,
	0x58, 0xf5, 0xa1, 0x0a, 0x6a, 0xae, 0x67, 0xf5, 0x0c, 0x6f, 0xa0, 0x63, 0x57, 0xec, 0x21, 0x35,
	0x6d, 0x9a, 0x03, 0x1b, 0xee, 0x96, 0x49, 0xc6, 0xa6, 0x7e, 0x84, 0x9f, 0xf4, 0xd8, 0x87, 0xfa,
	0xff, 0xc3, 0x1d, 0x2c, 0x6d, 0xec, 0x50, 0x50, 0xd1, 0x9d, 0xb2, 0x48, 0x97, 0x83, 0x2d, 0xf2,
	0x57, 0x14, 0xb0, 0xc0, 0xb9, 0xc2, 0x64, 0x48, 0x0e, 0x25, 0x92, 0x4f, 0xe1, 0x37, 0x23, 0xd9,
	0xa7, 0x30, 0x10, 0xf5, 0x29, 0x31, 0xa7, 0x53, 0x1a, 0xc6, 0xe9, 0xa4, 0xeb, 0x67, 0x23, 0x38,
	0x6e, 0xc8, 0xd3, 0x08, 0x2d, 0x75, 0x94, 0x4b, 0x82, 0xda, 0x0b, 0x3c, 0x19, 0x3f, 0x33, 0xfd,
	0xf7, 0x3a, 0xce, 0x5d, 0x26, 0xab, 0xac, 0xe1, 0xf8, 0x62, 0x12, 0xe7, 0x33, 0x65, 0xa4, 0xf3,
	0x59, 0x27, 0xd0, 0xe6, 0xd8, 0x60, 0x87, 0xed, 0x49, 0xad, 0x60, 0xf3, 0x49, 0x19, 0xe8, 0x70,
	0xd7, 0x64, 0x06, 0xba, 0xc8, 0x46, 0x88, 0xe9, 0xe2, 0x21, 0x89, 0xe9, 0x47, 0x4a, 0xa0, 0x6b,
	0xf2, 0x30, 0x7c, 0x29, 0x77, 0x63, 0xbb, 0xc2, 0x90, 0x67, 0x4e, 0x71, 0xbf, 0x3c, 0xa4, 0xd3,
	0xf7, 0x0d, 0xf0, 0x35, 0x3e, 0xc5, 0x0d, 0xdb, 0x74, 0x1d, 0x8b, 0x70, 0xbd, 0xe1, 0x86, 0xa2,
	0x3d, 0x0a, 0x26, 0x98, 0x23, 0x51, 0xa8, 0x23, 0x19, 0xc7, 0xee, 0x96, 0xa9, 0xbe, 0x07, 0x4e,
	0x67, 0x74, 0xe2, 0x6b, 0xab, 0x83, 0x0a, 0xe2, 0x2d, 0x9c, 0x81, 0xc1, 0xb7, 0xfa, 0x0b, 0x41,
	0x67, 0xbe, 0x22, 0x64, 0x98, 0x1f, 0xf7, 0x9d, 0x50, 0x00, 0x07, 0xbe, 0xe8, 0x9e, 0x06, 0x60,
	0x80, 0x0c, 0x4f, 0xef, 0x39, 0xb6, 0xbf, 0x23, 0x4e, 0xd1, 0x04, 0xf2, 0x98, 0x00, 0xd4, 0x5f,
	0x2b, 0xc5, 0x8e, 0x06, 0xd2, 0x0c, 0xf8, 0xfc, 0xaf, 0x83, 0x32, 0xf2, 0xbc, 0x40, 0xb9, 0x9a,
	0x06, 0x46, 0x5c, 0x18, 0x61, 0x44, 0x73, 0x99, 0xd0, 0xd8, 0x20, 0x3f, 0x35, 0x82, 0x4c, 0x76,
	0xde, 0xd6, 0x8e, 0xe1, 0x75, 0x90, 0xa9, 0x7f, 0x4e, 0x88, 0xe9, 0xd8, 0x7a, 0x85, 0xf8, 0xc9,
	0x73, 0x9e, 0xb7, 0xd0, 0x51, 0x1a, 0xd6, 0x2b, 0x04, 0xaf, 0x00, 0x88, 0x5d, 0xbd, 0xed, 0x21,
	0x24, 0x63, 0xb3, 0xb3, 0xe8, 0x1c, 0x76, 0x1f, 0x79, 0x08, 0x85, 0xc8, 0xe7, 0x41, 0xad, 0xe5,
	0xd8, 0xb8, 0xdf, 0x43, 0x26, 0xc3, 0x1b, 0xa7, 0x78, 0x33, 0x02, 0x48, 0x91, 0x6e, 0x81, 0x13,
	0x12, 0x39, 0xde, 0xc4, 0xd0, 0x27, 0x28, 0xfa, 0xb1, 0xb6, 0x20, 0xba, 0xce, 0x1a, 0x49, 0x37,
	0x75, 0x8d, 0x1d, 0xc4, 0x37, 0x91, 0xff, 0x75, 0xc3, 0x47, 0x38, 0x4b, 0x28, 0x09, 0x13, 0x1f,
	0x0f, 0x4d, 0x5c, 0xfd, 0x81, 0x02, 0x2e, 0xe4, 0x13, 0x39, 0x00, 0x5f, 0xef, 0x81, 0x09, 0xba,
	0x24, 0xae, 0xe0, 0x4b, 0xf1, 0x5e, 0x34, 0x6e, 0x4c, 0xfa, 0xb0, 0x41, 0xe9, 0x80, 0x54, 0x25,
	0x58, 0x37, 0xf5, 0x67, 0x0a, 0x73, 0x60, 0x64, 0x67, 0x0b, 0xe7, 0xc5, 0x8d, 0xe1, 0xb0, 0x54,
	0x2e, 0x38, 0x76, 0x91, 0x3b, 0x39, 0xf6, 0x8d, 0x9e, 0xab, 0xf7, 0x31, 0x3f, 0x88, 0xb0, 0x63,
	0xd7, 0x53, 0xd1, 0xf0, 0x2c, 0x38, 0xb4, 0x44, 0x70, 0xcb, 0xc1, 0xa1, 0x45, 0xc6, 0xbc, 0x00,
	0x66, 0xc9, 0x45, 0x85, 0x99, 0x38, 0x39, 0xdf, 0xf0, 0x70, 0xc0, 0x4c, 0xcf, 0x78, 0xc9, 0x96,
	0xf0, 0x51, 0xbf, 0xa7, 0xfe, 0xa5, 0x02, 0x40, 0xb8, 0xa8, 0xe2, 0xdd, 0xf4, 0x14, 0xa8, 0x8a,
	0x40, 0xa4, 0x29, 0xee, 0x46, 0x3c, 0xcc, 0x48, 0xfd, 0xb5, 0x38, 0x05, 0x89, 0xa0, 0x46, 0x99,
	0x52, 0x98, 0xe5, 0xe0, 0x55, 0x1e, 0xdb, 0x38, 0x07, 0x66, 0x22, 0x2b, 0x60, 0x33, 0x9b, 0xf6,
	0xa5, 0xe9, 0x9f, 0x02, 0x55, 0x0f, 0x19, 0xa6, 0xac, 0x85, 0x15, 0x02, 0xa0, 0x9a, 0xf7, 0xaf,
	0x0a, 0x73, 0xf8, 0xe9, 0x82, 0x39, 0x80, 0xc6, 0x7c, 0x08, 0x66, 0xe8, 0xa8, 0x8c, 0x6b, 0x44,
	0x0c, 0xe4, 0xa4, 0xa2, 0x66, 0xf9, 0xd7, 0x70, 0xd4, 0xb5, 0xf1, 0x9f, 0xfe, 0xfb, 0x19, 0x45,
	0x9b, 0xf6, 0x02, 0x08, 0x26, 0x66, 0x45, 0x2f, 0x7b, 0x29, 0xe2, 0x65, 0x22, 0x3b, 0x46, 0x9a,
	0x1b, 0x31, 0x11, 0xab, 0x77, 0x99, 0x8f, 0xf9, 0xb8, 0x8f, 0xbc, 0xc1, 0x33, 0xb7, 0xeb, 0x18,
	0xe6, 0xb6, 0xe7, 0x74, 0x08, 0xdf, 0x24, 0x8b, 0x0a, 0x85, 0xa0, 0x44, 0x85, 0xa0, 0xfe, 0x98,
	0x2b, 0x6d, 0x6a, 0xff, 0x03, 0x39, 0xa9, 0x09, 0xec, 0x8b, 0x1d, 0x6b, 0xf6, 0xfa, 0xf1, 0x65,
	0x16, 0xf8, 0x67, 0xdd, 0x9e, 0x1a, 0x78, 0xb7, 0x41, 0x5a, 0x35, 0x86, 0x44, 0x54, 0x01, 0x79,
	0x9e, 0x6e, 0x22, 0xdc, 0xf2, 0x2c, 0x97, 0x5c, 0x13, 0x85, 0x2a, 0x20, 0xcf, 0x7b, 0x18, 0x42,
	0xd5, 0x0d, 0xf0, 0x7a, 0x30, 0x5b, 0x0d, 0xe1, 0x7e, 0xcf, 0x68, 0x76, 0x11, 0x9b, 0x76, 0x03,
	0x75, 0xc8, 0x1e, 0x34, 0xd4, 0xaa, 0x7f, 0x51, 0x01, 0x97, 0x0a, 0xe9, 0x1c, 0x60, 0xf5, 0xe7,
	0x41, 0x0d, 0x33, 0x32, 0x52, 0x5c, 0xa0, 0xa6, 0xcd, 0x70, 0x20, 0x3d, 0xa2, 0xab, 0x3f, 0x28,
	0x81, 0x09, 0x1a, 0xf4, 0x83, 0x37, 0xc0, 0x04, 0x0d, 0x08, 0xf2, 0x41, 0x4e, 0xa7, 0xf9, 0x03,
	0x8a, 0xc9, 0xdc, 0x0d, 0xc5, 0x8d, 0x44, 0x42, 0x4b, 0xb1, 0x48, 0x68, 0xe4, 0xe8, 0x5e, 0x8e,
	0x1d, 0xdd, 0xcf, 0x80, 0x69, 0x11, 0x26, 0xb5, 0x7a, 0x88, 0x5b, 0x13, 0xe0, 0x31, 0x52, 0xab,
	0x17, 0x8b, 0x0a, 0x4e, 0xe4, 0x47, 0x05, 0x27, 0x13, 0xb1, 0xcf, 0x37, 0xc0, 0x11, 0x76, 0x3d,
	0xd2, 0x9d, 0xb6, 0xde, 0x43, 0xe4, 0x17, 0xa6, 0x31, 0x87, 0xb2, 0x36, 0xc7, 0x1a, 0x9e, 0xb4,
	0x1f, 0x33, 0xb0, 0x1c, 0x29, 0xae, 0x44, 0x22, 0xc5, 0xea, 0xdf, 0x94, 0xc0, 0x34, 0x5d, 0x32,
	0x43, 0x1d, 0x8d, 0x45, 0x05, 0x51, 0x2e, 0x99, 0x83, 0xe5, 0x3c, 0x0e, 0x8e, 0xe7, 0x73, 0x70,
	0x22, 0x9f, 0x83, 0x93, 0xf9, 0x1c, 0x9c, 0x4a, 0x70, 0x30, 0x93, 0x2b, 0xd4, 0x4e, 0xc8, 0x9d,
	0x89, 0xc7, 0x58, 0xc2, 0xe0, 0xf3, 0x6c, 0x08, 0xa6, 0xa1, 0xd9, 0x9f, 0x28, 0xe0, 0x04, 0xdf,
	0x28, 0x29, 0x57, 0x88, 0xeb, 0x13, 0x96, 0x21, 0xa2, 0x43, 0x4a, 0x6a, 0x74, 0xa8, 0x14, 0x89,
	0x0e, 0x9d, 0x01, 0xd3, 0x2c, 0x31, 0xa9, 0x13, 0x95, 0xe7, 0x5c, 0x02, 0x0c, 0xf4, 0x74, 0xe0,
	0xa2, 0xf0, 0x8e, 0x37, 0x2e, 0xdd, 0xf1, 0x08, 0x39, 0xa7, 0xdd, 0xc6, 0x48, 0xa8, 0x0f, 0xff,
	0x4a, 0xbb, 0xd9, 0x4e, 0xa6, 0xde, 0x6c, 0x3b, 0xc1, 0xb9, 0x59, 0x9a, 0x3e, 0x37, 0xc8, 0x5b,
	0x60, 0x92, 0x8a, 0x57, 0xdc, 0x0c, 0x4f, 0x67, 0xf9, 0x5b, 0x96, 0xe5, 0xe0, 0xc8, 0xe1, 0x4d,
	0xb8, 0x24, 0xdf, 0x84, 0x11, 0x38, 0x15, 0xdd, 0x1a, 0xf0, 0xda, 0x60, 0xeb, 0xa1, 0x1c, 0x16,
	0x0e, 0x4e, 0x23, 0x6c, 0xbc, 0x71, 0xad, 0x2a, 0x8e, 0x23, 0x78, 0xf8, 0x9b, 0xfa, 0x3f, 0x2b,
	0xec, 0xf8, 0x9b, 0x1c, 0x87, 0x2f, 0xea, 0x5b, 0xf1, 0xfb, 0xee, 0x6a, 0xe6, 0xaa, 0x72, 0xc8,
	0xf0, 0x53, 0x03, 0xde, 0xb0, 0x7d, 0x6f, 0x10, 0x5c, 0x89, 0xeb, 0x9f, 0x82, 0x19, 0xb9, 0x01,
	0xce, 0x83, 0xf2, 0x2e, 0x1a, 0x70, 0xaf, 0x48, 0x7e, 0xc2, 0x9b, 0x60, 0x62, 0xcf, 0xe8, 0xf6,
	0xd1, 0x90, 0xb9, 0x27, 0x86, 0xfc, 0x6e, 0xe9, 0x1d, 0x45, 0x66, 0x60, 0x10, 0x7e, 0x89, 0x32,
	0x30, 0x70, 0xc3, 0x01, 0x03, 0x85, 0x1f, 0x1e, 0x91, 0x81, 0xd1, 0x71, 0x42, 0x06, 0x46, 0x23,
	0x3b, 0x85, 0x0c, 0x4c, 0x23, 0xc3, 0xef, 0xdb, 0x82, 0x81, 0x9c, 0x22, 0x61, 0xa0, 0xdc, 0x70,
	0x00, 0x06, 0xf2, 0xfb, 0xbc, 0xc4, 0xc0, 0x5f, 0x2e, 0xb1, 0x1d, 0xf8, 0x39, 0xf2, 0xac, 0xf6,
	0x60, 0x3b, 0x28, 0x16, 0x20, 0xf3, 0x12, 0x5c, 0xbc, 0x29, 0x79, 0x2a, 0x6a, 0xb6, 0x6b, 0x0b,
	0xff, 0xf8, 0x57, 0x57, 0x8f, 0xf1, 0x82, 0x05, 0x7e, 0x4e, 0x6a, 0xf8, 0x9e, 0x65, 0x77, 0x24,
	0x1f, 0xf6, 0x08, 0xd4, 0x44, 0x5d, 0x01, 0x33, 0x5f, 0xb6, 0x17, 0x9f, 0x93, 0x7d, 0xa7, 0x40,
	0x58, 0xd6, 0x50, 0x68, 0xd5, 0xda, 0x8c, 0x27, 0x7d, 0x11, 0x27, 0x10, 0xd0, 0xb1, 0x4c, 0x7e,
	0x77, 0x00, 0x02, 0xb4, 0x65, 0xc2, 0x35, 0x30, 0x6d, 0xb4, 0x98, 0x4b, 0x22, 0xc3, 0x8c, 0x27,
	0x87, 0x09, 0x6b, 0x20, 0x96, 0x57, 0x29, 0x26, 0x1d, 0x06, 0x18, 0xc1, 0x6f, 0xf5, 0x9b, 0xec,
	0x8c, 0x96, 0xce, 0x85, 0xd0, 0xf2, 0x51, 0xbb, 0x2d, 0xa2, 0x26, 0xb3, 0xd1, 0x5d, 0x40, 0x1a,
	0x62, 0x83, 0x22, 0x69, 0x1c, 0x59, 0x7d, 0x00, 0x2e, 0x0b, 0x99, 0x27, 0x72, 0x6d, 0x16, 0xc2,
	0x43, 0xdc, 0x43, 0xff, 0x48, 0x01, 0x6f, 0x0c, 0x43, 0x82, 0xcf, 0xd3, 0x07, 0xa7, 0x3b, 0x34,
	0xb5, 0xa7, 0xf3, 0x74, 0x9f, 0x4e, 0x7d, 0x90, 0xde, 0xe6, 0xe8, 0x5c, 0x43, 0x47, 0x48, 0x0c,
	0xd6, 0x3b, 0xe9, 0x2d, 0x16, 0xc2, 0xea, 0x03, 0x76, 0xa6, 0x21, 0x3e, 0x33, 0x81, 0xb4, 0x36,
	0xd8, 0xdc, 0xeb, 0x84, 0x8b, 0x7c, 0x0d, 0x4c, 0x76, 0xf6, 0x3a, 0xe1, 0x2a, 0x27, 0x3a, 0x7b,
	0x9d, 0x2d, 0x53, 0xfd, 0x9e, 0x02, 0x96, 0x8a, 0x49, 0xf0, 0x45, 0x7e, 0x06, 0x8e, 0xa5, 0x2d,
	0x92, 0x6f, 0xd0, 0xfb, 0x4a, 0x44, 0xc3, 0xe4, 0xaa, 0xd4, 0x3b, 0x41, 0x90, 0x26, 0x85, 0x0d,
	0xe1, 0x32, 0xf6, 0x3a, 0x6d, 0x69, 0x19, 0x7b, 0x9d, 0xf6, 0x96, 0xa9, 0xee, 0x04, 0x41, 0xb2,
	0xb4, 0xae, 0x7c, 0xfa, 0x3c, 0x45, 0xab, 0x1c, 0x28, 0x45, 0xfb, 0x3c, 0x98, 0x64, 0xca, 0xaa,
	0x86, 0xb8, 0xd0, 0x92, 0x15, 0x74, 0x99, 0x20, 0xd8, 0x09, 0x71, 0xa2, 0x4b, 0x05, 0xd1, 0x0c,
	0x56, 0x90, 0x46, 0x37, 0x88, 0xeb, 0xd0, 0xc4, 0xbf, 0x32, 0x62, 0xe2, 0x7f, 0x37, 0xe1, 0xb8,
	0xb7, 0xec, 0xcd, 0xe7, 0x9b, 0xf9, 0x2a, 0x12, 0x4f, 0xff, 0x71, 0x5f, 0x20, 0xa5, 0xff, 0x22,
	0x07, 0x82, 0x9a, 0x08, 0xfa, 0xea, 0x09, 0xef, 0xcd, 0x07, 0x0b, 0x13, 0xa3, 0x51, 0xef, 0x7d,
	0x31, 0xdf, 0x81, 0xf2, 0x62, 0x8b, 0xc0, 0x43, 0xab, 0xbf, 0xc5, 0x23, 0x03, 0xf1, 0x11, 0x56,
	0x6d, 0x53, 0x5c, 0xf9, 0x72, 0xd7, 0x15, 0x91, 0x52, 0x29, 0x26, 0xa5, 0x11, 0x17, 0xbd, 0x03,
	0x2e, 0x16, 0x4c, 0xe9, 0xb0, 0x56, 0xff, 0x7d, 0x25, 0x74, 0x71, 0xc1, 0xb6, 0x26, 0x0f, 0xf5,
	0xc8, 0xf1, 0x36, 0xd7, 0xff, 0x17, 0x58, 0xd0, 0x0b, 0xfd, 0x66, 0xde, 0xbc, 0x0e, 0x8b, 0x0f,
	0x4f, 0xc3, 0xdc, 0xc2, 0x63, 0xab, 0xe3, 0x19, 0x3e, 0x62, 0xc3, 0x6c, 0xd0, 0xa2, 0x35, 0xb1,
	0xfe, 0x93, 0xa0, 0xc2, 0xd2, 0x38, 0x81, 0x41, 0x4e, 0xd1, 0xef, 0x2d, 0x33, 0xf4, 0xfe, 0x25,
	0xc9, 0xfb, 0xff, 0x53, 0x09, 0x9c, 0xc8, 0x20, 0x09, 0xef, 0x81, 0x09, 0x5a, 0x11, 0xc7, 0xcd,
	0x70, 0x29, 0xed, 0x5e, 0x42, 0x51, 0x59, 0x67, 0xb2, 0xa3, 0xf1, 0x23, 0x14, 0xed, 0x06, 0x3f,
	0x06, 0x33, 0x2d, 0xc3, 0x6e, 0xa1, 0xae, 0xce, 0xc8, 0xb0, 0xe3, 0xc3, 0x72, 0x26, 0x99, 0x75,
	0x8a, 0x1c, 0x27, 0x36, 0xcd, 0x68, 0x50, 0x0c, 0xf8, 0x09, 0x98, 0x6d, 0x39, 0x3d, 0x97, 0x56,
	0xd2, 0x30, 0xa2, 0xac, 0x36, 0xe8, 0xad, 0x6c, 0xa2, 0x1c, 0x3d, 0x4e, 0xb6, 0x26, 0xe8, 0x30,
	0xc2, 0x4f, 0xc0, 0x8c, 0x87, 0xe8, 0x59, 0x8e, 0x91, 0x1d, 0xa7, 0x64, 0xdf, 0xcc, 0x24, 0xab,
	0x51, 0xe4, 0x08, 0xd7, 0xb4, 0x69, 0x46, 0x81, 0xb6, 0xab, 0x76, 0x98, 0x9b, 0x4f, 0x15, 0x17,
	0x57, 0x8b, 0x4d, 0x30, 0xc9, 0xaa, 0x0e, 0xb9, 0x56, 0xac, 0x64, 0x69, 0x45, 0x16, 0x21, 0xde,
	0x5d, 0xfd, 0x28, 0xf4, 0x42, 0x8d, 0x17, 0x86, 0xfb, 0xa4, 0x7f, 0x40, 0xc5, 0xf8, 0x4f, 0x05,
	0x1c, 0x49, 0x10, 0x83, 0x77, 0xa5, 0xe9, 0xb2, 0x78, 0x7b, 0x96, 0x6b, 0xa6, 0x1d, 0x78, 0x67,
	0x31, 0x49, 0xb8, 0x0d, 0x6a, 0xb2, 0x46, 0x60, 0xae, 0x12, 0x57, 0xf2, 0xa9, 0x30, 0xbd, 0x10,
	0xb4, 0x66, 0x24, 0x7d, 0xc0, 0xf0, 0x39, 0x4d, 0xe2, 0x4b, 0x0a, 0x81, 0xb9, 0x46, 0x5c, 0x2d,
	0xa0, 0xc9, 0x3b, 0x09, 0xaa, 0xb3, 0x11, 0x75, 0xc0, 0x6a, 0x93, 0x05, 0xd8, 0x53, 0xd8, 0xc9,
	0x05, 0xb7, 0x1a, 0x13, 0xdc, 0xe5, 0x3c, 0xc1, 0x45, 0x49, 0x08, 0x91, 0x3d, 0x0a, 0x33, 0xd3,
	0xc9, 0x8d, 0x8c, 0x9c, 0xbb, 0x50, 0xcb, 0xb1, 0x4d, 0xc3, 0x1b, 0x34, 0xb6, 0x73, 0x4f, 0x70,
	0x2f, 0xc2, 0x64, 0x71, 0x31, 0x9d, 0xe0, 0x88, 0x10, 0xbd, 0x68, 0xee, 0x6b, 0x8f, 0xe5, 0x5d,
	0xd5, 0xad, 0xd0, 0x03, 0xa6, 0x0e, 0x1c, 0xdd, 0x9d, 0x72, 0xa3, 0xdf, 0x1e, 0xb8, 0x32, 0x14,
	0xa9, 0xc3, 0x9c, 0xfe, 0xe3, 0xf0, 0x94, 0xd0, 0x70, 0x37, 0x5e, 0x5a, 0x07, 0xb4, 0x98, 0x9f,
	0x28, 0x60, 0x3e, 0x4e, 0x0b, 0x6e, 0x46, 0x7d, 0xe8, 0xb5, 0x02, 0x7b, 0x61, 0x2e, 0x66, 0xdb,
	0x73, 0xf6, 0x2c, 0x13, 0x79, 0x84, 0x8e, 0x70, 0xa6, 0xdf, 0x4e, 0x78, 0x3e, 0x66, 0x3b, 0x77,
	0x86, 0xd4, 0xf3, 0x14, 0xca, 0x51, 0x17, 0xa8, 0x7e, 0x5b, 0xf2, 0x20, 0x11, 0x76, 0x70, 0x9e,
	0x3f, 0x88, 0xd9, 0xfe, 0x52, 0xae, 0xc6, 0xcb, 0x14, 0x84, 0xc2, 0xaf, 0x82, 0x63, 0xfc, 0xe8,
	0xd7, 0xd8, 0xa6, 0xb1, 0x2c, 0xce, 0xe9, 0xcb, 0x60, 0x5e, 0x5c, 0xec, 0xf4, 0x68, 0x0d, 0xe0,
	0x9c, 0x80, 0xf3, 0x7b, 0xa0, 0xda, 0x04, 0xaf, 0xc5, 0x48, 0xf0, 0xd9, 0x6d, 0x81, 0x79, 0xee,
	0xa0, 0x75, 0x97, 0x2f, 0x32, 0x35, 0x05, 0xe1, 0x2e, 0xc7, 0x58, 0xa1, 0xcd, 0xe1, 0x28, 0x40,
	0xfd, 0x6e, 0x09, 0x4c, 0x36, 0x7c, 0xc3, 0xef, 0x63, 0xa8, 0x83, 0xd7, 0xe2, 0x54, 0xe5, 0xec,
	0xc6, 0x95, 0x2c, 0x16, 0xc4, 0xc6, 0xa0, 0x33, 0x3d, 0x8a, 0x93, 0x40, 0xd8, 0x00, 0x47, 0x98,
	0x92, 0xe1, 0x81, 0xdd, 0x12, 0xc4, 0x99, 0x64, 0x2f, 0x65, 0x06, 0x2a, 0x48, 0x87, 0x06, 0xc5,
	0xa7, 0x84, 0xe7, 0x9a, 0x51, 0x00, 0x7c, 0x00, 0x40, 0x6b, 0xc7, 0xb0, 0x6c, 0x46, 0x8d, 0xf9,
	0xc3, 0x73, 0x59, 0xd4, 0xd6, 0x09, 0x26, 0xa5, 0x53, 0x6d, 0x89, 0x9f, 0xea, 0xef, 0x94, 0xc1,
	0x5c, 0x6c, 0x18, 0xf8, 0x3a, 0x98, 0x6b, 0x62, 0x5e, 0x24, 0xb2, 0x83, 0xac, 0xce, 0x8e, 0xa8,
	0x9c, 0xa8, 0x35, 0x31, 0xc5, 0xfd, 0x80, 0x02, 0xa1, 0x0a, 0x6a, 0x21, 0x9e, 0x81, 0x45, 0xf2,
	0x70, 0x5a, 0x60, 0xf1, 0x42, 0xd5, 0x26, 0xd6, 0xe5, 0x50, 0x21, 0x8b, 0xe4, 0xce, 0x34, 0xf1,
	0xb3, 0x30, 0x58, 0xb8, 0x04, 0xe6, 0x9b, 0x58, 0xef, 0x0d, 0xf0, 0xe7, 0x5d, 0x7d, 0x0f, 0x79,
	0xe4, 0xfe, 0xcb, 0x8b, 0xf2, 0x66, 0x9b, 0xf8, 0x31, 0x01, 0x3f, 0x67, 0x50, 0xf8, 0x00, 0x9c,
	0x6e, 0x62, 0xdd, 0x44, 0x6d, 0xa3, 0xdf, 0xf5, 0xf5, 0xd6, 0x8e, 0xe1, 0x19, 0x2d, 0x1f, 0x79,
	0x3a, 0x16, 0x19, 0x68, 0x56, 0x53, 0x76, 0xb2, 0x89, 0x1f, 0x32, 0x9c, 0x75, 0x81, 0xd2, 0xe0,
	0x09, 0xe9, 0x3b, 0xe0, 0xa4, 0x4c, 0xc1, 0xe9, 0x76, 0x59, 0x20, 0x52, 0x2a, 0x36, 0x3b, 0x1e,
	0xf6, 0x16, 0xcd, 0xa2, 0xe0, 0x90, 0x4c, 0x93, 0xb0, 0x17, 0xe1, 0x85, 0x29, 0x5a, 0x43, 0x56,
	0x6d, 0xe2, 0xc7, 0x0c, 0xc0, 0x9b, 0x5f, 0x38, 0xde, 0x2e, 0xf2, 0x30, 0x8d, 0x7a, 0xd6, 0x48,
	0xf3, 0x27, 0x0c, 0x00, 0x2f, 0x83, 0x23, 0x4d, 0xac, 0x23, 0xdb, 0x68, 0x76, 0x91, 0x6e, 0x92,
	0xbb, 0xa6, 0xd9, 0xa4, 0x91, 0xcf, 0x0a, 0x59, 0xe5, 0x06, 0x85, 0x3f, 0xec, 0x1b, 0xdd, 0x87,
	0x4d, 0xf5, 0x43, 0x50, 0x0d, 0xa4, 0x45, 0xdc, 0x13, 0x17, 0xb2, 0x28, 0xb3, 0x99, 0x62, 0xf2,
	0x33, 0x69, 0xaa, 0x93, 0x36, 0x09, 0x63, 0x2a, 0xd1, 0x39, 0xcd, 0x50, 0xa0, 0xb0, 0xa4, 0xbf,
	0x2e, 0x81, 0xa3, 0x29, 0x6a, 0x4a, 0xc4, 0x8c, 0x5d, 0xbd, 0xe5, 0x98, 0x28, 0xe0, 0x39, 0x23,
	0x5f, 0xc3, 0xee, 0xba, 0x63, 0x22, 0xc1, 0xf2, 0x0b, 0x60, 0x56, 0xe0, 0xb5, 0x9c, 0x1e, 0x39,
	0x1d, 0x33, 0x39, 0xcf, 0x30, 0xb4, 0x75, 0x0a, 0x83, 0x97, 0x28, 0x35, 0xc3, 0x6b, 0xed, 0x58,
	0x3e, 0x6a, 0xf9, 0x7d, 0x4f, 0x04, 0x5a, 0x67, 0xb1, 0xbb, 0x2a, 0x41, 0x89, 0xd6, 0x60, 0x57,
	0xef, 0x38, 0x31, 0x41, 0x4f, 0x63, 0x77, 0xd3, 0x11, 0x43, 0x2e, 0x83, 0xa3, 0xd8, 0xd5, 0x99,
	0x4b, 0xb0, 0xec, 0x8e, 0x8e, 0x07, 0xd8, 0x47, 0x3d, 0x51, 0x7f, 0x89, 0xdd, 0x27, 0xa2, 0xa5,
	0x41, 0x1b, 0x22, 0xf8, 0x92, 0x6b, 0x99, 0x8c, 0xe2, 0x07, 0xce, 0x85, 0x2f, 0xc9, 0x74, 0x7a,
	0x84, 0x77, 0x54, 0xf0, 0x53, 0x62, 0x49, 0x0f, 0x29, 0x90, 0x88, 0x5b, 0x3d, 0x1e, 0x7a, 0x31,
	0xea, 0x24, 0xb8, 0x17, 0x53, 0x9f, 0x84, 0xae, 0x89, 0xc3, 0xc3, 0x82, 0x18, 0x4c, 0x21, 0x45,
	0x05, 0x31, 0xbc, 0x1f, 0xc7, 0x56, 0xdd, 0x20, 0x50, 0xfc, 0x0c, 0x23, 0x8f, 0xed, 0x84, 0x43,
	0x96, 0x59, 0x05, 0x37, 0x96, 0x92, 0x74, 0x63, 0x29, 0xbc, 0xe8, 0xa8, 0xdf, 0x88, 0x94, 0x11,
	0x8b, 0x11, 0xf9, 0x32, 0xde, 0x8b, 0xed, 0xb9, 0xe7, 0x73, 0x63, 0xd3, 0x2c, 0xb7, 0x11, 0xec,
	0xb5, 0x76, 0x50, 0x3b, 0x2c, 0xb5, 0xca, 0x5b, 0x2d, 0x8b, 0x22, 0x85, 0x5b, 0x2d, 0xfd, 0xde,
	0xcf, 0x4a, 0x22, 0x95, 0xba, 0xea, 0xa7, 0x6c, 0x6f, 0x4f, 0x8c, 0x77, 0x18, 0x6b, 0xe9, 0x07,
	0xc5, 0x17, 0x84, 0x4b, 0x4f, 0x5e, 0xd8, 0xc8, 0xfc, 0x9f, 0x10, 0xce, 0x67, 0x91, 0xda, 0xbb,
	0xc8, 0xb0, 0x87, 0xb1, 0xaa, 0xbf, 0x2f, 0x81, 0xc9, 0x6d, 0xa7, 0x6b, 0xb5, 0x06, 0xf0, 0x22,
	0x98, 0x75, 0x3d, 0xcb, 0x6e, 0x59, 0xae, 0xd1, 0x65, 0x61, 0x4f, 0xb2, 0x86, 0x09, 0xad, 0x16,
	0x40, 0x69, 0xec, 0xf4, 0x12, 0x98, 0x0b, 0xd1, 0xc2, 0x08, 0x71, 0x55, 0x0b, 0x7b, 0x3f, 0x27,
	0xd0, 0x64, 0xb0, 0xb6, 0x7c, 0x28, 0xc1, 0x5a, 0x5e, 0x9f, 0x2d, 0x05, 0x6b, 0x2f, 0x83, 0x79,
	0x29, 0x79, 0x45, 0xd3, 0xc8, 0x3c, 0x4b, 0x33, 0x17, 0x66, 0xb0, 0x28, 0x98, 0xa0, 0x4a, 0xdb,
	0x0f, 0x43, 0x65, 0xd9, 0xac, 0xb9, 0x30, 0x5d, 0xc5, 0x50, 0x53, 0x32, 0x53, 0x53, 0xa9, 0x99,
	0xa9, 0x7f, 0x53, 0xc2, 0x5b, 0x03, 0xbb, 0xc5, 0x53, 0x86, 0x5a, 0x08, 0x1f, 0x5e, 0x8d, 0x5e,
	0x2c, 0x1e, 0x5d, 0x1e, 0x21, 0x1e, 0x9d, 0x1e, 0xcf, 0x88, 0x2b, 0xe0, 0x44, 0x42, 0x01, 0xff,
	0x1f, 0x53, 0xc0, 0xb4, 0xd5, 0x71, 0x05, 0x7c, 0x17, 0x54, 0x5c, 0x0e, 0x2b, 0x2a, 0x6d, 0x64,
	0xaa, 0xa6, 0x05, 0xf8, 0xea, 0x93, 0x30, 0xc8, 0x15, 0x7d, 0x33, 0xc1, 0x0a, 0xaf, 0x02, 0x16,
	0x5e, 0x4a, 0x7f, 0x82, 0x51, 0x8d, 0x3f, 0xad, 0x50, 0x8d, 0x30, 0x44, 0x95, 0x41, 0xf0, 0xc0,
	0xf5, 0x98, 0xeb, 0x61, 0x4c, 0x86, 0xd8, 0x64, 0x74, 0x98, 0x21, 0xdd, 0x81, 0xfa, 0xf3, 0x61,
	0xa4, 0x20, 0x95, 0x08, 0x9f, 0xe5, 0x33, 0x30, 0x1f, 0x5b, 0xb7, 0x28, 0xca, 0x78, 0x63, 0xb8,
	0xb7, 0x27, 0xb4, 0x70, 0x6e, 0x2e, 0xca, 0x24, 0xac, 0xde, 0x61, 0x8e, 0x99, 0x5e, 0xbc, 0xf8,
	0x5d, 0x4b, 0x4a, 0x71, 0x9d, 0x02, 0x55, 0xe1, 0x98, 0x45, 0x86, 0xab, 0xc2, 0x3d, 0x33, 0x56,
	0xbf, 0x50, 0xc2, 0x0b, 0x54, 0xa4, 0x2f, 0x9f, 0xf1, 0x27, 0x31, 0x77, 0x74, 0xbf, 0x28, 0x6b,
	0x95, 0x42, 0x84, 0xb9, 0x2a, 0x9e, 0xb3, 0xe2, 0xe4, 0xea, 0xdf, 0xe0, 0xf9, 0xf3, 0xcc, 0x8c,
	0xd5, 0x8d, 0x68, 0xc6, 0xaa, 0x20, 0x8b, 0x2a, 0x25, 0xac, 0xde, 0x67, 0x3a, 0x43, 0xaf, 0x17,
	0x3c, 0x62, 0x64, 0x77, 0x78, 0x59, 0x28, 0x2b, 0xb9, 0xce, 0xbb, 0x88, 0xdf, 0x63, 0x15, 0x1c,
	0x79, 0xbd, 0xd3, 0x4a, 0x97, 0xc7, 0x45, 0xc2, 0xf6, 0x05, 0x1b, 0x9d, 0xe5, 0x89, 0x78, 0xb0,
	0x67, 0xf3, 0xf9, 0x66, 0x98, 0x31, 0x1a, 0x36, 0xee, 0xde, 0x89, 0xc4, 0xdd, 0x59, 0x08, 0xb4,
	0x0e, 0xaa, 0x26, 0xf6, 0x79, 0x45, 0x73, 0x99, 0xb6, 0x4c, 0x99, 0xe4, 0xa2, 0xb6, 0x65, 0xaa,
	0x3a, 0x9b, 0x78, 0xde, 0xc0, 0x07, 0x4b, 0x53, 0xbd, 0x1d, 0xab, 0x15, 0x6d, 0x58, 0xaf, 0xd0,
	0x50, 0x71, 0x81, 0xf7, 0x63, 0xd5, 0x9f, 0xac, 0x23, 0x9f, 0x4c, 0xe8, 0x2c, 0x69, 0x6d, 0x54,
	0xa4, 0xca, 0x94, 0x20, 0x5e, 0xff, 0xea, 0x26, 0x38, 0x4a, 0xba, 0x3f, 0xe6, 0x62, 0x6f, 0x20,
	0x6f, 0xcf, 0x6a, 0x21, 0xf8, 0x1d, 0x00, 0x93, 0xc5, 0xe5, 0xf0, 0x5a, 0x9e, 0x7e, 0xa6, 0x3e,
	0xad, 0xaa, 0x5f, 0xdf, 0x4f, 0x17, 0x36, 0x6b, 0x75, 0x0c, 0xfe, 0x81, 0x92, 0x92, 0x58, 0x0e,
	0x8b, 0x8f, 0xe1, 0xbb, 0x43, 0xa7, 0x77, 0x13, 0x05, 0xd2, 0xf5, 0xf7, 0x46, 0xea, 0x1b, 0x4c,
	0xed, 0xb7, 0xe3, 0xe5, 0xb6, 0x91, 0x89, 0xbd, 0x53, 0xb0, 0xdc, 0xcc, 0x07, 0x2f, 0xf5, 0x3b,
	0x23, 0xf4, 0x0c, 0x26, 0xf5, 0xeb, 0x61, 0xc5, 0x47, 0xfc, 0x7d, 0x08, 0xbc, 0xbd, 0x2f, 0xc2,
	0x41, 0x9a, 0xb0, 0xfe, 0xf6, 0xbe, 0xfb, 0x05, 0xd3, 0xf9, 0x3b, 0x9e, 0x4a, 0x1c, 0xe6, 0x75,
	0x06, 0xdc, 0x2c, 0x92, 0xc7, 0x90, 0x8f, 0x52, 0xea, 0x1f, 0x1c, 0x9c, 0x50, 0x1a, 0x43, 0xe3,
	0xaf, 0x2b, 0x0a, 0x19, 0x9a, 0xf1, 0xf0, 0xa3, 0x90, 0xa1, 0x59, 0xcf, 0x38, 0xd4, 0x31, 0xf8,
	0x7b, 0x4a, 0xb8, 0x09, 0x25, 0xdf, 0x4d, 0xc0, 0x3b, 0x45, 0x2b, 0xcf, 0x7c, 0xe7, 0x51, 0x7f,
	0x77, 0x94, 0xae, 0xc1, 0xbc, 0x5e, 0x81, 0x23, 0x89, 0x67, 0x0e, 0xf0, 0xad, 0x82, 0x75, 0x26,
	0x1e, 0x66, 0xd4, 0xaf, 0xed, 0xa3, 0x47, 0x82, 0x27, 0xe9, 0xef, 0x13, 0x60, 0x91, 0x3d, 0x65,
	0x3f, 0xa1, 0xc8, 0xe7, 0x49, 0xfe, 0x73, 0x08, 0x75, 0x0c, 0xfe, 0x46, 0xf8, 0x04, 0x25, 0xf1,
	0xc2, 0x00, 0xbe, 0xbd, 0x3f, 0xd2, 0xa1, 0x35, 0xbe, 0xb3, 0xff, 0x8e, 0xc1, 0x8c, 0xbe, 0xc3,
	0xee, 0xe3, 0xf1, 0xea, 0x0a, 0x98, 0x9a, 0x13, 0xa2, 0x55, 0x91, 0x71, 0xd4, 0x50, 0x50, 0xc3,
	0xf7, 0x48, 0x51, 0x92, 0xf0, 0x7d, 0x42, 0xa1, 0x92, 0x24, 0x5e, 0x4c, 0x14, 0x2a, 0x49, 0xf2,
	0xf1, 0x83, 0x3a, 0x06, 0x7f, 0x55, 0x09, 0x62, 0x0e, 0xd1, 0x47, 0x04, 0xf0, 0x66, 0x01, 0xb9,
	0xd4, 0x87, 0x0a, 0xf5, 0x5b, 0xfb, 0xec, 0x15, 0x4c, 0xe4, 0x7b, 0x0a, 0x38, 0x9e, 0xfe, 0x1c,
	0x00, 0xde, 0x1a, 0x6a, 0x61, 0xf1, 0x5a, 0xf9, 0xfa, 0xed, 0xfd, 0x76, 0x0b, 0xe6, 0xf2, 0x87,
	0x4a, 0xf0, 0x1c, 0x23, 0xb5, 0x90, 0x1e, 0xbe, 0x57, 0x40, 0x3a, 0xaf, 0x86, 0xbf, 0xfe, 0xfe,
	0x68, 0x9d, 0x13, 0xf6, 0x93, 0x56, 0xb0, 0x9d, 0x6f, 0x3f, 0x39, 0xb5, 0xf7, 0xf9, 0xf6, 0x93,
	0x57, 0x1b, 0x2e, 0x6d, 0x06, 0x29, 0x65, 0xd2, 0xf9, 0x9b, 0x41, 0x76, 0x5d, 0x76, 0xfe, 0x66,
	0x90, 0x53, 0x8f, 0xad, 0x8e, 0xc1, 0x3f, 0x96, 0xab, 0xb6, 0xd3, 0xeb, 0x97, 0xe1, 0xbd, 0x42,
	0xf2, 0xb9, 0x05, 0xd4, 0xf5, 0xfb, 0x23, 0xf7, 0x0f, 0xa6, 0xf9, 0x02, 0xcc, 0xc7, 0xab, 0x38,
	0xe1, 0x4a, 0x81, 0x6e, 0xc4, 0xcb, 0x55, 0xeb, 0x6f, 0x0d, 0xdf, 0x21, 0x18, 0xf8, 0x97, 0x14,
	0xe6, 0xef, 0xe2, 0x75, 0x92, 0xf0, 0xc6, 0xfe, 0xaa, 0x2a, 0xd9, 0x0c, 0x6e, 0x8e, 0x52, 0x8a,
	0x19, 0x9b, 0x85, 0x5c, 0x6c, 0x58, 0x3c, 0x8b, 0x94, 0x4a, 0xca, 0xe2, 0x59, 0xa4, 0xd5, 0x33,
	0x4a, 0xc6, 0x94, 0x56, 0x59, 0x97, 0x6f, 0x4c, 0x39, 0x15, 0x89, 0xf9, 0xc6, 0x94, 0x57, 0xc4,
	0xa7, 0x8e, 0xc1, 0x3f, 0x55, 0xc2, 0x90, 0x40, 0x76, 0x35, 0x1d, 0x2c, 0x2c, 0xe0, 0x2c, 0x2c,
	0xe6, 0xab, 0xaf, 0x1d, 0x84, 0x44, 0x30, 0xdf, 0x3f, 0x51, 0x72, 0xca, 0xbc, 0x78, 0x59, 0x1c,
	0xbc, 0x5f, 0xa4, 0xa6, 0x05, 0x35, 0x79, 0xf5, 0x07, 0xa3, 0x13, 0x48, 0xbb, 0x99, 0x24, 0x4b,
	0xd6, 0x0a, 0x6f, 0x26, 0x99, 0x85, 0x76, 0x85, 0x37, 0x93, 0xec, 0x3a, 0xbb, 0xe8, 0xa4, 0x92,
	0x6b, 0x28, 0x9c, 0x54, 0x66, 0x61, 0x5d, 0xe1, 0xa4, 0xb2, 0x4b, 0xe7, 0xd2, 0x6d, 0x93, 0x16,
	0x67, 0x0d, 0x6d, 0x9b, 0x72, 0xb1, 0xdc, 0xd0, 0xb6, 0x19, 0x29, 0x7a, 0x53, 0xc7, 0xe0, 0x0f,
	0x13, 0xc1, 0xd0, 0x58, 0x89, 0x18, 0x7c, 0x7f, 0x3f, 0x94, 0xe3, 0xc5, 0x6e, 0xf5, 0xbb, 0x23,
	0xf6, 0x4e, 0x35, 0xd5, 0xec, 0x02, 0x2e, 0x38, 0x7c, 0xad, 0x75, 0x56, 0x51, 0x5a, 0xb1, 0xa9,
	0x16, 0xd7, 0x8f, 0xc5, 0xae, 0x9d, 0x45, 0x75, 0x1e, 0xc5, 0xd7, 0xce, 0x21, 0x2b, 0x4e, 0x8a,
	0xaf, 0x9d, 0xc3, 0x96, 0x9c, 0xa8, 0x63, 0xf0, 0xcf, 0x95, 0x30, 0xd4, 0x99, 0x53, 0xe5, 0x01,
	0xd7, 0x46, 0x1a, 0x33, 0xaa, 0x1e, 0xeb, 0x07, 0xa2, 0x91, 0x1a, 0xaa, 0x49, 0xab, 0x91, 0x2b,
	0xbc, 0x60, 0x66, 0xd7, 0xea, 0x15, 0x87, 0x6a, 0x72, 0x0a, 0xc7, 0xa4, 0xc3, 0x7f, 0xb2, 0x4a,
	0xab, 0xd0, 0x64, 0xd3, 0x2a, 0xc4, 0xf2, 0x0f, 0xff, 0x99, 0x85, 0x50, 0x31, 0x7f, 0x13, 0x29,
	0x7e, 0x29, 0xf4, 0x37, 0x29, 0x65, 0x37, 0xc5, 0xfe, 0x26, 0xad, 0x38, 0x45, 0x1d, 0x83, 0x36,
	0xa8, 0x45, 0x2a, 0x43, 0xe0, 0x9b, 0x05, 0x3e, 0x34, 0x52, 0x83, 0x52, 0xbf, 0x3a, 0x24, 0x76,
	0xda, 0x78, 0xac, 0x56, 0xa4, 0x70, 0x3c, 0x39, 0x5b, 0x5c, 0x3c, 0x5e, 0x24, 0x87, 0x1c, 0xb9,
	0x67, 0x86, 0xb9, 0xd9, 0xc2, 0x7b, 0x66, 0x22, 0x71, 0x5c, 0xbf, 0xb6, 0x8f, 0x1e, 0xc1, 0xd8,
	0xdf, 0x55, 0x58, 0x1c, 0x35, 0x96, 0x4e, 0x85, 0xd7, 0x87, 0x39, 0xbf, 0x46, 0x73, 0xbd, 0xf5,
	0x1b, 0xfb, 0xea, 0x93, 0x76, 0xc3, 0x8c, 0xa5, 0x3f, 0x0b, 0x6f, 0x98, 0xe9, 0x59, 0xda, 0xfa,
	0xed, 0xfd, 0x76, 0x4b, 0xcc, 0x25, 0x99, 0x09, 0x83, 0xb7, 0x86, 0x73, 0xf5, 0xb1, 0xbc, 0x60,
	0xfe, 0x5c, 0xb2, 0x13, 0x6e, 0xb1, 0x6d, 0x36, 0x35, 0xcd, 0x55, 0xbc, 0xcd, 0xe6, 0xa5, 0xdb,
	0x8a, 0xb7, 0xd9, 0xdc, 0xdc, 0x5a, 0xcc, 0x83, 0xa6, 0xe4, 0xb7, 0x8a, 0x3d, 0x68, 0x76, 0x66,
	0xad, 0xd8, 0x83, 0xe6, 0x24, 0xd4, 0x24, 0xb5, 0x8e, 0xe5, 0x9e, 0xf2, 0xd5, 0x3a, 0x3d, 0x53,
	0x56, 0xbf, 0x31, 0x42, 0x72, 0x4b, 0x1d, 0x83, 0x3f, 0x52, 0x82, 0xac, 0x7e, 0x46, 0xce, 0x08,
	0xde, 0x2d, 0xf4, 0x4c, 0x79, 0x99, 0xaa, 0xfa, 0xbd, 0x51, 0xbb, 0x27, 0xe6, 0x98, 0x9d, 0x1e,
	0xca, 0x9f, 0x63, 0x61, 0x3e, 0x2b, 0x7f, 0x8e, 0xc5, 0x59, 0xa9, 0x94, 0x28, 0x1c, 0xfd, 0x6b,
	0x0e, 0xc3, 0x45, 0xe1, 0xa4, 0x5c, 0xd4, 0x90, 0x51, 0x38, 0x39, 0x09, 0xa5, 0x8e, 0xad, 0x19,
	0x3f, 0xfd, 0x72, 0x51, 0xf9, 0xe2, 0xcb, 0x45, 0xe5, 0x67, 0x5f, 0x2e, 0x2a, 0xbf, 0xf9, 0xd5,
	0xe2, 0xd8, 0x17, 0x5f, 0x2d, 0x8e, 0xfd, 0xcb, 0x57, 0x8b, 0x63, 0x9f, 0x6e, 0x76, 0x2c, 0x7f,
	0xa7, 0xdf, 0x5c, 0x6e, 0x39, 0xbd, 0x95, 0xa6, 0xdd, 0xbc, 0x4a, 0x0b, 0xb0, 0x56, 0xc2, 0x20,
	0xe3, 0x55, 0x1e, 0x64, 0xbc, 0x2a, 0x8a, 0x0b, 0x57, 0xd2, 0xff, 0x6c, 0x70, 0x73, 0x92, 0xfe,
	0x55, 0xd9, 0x1b, 0xff, 0x15, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x14, 0x14, 0x0c, 0x57, 0x58, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GfSpMetadataServiceClient is the client API for GfSpMetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GfSpMetadataServiceClient interface {
	GfSpGetUserBuckets(ctx context.Context, in *GfSpGetUserBucketsRequest, opts ...grpc.CallOption) (*GfSpGetUserBucketsResponse, error)
	GfSpListObjectsByBucketName(ctx context.Context, in *GfSpListObjectsByBucketNameRequest, opts ...grpc.CallOption) (*GfSpListObjectsByBucketNameResponse, error)
	GfSpGetBucketByBucketName(ctx context.Context, in *GfSpGetBucketByBucketNameRequest, opts ...grpc.CallOption) (*GfSpGetBucketByBucketNameResponse, error)
	GfSpGetBucketByBucketID(ctx context.Context, in *GfSpGetBucketByBucketIDRequest, opts ...grpc.CallOption) (*GfSpGetBucketByBucketIDResponse, error)
	GfSpListDeletedObjectsByBlockNumberRange(ctx context.Context, in *GfSpListDeletedObjectsByBlockNumberRangeRequest, opts ...grpc.CallOption) (*GfSpListDeletedObjectsByBlockNumberRangeResponse, error)
	GfSpGetUserBucketsCount(ctx context.Context, in *GfSpGetUserBucketsCountRequest, opts ...grpc.CallOption) (*GfSpGetUserBucketsCountResponse, error)
	GfSpListExpiredBucketsBySp(ctx context.Context, in *GfSpListExpiredBucketsBySpRequest, opts ...grpc.CallOption) (*GfSpListExpiredBucketsBySpResponse, error)
	GfSpGetObjectMeta(ctx context.Context, in *GfSpGetObjectMetaRequest, opts ...grpc.CallOption) (*GfSpGetObjectMetaResponse, error)
	GfSpGetPaymentByBucketName(ctx context.Context, in *GfSpGetPaymentByBucketNameRequest, opts ...grpc.CallOption) (*GfSpGetPaymentByBucketNameResponse, error)
	GfSpGetPaymentByBucketID(ctx context.Context, in *GfSpGetPaymentByBucketIDRequest, opts ...grpc.CallOption) (*GfSpGetPaymentByBucketIDResponse, error)
	GfSpVerifyPermission(ctx context.Context, in *types.QueryVerifyPermissionRequest, opts ...grpc.CallOption) (*types.QueryVerifyPermissionResponse, error)
	GfSpGetBucketMeta(ctx context.Context, in *GfSpGetBucketMetaRequest, opts ...grpc.CallOption) (*GfSpGetBucketMetaResponse, error)
	GfSpGetEndpointBySpID(ctx context.Context, in *GfSpGetEndpointBySpIDRequest, opts ...grpc.CallOption) (*GfSpGetEndpointBySpIDResponse, error)
	GfSpGetBucketReadQuota(ctx context.Context, in *GfSpGetBucketReadQuotaRequest, opts ...grpc.CallOption) (*GfSpGetBucketReadQuotaResponse, error)
	GfSpGetLatestBucketReadQuota(ctx context.Context, in *GfSpGetLatestBucketReadQuotaRequest, opts ...grpc.CallOption) (*GfSpGetLatestBucketReadQuotaResponse, error)
	GfSpListBucketReadRecord(ctx context.Context, in *GfSpListBucketReadRecordRequest, opts ...grpc.CallOption) (*GfSpListBucketReadRecordResponse, error)
	GfSpQueryUploadProgress(ctx context.Context, in *GfSpQueryUploadProgressRequest, opts ...grpc.CallOption) (*GfSpQueryUploadProgressResponse, error)
	GfSpQueryResumableUploadSegment(ctx context.Context, in *GfSpQueryResumableUploadSegmentRequest, opts ...grpc.CallOption) (*GfSpQueryResumableUploadSegmentResponse, error)
	GfSpGetGroupList(ctx context.Context, in *GfSpGetGroupListRequest, opts ...grpc.CallOption) (*GfSpGetGroupListResponse, error)
	GfSpListBucketsByIDs(ctx context.Context, in *GfSpListBucketsByIDsRequest, opts ...grpc.CallOption) (*GfSpListBucketsByIDsResponse, error)
	GfSpListObjectsByIDs(ctx context.Context, in *GfSpListObjectsByIDsRequest, opts ...grpc.CallOption) (*GfSpListObjectsByIDsResponse, error)
	GfSpVerifyPermissionByID(ctx context.Context, in *GfSpVerifyPermissionByIDRequest, opts ...grpc.CallOption) (*GfSpVerifyPermissionByIDResponse, error)
	GfSpListVirtualGroupFamiliesBySpID(ctx context.Context, in *GfSpListVirtualGroupFamiliesBySpIDRequest, opts ...grpc.CallOption) (*GfSpListVirtualGroupFamiliesBySpIDResponse, error)
	GfSpGetGlobalVirtualGroupByGvgID(ctx context.Context, in *GfSpGetGlobalVirtualGroupByGvgIDRequest, opts ...grpc.CallOption) (*GfSpGetGlobalVirtualGroupByGvgIDResponse, error)
	GfSpGetVirtualGroupFamily(ctx context.Context, in *GfSpGetVirtualGroupFamilyRequest, opts ...grpc.CallOption) (*GfSpGetVirtualGroupFamilyResponse, error)
	GfSpGetGlobalVirtualGroup(ctx context.Context, in *GfSpGetGlobalVirtualGroupRequest, opts ...grpc.CallOption) (*GfSpGetGlobalVirtualGroupResponse, error)
	GfSpListObjectsInGVG(ctx context.Context, in *GfSpListObjectsInGVGRequest, opts ...grpc.CallOption) (*GfSpListObjectsInGVGResponse, error)
	GfSpListObjectsInGVGAndBucket(ctx context.Context, in *GfSpListObjectsInGVGAndBucketRequest, opts ...grpc.CallOption) (*GfSpListObjectsInGVGAndBucketResponse, error)
	GfSpListObjectsByGVGAndBucketForGC(ctx context.Context, in *GfSpListObjectsByGVGAndBucketForGCRequest, opts ...grpc.CallOption) (*GfSpListObjectsByGVGAndBucketForGCResponse, error)
	GfSpListGlobalVirtualGroupsBySecondarySP(ctx context.Context, in *GfSpListGlobalVirtualGroupsBySecondarySPRequest, opts ...grpc.CallOption) (*GfSpListGlobalVirtualGroupsBySecondarySPResponse, error)
	GfSpListGlobalVirtualGroupsByBucket(ctx context.Context, in *GfSpListGlobalVirtualGroupsByBucketRequest, opts ...grpc.CallOption) (*GfSpListGlobalVirtualGroupsByBucketResponse, error)
	GfSpListMigrateBucketEvents(ctx context.Context, in *GfSpListMigrateBucketEventsRequest, opts ...grpc.CallOption) (*GfSpListMigrateBucketEventsResponse, error)
	GfSpListSwapOutEvents(ctx context.Context, in *GfSpListSwapOutEventsRequest, opts ...grpc.CallOption) (*GfSpListSwapOutEventsResponse, error)
	GfSpListSpExitEvents(ctx context.Context, in *GfSpListSpExitEventsRequest, opts ...grpc.CallOption) (*GfSpListSpExitEventsResponse, error)
	GfSpGetSPInfo(ctx context.Context, in *GfSpGetSPInfoRequest, opts ...grpc.CallOption) (*GfSpGetSPInfoResponse, error)
	GfSpGetStatus(ctx context.Context, in *GfSpGetStatusRequest, opts ...grpc.CallOption) (*GfSpGetStatusResponse, error)
	GfSpGetUserGroups(ctx context.Context, in *GfSpGetUserGroupsRequest, opts ...grpc.CallOption) (*GfSpGetUserGroupsResponse, error)
	GfSpGetGroupMembers(ctx context.Context, in *GfSpGetGroupMembersRequest, opts ...grpc.CallOption) (*GfSpGetGroupMembersResponse, error)
	GfSpGetUserOwnedGroups(ctx context.Context, in *GfSpGetUserOwnedGroupsRequest, opts ...grpc.CallOption) (*GfSpGetUserOwnedGroupsResponse, error)
	GfSpListObjectPolicies(ctx context.Context, in *GfSpListObjectPoliciesRequest, opts ...grpc.CallOption) (*GfSpListObjectPoliciesResponse, error)
	GfSpListPaymentAccountStreams(ctx context.Context, in *GfSpListPaymentAccountStreamsRequest, opts ...grpc.CallOption) (*GfSpListPaymentAccountStreamsResponse, error)
	GfSpListUserPaymentAccounts(ctx context.Context, in *GfSpListUserPaymentAccountsRequest, opts ...grpc.CallOption) (*GfSpListUserPaymentAccountsResponse, error)
	GfSpListGroupsByIDs(ctx context.Context, in *GfSpListGroupsByIDsRequest, opts ...grpc.CallOption) (*GfSpListGroupsByIDsResponse, error)
	GfSpGetSPMigratingBucketNumber(ctx context.Context, in *GfSpGetSPMigratingBucketNumberRequest, opts ...grpc.CallOption) (*GfSpGetSPMigratingBucketNumberResponse, error)
	GfSpVerifyMigrateGVGPermission(ctx context.Context, in *GfSpVerifyMigrateGVGPermissionRequest, opts ...grpc.CallOption) (*GfSpVerifyMigrateGVGPermissionResponse, error)
	GfSpGetBucketSize(ctx context.Context, in *GfSpGetBucketSizeRequest, opts ...grpc.CallOption) (*GfSpGetBucketSizeResponse, error)
}

type gfSpMetadataServiceClient struct {
	cc grpc1.ClientConn
}

func NewGfSpMetadataServiceClient(cc grpc1.ClientConn) GfSpMetadataServiceClient {
	return &gfSpMetadataServiceClient{cc}
}

func (c *gfSpMetadataServiceClient) GfSpGetUserBuckets(ctx context.Context, in *GfSpGetUserBucketsRequest, opts ...grpc.CallOption) (*GfSpGetUserBucketsResponse, error) {
	out := new(GfSpGetUserBucketsResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpGetUserBuckets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpListObjectsByBucketName(ctx context.Context, in *GfSpListObjectsByBucketNameRequest, opts ...grpc.CallOption) (*GfSpListObjectsByBucketNameResponse, error) {
	out := new(GfSpListObjectsByBucketNameResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpListObjectsByBucketName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpGetBucketByBucketName(ctx context.Context, in *GfSpGetBucketByBucketNameRequest, opts ...grpc.CallOption) (*GfSpGetBucketByBucketNameResponse, error) {
	out := new(GfSpGetBucketByBucketNameResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpGetBucketByBucketName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpGetBucketByBucketID(ctx context.Context, in *GfSpGetBucketByBucketIDRequest, opts ...grpc.CallOption) (*GfSpGetBucketByBucketIDResponse, error) {
	out := new(GfSpGetBucketByBucketIDResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpGetBucketByBucketID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpListDeletedObjectsByBlockNumberRange(ctx context.Context, in *GfSpListDeletedObjectsByBlockNumberRangeRequest, opts ...grpc.CallOption) (*GfSpListDeletedObjectsByBlockNumberRangeResponse, error) {
	out := new(GfSpListDeletedObjectsByBlockNumberRangeResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpListDeletedObjectsByBlockNumberRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpGetUserBucketsCount(ctx context.Context, in *GfSpGetUserBucketsCountRequest, opts ...grpc.CallOption) (*GfSpGetUserBucketsCountResponse, error) {
	out := new(GfSpGetUserBucketsCountResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpGetUserBucketsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpListExpiredBucketsBySp(ctx context.Context, in *GfSpListExpiredBucketsBySpRequest, opts ...grpc.CallOption) (*GfSpListExpiredBucketsBySpResponse, error) {
	out := new(GfSpListExpiredBucketsBySpResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpListExpiredBucketsBySp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpGetObjectMeta(ctx context.Context, in *GfSpGetObjectMetaRequest, opts ...grpc.CallOption) (*GfSpGetObjectMetaResponse, error) {
	out := new(GfSpGetObjectMetaResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpGetObjectMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpGetPaymentByBucketName(ctx context.Context, in *GfSpGetPaymentByBucketNameRequest, opts ...grpc.CallOption) (*GfSpGetPaymentByBucketNameResponse, error) {
	out := new(GfSpGetPaymentByBucketNameResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpGetPaymentByBucketName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpGetPaymentByBucketID(ctx context.Context, in *GfSpGetPaymentByBucketIDRequest, opts ...grpc.CallOption) (*GfSpGetPaymentByBucketIDResponse, error) {
	out := new(GfSpGetPaymentByBucketIDResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpGetPaymentByBucketID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpVerifyPermission(ctx context.Context, in *types.QueryVerifyPermissionRequest, opts ...grpc.CallOption) (*types.QueryVerifyPermissionResponse, error) {
	out := new(types.QueryVerifyPermissionResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpVerifyPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpGetBucketMeta(ctx context.Context, in *GfSpGetBucketMetaRequest, opts ...grpc.CallOption) (*GfSpGetBucketMetaResponse, error) {
	out := new(GfSpGetBucketMetaResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpGetBucketMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpGetEndpointBySpID(ctx context.Context, in *GfSpGetEndpointBySpIDRequest, opts ...grpc.CallOption) (*GfSpGetEndpointBySpIDResponse, error) {
	out := new(GfSpGetEndpointBySpIDResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpGetEndpointBySpID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpGetBucketReadQuota(ctx context.Context, in *GfSpGetBucketReadQuotaRequest, opts ...grpc.CallOption) (*GfSpGetBucketReadQuotaResponse, error) {
	out := new(GfSpGetBucketReadQuotaResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpGetBucketReadQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpGetLatestBucketReadQuota(ctx context.Context, in *GfSpGetLatestBucketReadQuotaRequest, opts ...grpc.CallOption) (*GfSpGetLatestBucketReadQuotaResponse, error) {
	out := new(GfSpGetLatestBucketReadQuotaResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpGetLatestBucketReadQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpListBucketReadRecord(ctx context.Context, in *GfSpListBucketReadRecordRequest, opts ...grpc.CallOption) (*GfSpListBucketReadRecordResponse, error) {
	out := new(GfSpListBucketReadRecordResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpListBucketReadRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpQueryUploadProgress(ctx context.Context, in *GfSpQueryUploadProgressRequest, opts ...grpc.CallOption) (*GfSpQueryUploadProgressResponse, error) {
	out := new(GfSpQueryUploadProgressResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpQueryUploadProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpQueryResumableUploadSegment(ctx context.Context, in *GfSpQueryResumableUploadSegmentRequest, opts ...grpc.CallOption) (*GfSpQueryResumableUploadSegmentResponse, error) {
	out := new(GfSpQueryResumableUploadSegmentResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpQueryResumableUploadSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpGetGroupList(ctx context.Context, in *GfSpGetGroupListRequest, opts ...grpc.CallOption) (*GfSpGetGroupListResponse, error) {
	out := new(GfSpGetGroupListResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpGetGroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpListBucketsByIDs(ctx context.Context, in *GfSpListBucketsByIDsRequest, opts ...grpc.CallOption) (*GfSpListBucketsByIDsResponse, error) {
	out := new(GfSpListBucketsByIDsResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpListBucketsByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpListObjectsByIDs(ctx context.Context, in *GfSpListObjectsByIDsRequest, opts ...grpc.CallOption) (*GfSpListObjectsByIDsResponse, error) {
	out := new(GfSpListObjectsByIDsResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpListObjectsByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpVerifyPermissionByID(ctx context.Context, in *GfSpVerifyPermissionByIDRequest, opts ...grpc.CallOption) (*GfSpVerifyPermissionByIDResponse, error) {
	out := new(GfSpVerifyPermissionByIDResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpVerifyPermissionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpListVirtualGroupFamiliesBySpID(ctx context.Context, in *GfSpListVirtualGroupFamiliesBySpIDRequest, opts ...grpc.CallOption) (*GfSpListVirtualGroupFamiliesBySpIDResponse, error) {
	out := new(GfSpListVirtualGroupFamiliesBySpIDResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpListVirtualGroupFamiliesBySpID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpGetGlobalVirtualGroupByGvgID(ctx context.Context, in *GfSpGetGlobalVirtualGroupByGvgIDRequest, opts ...grpc.CallOption) (*GfSpGetGlobalVirtualGroupByGvgIDResponse, error) {
	out := new(GfSpGetGlobalVirtualGroupByGvgIDResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpGetGlobalVirtualGroupByGvgID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpGetVirtualGroupFamily(ctx context.Context, in *GfSpGetVirtualGroupFamilyRequest, opts ...grpc.CallOption) (*GfSpGetVirtualGroupFamilyResponse, error) {
	out := new(GfSpGetVirtualGroupFamilyResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpGetVirtualGroupFamily", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpGetGlobalVirtualGroup(ctx context.Context, in *GfSpGetGlobalVirtualGroupRequest, opts ...grpc.CallOption) (*GfSpGetGlobalVirtualGroupResponse, error) {
	out := new(GfSpGetGlobalVirtualGroupResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpGetGlobalVirtualGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpListObjectsInGVG(ctx context.Context, in *GfSpListObjectsInGVGRequest, opts ...grpc.CallOption) (*GfSpListObjectsInGVGResponse, error) {
	out := new(GfSpListObjectsInGVGResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpListObjectsInGVG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpListObjectsInGVGAndBucket(ctx context.Context, in *GfSpListObjectsInGVGAndBucketRequest, opts ...grpc.CallOption) (*GfSpListObjectsInGVGAndBucketResponse, error) {
	out := new(GfSpListObjectsInGVGAndBucketResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpListObjectsInGVGAndBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpListObjectsByGVGAndBucketForGC(ctx context.Context, in *GfSpListObjectsByGVGAndBucketForGCRequest, opts ...grpc.CallOption) (*GfSpListObjectsByGVGAndBucketForGCResponse, error) {
	out := new(GfSpListObjectsByGVGAndBucketForGCResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpListObjectsByGVGAndBucketForGC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpListGlobalVirtualGroupsBySecondarySP(ctx context.Context, in *GfSpListGlobalVirtualGroupsBySecondarySPRequest, opts ...grpc.CallOption) (*GfSpListGlobalVirtualGroupsBySecondarySPResponse, error) {
	out := new(GfSpListGlobalVirtualGroupsBySecondarySPResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpListGlobalVirtualGroupsBySecondarySP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpListGlobalVirtualGroupsByBucket(ctx context.Context, in *GfSpListGlobalVirtualGroupsByBucketRequest, opts ...grpc.CallOption) (*GfSpListGlobalVirtualGroupsByBucketResponse, error) {
	out := new(GfSpListGlobalVirtualGroupsByBucketResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpListGlobalVirtualGroupsByBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpListMigrateBucketEvents(ctx context.Context, in *GfSpListMigrateBucketEventsRequest, opts ...grpc.CallOption) (*GfSpListMigrateBucketEventsResponse, error) {
	out := new(GfSpListMigrateBucketEventsResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpListMigrateBucketEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpListSwapOutEvents(ctx context.Context, in *GfSpListSwapOutEventsRequest, opts ...grpc.CallOption) (*GfSpListSwapOutEventsResponse, error) {
	out := new(GfSpListSwapOutEventsResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpListSwapOutEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpListSpExitEvents(ctx context.Context, in *GfSpListSpExitEventsRequest, opts ...grpc.CallOption) (*GfSpListSpExitEventsResponse, error) {
	out := new(GfSpListSpExitEventsResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpListSpExitEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpGetSPInfo(ctx context.Context, in *GfSpGetSPInfoRequest, opts ...grpc.CallOption) (*GfSpGetSPInfoResponse, error) {
	out := new(GfSpGetSPInfoResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpGetSPInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpGetStatus(ctx context.Context, in *GfSpGetStatusRequest, opts ...grpc.CallOption) (*GfSpGetStatusResponse, error) {
	out := new(GfSpGetStatusResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpGetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpGetUserGroups(ctx context.Context, in *GfSpGetUserGroupsRequest, opts ...grpc.CallOption) (*GfSpGetUserGroupsResponse, error) {
	out := new(GfSpGetUserGroupsResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpGetUserGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpGetGroupMembers(ctx context.Context, in *GfSpGetGroupMembersRequest, opts ...grpc.CallOption) (*GfSpGetGroupMembersResponse, error) {
	out := new(GfSpGetGroupMembersResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpGetGroupMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpGetUserOwnedGroups(ctx context.Context, in *GfSpGetUserOwnedGroupsRequest, opts ...grpc.CallOption) (*GfSpGetUserOwnedGroupsResponse, error) {
	out := new(GfSpGetUserOwnedGroupsResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpGetUserOwnedGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpListObjectPolicies(ctx context.Context, in *GfSpListObjectPoliciesRequest, opts ...grpc.CallOption) (*GfSpListObjectPoliciesResponse, error) {
	out := new(GfSpListObjectPoliciesResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpListObjectPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpListPaymentAccountStreams(ctx context.Context, in *GfSpListPaymentAccountStreamsRequest, opts ...grpc.CallOption) (*GfSpListPaymentAccountStreamsResponse, error) {
	out := new(GfSpListPaymentAccountStreamsResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpListPaymentAccountStreams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpListUserPaymentAccounts(ctx context.Context, in *GfSpListUserPaymentAccountsRequest, opts ...grpc.CallOption) (*GfSpListUserPaymentAccountsResponse, error) {
	out := new(GfSpListUserPaymentAccountsResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpListUserPaymentAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpListGroupsByIDs(ctx context.Context, in *GfSpListGroupsByIDsRequest, opts ...grpc.CallOption) (*GfSpListGroupsByIDsResponse, error) {
	out := new(GfSpListGroupsByIDsResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpListGroupsByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpGetSPMigratingBucketNumber(ctx context.Context, in *GfSpGetSPMigratingBucketNumberRequest, opts ...grpc.CallOption) (*GfSpGetSPMigratingBucketNumberResponse, error) {
	out := new(GfSpGetSPMigratingBucketNumberResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpGetSPMigratingBucketNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpVerifyMigrateGVGPermission(ctx context.Context, in *GfSpVerifyMigrateGVGPermissionRequest, opts ...grpc.CallOption) (*GfSpVerifyMigrateGVGPermissionResponse, error) {
	out := new(GfSpVerifyMigrateGVGPermissionResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpVerifyMigrateGVGPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpMetadataServiceClient) GfSpGetBucketSize(ctx context.Context, in *GfSpGetBucketSizeRequest, opts ...grpc.CallOption) (*GfSpGetBucketSizeResponse, error) {
	out := new(GfSpGetBucketSizeResponse)
	err := c.cc.Invoke(ctx, "/modular.metadata.types.GfSpMetadataService/GfSpGetBucketSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GfSpMetadataServiceServer is the server API for GfSpMetadataService service.
type GfSpMetadataServiceServer interface {
	GfSpGetUserBuckets(context.Context, *GfSpGetUserBucketsRequest) (*GfSpGetUserBucketsResponse, error)
	GfSpListObjectsByBucketName(context.Context, *GfSpListObjectsByBucketNameRequest) (*GfSpListObjectsByBucketNameResponse, error)
	GfSpGetBucketByBucketName(context.Context, *GfSpGetBucketByBucketNameRequest) (*GfSpGetBucketByBucketNameResponse, error)
	GfSpGetBucketByBucketID(context.Context, *GfSpGetBucketByBucketIDRequest) (*GfSpGetBucketByBucketIDResponse, error)
	GfSpListDeletedObjectsByBlockNumberRange(context.Context, *GfSpListDeletedObjectsByBlockNumberRangeRequest) (*GfSpListDeletedObjectsByBlockNumberRangeResponse, error)
	GfSpGetUserBucketsCount(context.Context, *GfSpGetUserBucketsCountRequest) (*GfSpGetUserBucketsCountResponse, error)
	GfSpListExpiredBucketsBySp(context.Context, *GfSpListExpiredBucketsBySpRequest) (*GfSpListExpiredBucketsBySpResponse, error)
	GfSpGetObjectMeta(context.Context, *GfSpGetObjectMetaRequest) (*GfSpGetObjectMetaResponse, error)
	GfSpGetPaymentByBucketName(context.Context, *GfSpGetPaymentByBucketNameRequest) (*GfSpGetPaymentByBucketNameResponse, error)
	GfSpGetPaymentByBucketID(context.Context, *GfSpGetPaymentByBucketIDRequest) (*GfSpGetPaymentByBucketIDResponse, error)
	GfSpVerifyPermission(context.Context, *types.QueryVerifyPermissionRequest) (*types.QueryVerifyPermissionResponse, error)
	GfSpGetBucketMeta(context.Context, *GfSpGetBucketMetaRequest) (*GfSpGetBucketMetaResponse, error)
	GfSpGetEndpointBySpID(context.Context, *GfSpGetEndpointBySpIDRequest) (*GfSpGetEndpointBySpIDResponse, error)
	GfSpGetBucketReadQuota(context.Context, *GfSpGetBucketReadQuotaRequest) (*GfSpGetBucketReadQuotaResponse, error)
	GfSpGetLatestBucketReadQuota(context.Context, *GfSpGetLatestBucketReadQuotaRequest) (*GfSpGetLatestBucketReadQuotaResponse, error)
	GfSpListBucketReadRecord(context.Context, *GfSpListBucketReadRecordRequest) (*GfSpListBucketReadRecordResponse, error)
	GfSpQueryUploadProgress(context.Context, *GfSpQueryUploadProgressRequest) (*GfSpQueryUploadProgressResponse, error)
	GfSpQueryResumableUploadSegment(context.Context, *GfSpQueryResumableUploadSegmentRequest) (*GfSpQueryResumableUploadSegmentResponse, error)
	GfSpGetGroupList(context.Context, *GfSpGetGroupListRequest) (*GfSpGetGroupListResponse, error)
	GfSpListBucketsByIDs(context.Context, *GfSpListBucketsByIDsRequest) (*GfSpListBucketsByIDsResponse, error)
	GfSpListObjectsByIDs(context.Context, *GfSpListObjectsByIDsRequest) (*GfSpListObjectsByIDsResponse, error)
	GfSpVerifyPermissionByID(context.Context, *GfSpVerifyPermissionByIDRequest) (*GfSpVerifyPermissionByIDResponse, error)
	GfSpListVirtualGroupFamiliesBySpID(context.Context, *GfSpListVirtualGroupFamiliesBySpIDRequest) (*GfSpListVirtualGroupFamiliesBySpIDResponse, error)
	GfSpGetGlobalVirtualGroupByGvgID(context.Context, *GfSpGetGlobalVirtualGroupByGvgIDRequest) (*GfSpGetGlobalVirtualGroupByGvgIDResponse, error)
	GfSpGetVirtualGroupFamily(context.Context, *GfSpGetVirtualGroupFamilyRequest) (*GfSpGetVirtualGroupFamilyResponse, error)
	GfSpGetGlobalVirtualGroup(context.Context, *GfSpGetGlobalVirtualGroupRequest) (*GfSpGetGlobalVirtualGroupResponse, error)
	GfSpListObjectsInGVG(context.Context, *GfSpListObjectsInGVGRequest) (*GfSpListObjectsInGVGResponse, error)
	GfSpListObjectsInGVGAndBucket(context.Context, *GfSpListObjectsInGVGAndBucketRequest) (*GfSpListObjectsInGVGAndBucketResponse, error)
	GfSpListObjectsByGVGAndBucketForGC(context.Context, *GfSpListObjectsByGVGAndBucketForGCRequest) (*GfSpListObjectsByGVGAndBucketForGCResponse, error)
	GfSpListGlobalVirtualGroupsBySecondarySP(context.Context, *GfSpListGlobalVirtualGroupsBySecondarySPRequest) (*GfSpListGlobalVirtualGroupsBySecondarySPResponse, error)
	GfSpListGlobalVirtualGroupsByBucket(context.Context, *GfSpListGlobalVirtualGroupsByBucketRequest) (*GfSpListGlobalVirtualGroupsByBucketResponse, error)
	GfSpListMigrateBucketEvents(context.Context, *GfSpListMigrateBucketEventsRequest) (*GfSpListMigrateBucketEventsResponse, error)
	GfSpListSwapOutEvents(context.Context, *GfSpListSwapOutEventsRequest) (*GfSpListSwapOutEventsResponse, error)
	GfSpListSpExitEvents(context.Context, *GfSpListSpExitEventsRequest) (*GfSpListSpExitEventsResponse, error)
	GfSpGetSPInfo(context.Context, *GfSpGetSPInfoRequest) (*GfSpGetSPInfoResponse, error)
	GfSpGetStatus(context.Context, *GfSpGetStatusRequest) (*GfSpGetStatusResponse, error)
	GfSpGetUserGroups(context.Context, *GfSpGetUserGroupsRequest) (*GfSpGetUserGroupsResponse, error)
	GfSpGetGroupMembers(context.Context, *GfSpGetGroupMembersRequest) (*GfSpGetGroupMembersResponse, error)
	GfSpGetUserOwnedGroups(context.Context, *GfSpGetUserOwnedGroupsRequest) (*GfSpGetUserOwnedGroupsResponse, error)
	GfSpListObjectPolicies(context.Context, *GfSpListObjectPoliciesRequest) (*GfSpListObjectPoliciesResponse, error)
	GfSpListPaymentAccountStreams(context.Context, *GfSpListPaymentAccountStreamsRequest) (*GfSpListPaymentAccountStreamsResponse, error)
	GfSpListUserPaymentAccounts(context.Context, *GfSpListUserPaymentAccountsRequest) (*GfSpListUserPaymentAccountsResponse, error)
	GfSpListGroupsByIDs(context.Context, *GfSpListGroupsByIDsRequest) (*GfSpListGroupsByIDsResponse, error)
	GfSpGetSPMigratingBucketNumber(context.Context, *GfSpGetSPMigratingBucketNumberRequest) (*GfSpGetSPMigratingBucketNumberResponse, error)
	GfSpVerifyMigrateGVGPermission(context.Context, *GfSpVerifyMigrateGVGPermissionRequest) (*GfSpVerifyMigrateGVGPermissionResponse, error)
	GfSpGetBucketSize(context.Context, *GfSpGetBucketSizeRequest) (*GfSpGetBucketSizeResponse, error)
}

// UnimplementedGfSpMetadataServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGfSpMetadataServiceServer struct {
}

func (*UnimplementedGfSpMetadataServiceServer) GfSpGetUserBuckets(ctx context.Context, req *GfSpGetUserBucketsRequest) (*GfSpGetUserBucketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpGetUserBuckets not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpListObjectsByBucketName(ctx context.Context, req *GfSpListObjectsByBucketNameRequest) (*GfSpListObjectsByBucketNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpListObjectsByBucketName not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpGetBucketByBucketName(ctx context.Context, req *GfSpGetBucketByBucketNameRequest) (*GfSpGetBucketByBucketNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpGetBucketByBucketName not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpGetBucketByBucketID(ctx context.Context, req *GfSpGetBucketByBucketIDRequest) (*GfSpGetBucketByBucketIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpGetBucketByBucketID not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpListDeletedObjectsByBlockNumberRange(ctx context.Context, req *GfSpListDeletedObjectsByBlockNumberRangeRequest) (*GfSpListDeletedObjectsByBlockNumberRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpListDeletedObjectsByBlockNumberRange not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpGetUserBucketsCount(ctx context.Context, req *GfSpGetUserBucketsCountRequest) (*GfSpGetUserBucketsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpGetUserBucketsCount not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpListExpiredBucketsBySp(ctx context.Context, req *GfSpListExpiredBucketsBySpRequest) (*GfSpListExpiredBucketsBySpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpListExpiredBucketsBySp not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpGetObjectMeta(ctx context.Context, req *GfSpGetObjectMetaRequest) (*GfSpGetObjectMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpGetObjectMeta not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpGetPaymentByBucketName(ctx context.Context, req *GfSpGetPaymentByBucketNameRequest) (*GfSpGetPaymentByBucketNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpGetPaymentByBucketName not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpGetPaymentByBucketID(ctx context.Context, req *GfSpGetPaymentByBucketIDRequest) (*GfSpGetPaymentByBucketIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpGetPaymentByBucketID not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpVerifyPermission(ctx context.Context, req *types.QueryVerifyPermissionRequest) (*types.QueryVerifyPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpVerifyPermission not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpGetBucketMeta(ctx context.Context, req *GfSpGetBucketMetaRequest) (*GfSpGetBucketMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpGetBucketMeta not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpGetEndpointBySpID(ctx context.Context, req *GfSpGetEndpointBySpIDRequest) (*GfSpGetEndpointBySpIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpGetEndpointBySpID not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpGetBucketReadQuota(ctx context.Context, req *GfSpGetBucketReadQuotaRequest) (*GfSpGetBucketReadQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpGetBucketReadQuota not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpGetLatestBucketReadQuota(ctx context.Context, req *GfSpGetLatestBucketReadQuotaRequest) (*GfSpGetLatestBucketReadQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpGetLatestBucketReadQuota not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpListBucketReadRecord(ctx context.Context, req *GfSpListBucketReadRecordRequest) (*GfSpListBucketReadRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpListBucketReadRecord not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpQueryUploadProgress(ctx context.Context, req *GfSpQueryUploadProgressRequest) (*GfSpQueryUploadProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpQueryUploadProgress not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpQueryResumableUploadSegment(ctx context.Context, req *GfSpQueryResumableUploadSegmentRequest) (*GfSpQueryResumableUploadSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpQueryResumableUploadSegment not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpGetGroupList(ctx context.Context, req *GfSpGetGroupListRequest) (*GfSpGetGroupListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpGetGroupList not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpListBucketsByIDs(ctx context.Context, req *GfSpListBucketsByIDsRequest) (*GfSpListBucketsByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpListBucketsByIDs not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpListObjectsByIDs(ctx context.Context, req *GfSpListObjectsByIDsRequest) (*GfSpListObjectsByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpListObjectsByIDs not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpVerifyPermissionByID(ctx context.Context, req *GfSpVerifyPermissionByIDRequest) (*GfSpVerifyPermissionByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpVerifyPermissionByID not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpListVirtualGroupFamiliesBySpID(ctx context.Context, req *GfSpListVirtualGroupFamiliesBySpIDRequest) (*GfSpListVirtualGroupFamiliesBySpIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpListVirtualGroupFamiliesBySpID not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpGetGlobalVirtualGroupByGvgID(ctx context.Context, req *GfSpGetGlobalVirtualGroupByGvgIDRequest) (*GfSpGetGlobalVirtualGroupByGvgIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpGetGlobalVirtualGroupByGvgID not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpGetVirtualGroupFamily(ctx context.Context, req *GfSpGetVirtualGroupFamilyRequest) (*GfSpGetVirtualGroupFamilyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpGetVirtualGroupFamily not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpGetGlobalVirtualGroup(ctx context.Context, req *GfSpGetGlobalVirtualGroupRequest) (*GfSpGetGlobalVirtualGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpGetGlobalVirtualGroup not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpListObjectsInGVG(ctx context.Context, req *GfSpListObjectsInGVGRequest) (*GfSpListObjectsInGVGResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpListObjectsInGVG not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpListObjectsInGVGAndBucket(ctx context.Context, req *GfSpListObjectsInGVGAndBucketRequest) (*GfSpListObjectsInGVGAndBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpListObjectsInGVGAndBucket not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpListObjectsByGVGAndBucketForGC(ctx context.Context, req *GfSpListObjectsByGVGAndBucketForGCRequest) (*GfSpListObjectsByGVGAndBucketForGCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpListObjectsByGVGAndBucketForGC not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpListGlobalVirtualGroupsBySecondarySP(ctx context.Context, req *GfSpListGlobalVirtualGroupsBySecondarySPRequest) (*GfSpListGlobalVirtualGroupsBySecondarySPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpListGlobalVirtualGroupsBySecondarySP not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpListGlobalVirtualGroupsByBucket(ctx context.Context, req *GfSpListGlobalVirtualGroupsByBucketRequest) (*GfSpListGlobalVirtualGroupsByBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpListGlobalVirtualGroupsByBucket not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpListMigrateBucketEvents(ctx context.Context, req *GfSpListMigrateBucketEventsRequest) (*GfSpListMigrateBucketEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpListMigrateBucketEvents not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpListSwapOutEvents(ctx context.Context, req *GfSpListSwapOutEventsRequest) (*GfSpListSwapOutEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpListSwapOutEvents not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpListSpExitEvents(ctx context.Context, req *GfSpListSpExitEventsRequest) (*GfSpListSpExitEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpListSpExitEvents not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpGetSPInfo(ctx context.Context, req *GfSpGetSPInfoRequest) (*GfSpGetSPInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpGetSPInfo not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpGetStatus(ctx context.Context, req *GfSpGetStatusRequest) (*GfSpGetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpGetStatus not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpGetUserGroups(ctx context.Context, req *GfSpGetUserGroupsRequest) (*GfSpGetUserGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpGetUserGroups not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpGetGroupMembers(ctx context.Context, req *GfSpGetGroupMembersRequest) (*GfSpGetGroupMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpGetGroupMembers not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpGetUserOwnedGroups(ctx context.Context, req *GfSpGetUserOwnedGroupsRequest) (*GfSpGetUserOwnedGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpGetUserOwnedGroups not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpListObjectPolicies(ctx context.Context, req *GfSpListObjectPoliciesRequest) (*GfSpListObjectPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpListObjectPolicies not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpListPaymentAccountStreams(ctx context.Context, req *GfSpListPaymentAccountStreamsRequest) (*GfSpListPaymentAccountStreamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpListPaymentAccountStreams not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpListUserPaymentAccounts(ctx context.Context, req *GfSpListUserPaymentAccountsRequest) (*GfSpListUserPaymentAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpListUserPaymentAccounts not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpListGroupsByIDs(ctx context.Context, req *GfSpListGroupsByIDsRequest) (*GfSpListGroupsByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpListGroupsByIDs not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpGetSPMigratingBucketNumber(ctx context.Context, req *GfSpGetSPMigratingBucketNumberRequest) (*GfSpGetSPMigratingBucketNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpGetSPMigratingBucketNumber not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpVerifyMigrateGVGPermission(ctx context.Context, req *GfSpVerifyMigrateGVGPermissionRequest) (*GfSpVerifyMigrateGVGPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpVerifyMigrateGVGPermission not implemented")
}
func (*UnimplementedGfSpMetadataServiceServer) GfSpGetBucketSize(ctx context.Context, req *GfSpGetBucketSizeRequest) (*GfSpGetBucketSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpGetBucketSize not implemented")
}

func RegisterGfSpMetadataServiceServer(s grpc1.Server, srv GfSpMetadataServiceServer) {
	s.RegisterService(&_GfSpMetadataService_serviceDesc, srv)
}

func _GfSpMetadataService_GfSpGetUserBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpGetUserBucketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpGetUserBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpGetUserBuckets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpGetUserBuckets(ctx, req.(*GfSpGetUserBucketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpListObjectsByBucketName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpListObjectsByBucketNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpListObjectsByBucketName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpListObjectsByBucketName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpListObjectsByBucketName(ctx, req.(*GfSpListObjectsByBucketNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpGetBucketByBucketName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpGetBucketByBucketNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpGetBucketByBucketName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpGetBucketByBucketName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpGetBucketByBucketName(ctx, req.(*GfSpGetBucketByBucketNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpGetBucketByBucketID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpGetBucketByBucketIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpGetBucketByBucketID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpGetBucketByBucketID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpGetBucketByBucketID(ctx, req.(*GfSpGetBucketByBucketIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpListDeletedObjectsByBlockNumberRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpListDeletedObjectsByBlockNumberRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpListDeletedObjectsByBlockNumberRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpListDeletedObjectsByBlockNumberRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpListDeletedObjectsByBlockNumberRange(ctx, req.(*GfSpListDeletedObjectsByBlockNumberRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpGetUserBucketsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpGetUserBucketsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpGetUserBucketsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpGetUserBucketsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpGetUserBucketsCount(ctx, req.(*GfSpGetUserBucketsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpListExpiredBucketsBySp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpListExpiredBucketsBySpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpListExpiredBucketsBySp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpListExpiredBucketsBySp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpListExpiredBucketsBySp(ctx, req.(*GfSpListExpiredBucketsBySpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpGetObjectMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpGetObjectMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpGetObjectMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpGetObjectMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpGetObjectMeta(ctx, req.(*GfSpGetObjectMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpGetPaymentByBucketName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpGetPaymentByBucketNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpGetPaymentByBucketName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpGetPaymentByBucketName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpGetPaymentByBucketName(ctx, req.(*GfSpGetPaymentByBucketNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpGetPaymentByBucketID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpGetPaymentByBucketIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpGetPaymentByBucketID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpGetPaymentByBucketID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpGetPaymentByBucketID(ctx, req.(*GfSpGetPaymentByBucketIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpVerifyPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryVerifyPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpVerifyPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpVerifyPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpVerifyPermission(ctx, req.(*types.QueryVerifyPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpGetBucketMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpGetBucketMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpGetBucketMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpGetBucketMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpGetBucketMeta(ctx, req.(*GfSpGetBucketMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpGetEndpointBySpID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpGetEndpointBySpIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpGetEndpointBySpID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpGetEndpointBySpID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpGetEndpointBySpID(ctx, req.(*GfSpGetEndpointBySpIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpGetBucketReadQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpGetBucketReadQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpGetBucketReadQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpGetBucketReadQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpGetBucketReadQuota(ctx, req.(*GfSpGetBucketReadQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpGetLatestBucketReadQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpGetLatestBucketReadQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpGetLatestBucketReadQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpGetLatestBucketReadQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpGetLatestBucketReadQuota(ctx, req.(*GfSpGetLatestBucketReadQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpListBucketReadRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpListBucketReadRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpListBucketReadRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpListBucketReadRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpListBucketReadRecord(ctx, req.(*GfSpListBucketReadRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpQueryUploadProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpQueryUploadProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpQueryUploadProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpQueryUploadProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpQueryUploadProgress(ctx, req.(*GfSpQueryUploadProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpQueryResumableUploadSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpQueryResumableUploadSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpQueryResumableUploadSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpQueryResumableUploadSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpQueryResumableUploadSegment(ctx, req.(*GfSpQueryResumableUploadSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpGetGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpGetGroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpGetGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpGetGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpGetGroupList(ctx, req.(*GfSpGetGroupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpListBucketsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpListBucketsByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpListBucketsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpListBucketsByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpListBucketsByIDs(ctx, req.(*GfSpListBucketsByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpListObjectsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpListObjectsByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpListObjectsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpListObjectsByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpListObjectsByIDs(ctx, req.(*GfSpListObjectsByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpVerifyPermissionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpVerifyPermissionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpVerifyPermissionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpVerifyPermissionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpVerifyPermissionByID(ctx, req.(*GfSpVerifyPermissionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpListVirtualGroupFamiliesBySpID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpListVirtualGroupFamiliesBySpIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpListVirtualGroupFamiliesBySpID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpListVirtualGroupFamiliesBySpID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpListVirtualGroupFamiliesBySpID(ctx, req.(*GfSpListVirtualGroupFamiliesBySpIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpGetGlobalVirtualGroupByGvgID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpGetGlobalVirtualGroupByGvgIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpGetGlobalVirtualGroupByGvgID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpGetGlobalVirtualGroupByGvgID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpGetGlobalVirtualGroupByGvgID(ctx, req.(*GfSpGetGlobalVirtualGroupByGvgIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpGetVirtualGroupFamily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpGetVirtualGroupFamilyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpGetVirtualGroupFamily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpGetVirtualGroupFamily",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpGetVirtualGroupFamily(ctx, req.(*GfSpGetVirtualGroupFamilyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpGetGlobalVirtualGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpGetGlobalVirtualGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpGetGlobalVirtualGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpGetGlobalVirtualGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpGetGlobalVirtualGroup(ctx, req.(*GfSpGetGlobalVirtualGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpListObjectsInGVG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpListObjectsInGVGRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpListObjectsInGVG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpListObjectsInGVG",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpListObjectsInGVG(ctx, req.(*GfSpListObjectsInGVGRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpListObjectsInGVGAndBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpListObjectsInGVGAndBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpListObjectsInGVGAndBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpListObjectsInGVGAndBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpListObjectsInGVGAndBucket(ctx, req.(*GfSpListObjectsInGVGAndBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpListObjectsByGVGAndBucketForGC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpListObjectsByGVGAndBucketForGCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpListObjectsByGVGAndBucketForGC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpListObjectsByGVGAndBucketForGC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpListObjectsByGVGAndBucketForGC(ctx, req.(*GfSpListObjectsByGVGAndBucketForGCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpListGlobalVirtualGroupsBySecondarySP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpListGlobalVirtualGroupsBySecondarySPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpListGlobalVirtualGroupsBySecondarySP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpListGlobalVirtualGroupsBySecondarySP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpListGlobalVirtualGroupsBySecondarySP(ctx, req.(*GfSpListGlobalVirtualGroupsBySecondarySPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpListGlobalVirtualGroupsByBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpListGlobalVirtualGroupsByBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpListGlobalVirtualGroupsByBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpListGlobalVirtualGroupsByBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpListGlobalVirtualGroupsByBucket(ctx, req.(*GfSpListGlobalVirtualGroupsByBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpListMigrateBucketEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpListMigrateBucketEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpListMigrateBucketEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpListMigrateBucketEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpListMigrateBucketEvents(ctx, req.(*GfSpListMigrateBucketEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpListSwapOutEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpListSwapOutEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpListSwapOutEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpListSwapOutEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpListSwapOutEvents(ctx, req.(*GfSpListSwapOutEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpListSpExitEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpListSpExitEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpListSpExitEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpListSpExitEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpListSpExitEvents(ctx, req.(*GfSpListSpExitEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpGetSPInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpGetSPInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpGetSPInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpGetSPInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpGetSPInfo(ctx, req.(*GfSpGetSPInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpGetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpGetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpGetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpGetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpGetStatus(ctx, req.(*GfSpGetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpGetUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpGetUserGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpGetUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpGetUserGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpGetUserGroups(ctx, req.(*GfSpGetUserGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpGetGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpGetGroupMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpGetGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpGetGroupMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpGetGroupMembers(ctx, req.(*GfSpGetGroupMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpGetUserOwnedGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpGetUserOwnedGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpGetUserOwnedGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpGetUserOwnedGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpGetUserOwnedGroups(ctx, req.(*GfSpGetUserOwnedGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpListObjectPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpListObjectPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpListObjectPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpListObjectPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpListObjectPolicies(ctx, req.(*GfSpListObjectPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpListPaymentAccountStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpListPaymentAccountStreamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpListPaymentAccountStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpListPaymentAccountStreams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpListPaymentAccountStreams(ctx, req.(*GfSpListPaymentAccountStreamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpListUserPaymentAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpListUserPaymentAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpListUserPaymentAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpListUserPaymentAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpListUserPaymentAccounts(ctx, req.(*GfSpListUserPaymentAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpListGroupsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpListGroupsByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpListGroupsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpListGroupsByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpListGroupsByIDs(ctx, req.(*GfSpListGroupsByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpGetSPMigratingBucketNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpGetSPMigratingBucketNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpGetSPMigratingBucketNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpGetSPMigratingBucketNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpGetSPMigratingBucketNumber(ctx, req.(*GfSpGetSPMigratingBucketNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpVerifyMigrateGVGPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpVerifyMigrateGVGPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpVerifyMigrateGVGPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpVerifyMigrateGVGPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpVerifyMigrateGVGPermission(ctx, req.(*GfSpVerifyMigrateGVGPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpMetadataService_GfSpGetBucketSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpGetBucketSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpMetadataServiceServer).GfSpGetBucketSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modular.metadata.types.GfSpMetadataService/GfSpGetBucketSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpMetadataServiceServer).GfSpGetBucketSize(ctx, req.(*GfSpGetBucketSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GfSpMetadataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "modular.metadata.types.GfSpMetadataService",
	HandlerType: (*GfSpMetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GfSpGetUserBuckets",
			Handler:    _GfSpMetadataService_GfSpGetUserBuckets_Handler,
		},
		{
			MethodName: "GfSpListObjectsByBucketName",
			Handler:    _GfSpMetadataService_GfSpListObjectsByBucketName_Handler,
		},
		{
			MethodName: "GfSpGetBucketByBucketName",
			Handler:    _GfSpMetadataService_GfSpGetBucketByBucketName_Handler,
		},
		{
			MethodName: "GfSpGetBucketByBucketID",
			Handler:    _GfSpMetadataService_GfSpGetBucketByBucketID_Handler,
		},
		{
			MethodName: "GfSpListDeletedObjectsByBlockNumberRange",
			Handler:    _GfSpMetadataService_GfSpListDeletedObjectsByBlockNumberRange_Handler,
		},
		{
			MethodName: "GfSpGetUserBucketsCount",
			Handler:    _GfSpMetadataService_GfSpGetUserBucketsCount_Handler,
		},
		{
			MethodName: "GfSpListExpiredBucketsBySp",
			Handler:    _GfSpMetadataService_GfSpListExpiredBucketsBySp_Handler,
		},
		{
			MethodName: "GfSpGetObjectMeta",
			Handler:    _GfSpMetadataService_GfSpGetObjectMeta_Handler,
		},
		{
			MethodName: "GfSpGetPaymentByBucketName",
			Handler:    _GfSpMetadataService_GfSpGetPaymentByBucketName_Handler,
		},
		{
			MethodName: "GfSpGetPaymentByBucketID",
			Handler:    _GfSpMetadataService_GfSpGetPaymentByBucketID_Handler,
		},
		{
			MethodName: "GfSpVerifyPermission",
			Handler:    _GfSpMetadataService_GfSpVerifyPermission_Handler,
		},
		{
			MethodName: "GfSpGetBucketMeta",
			Handler:    _GfSpMetadataService_GfSpGetBucketMeta_Handler,
		},
		{
			MethodName: "GfSpGetEndpointBySpID",
			Handler:    _GfSpMetadataService_GfSpGetEndpointBySpID_Handler,
		},
		{
			MethodName: "GfSpGetBucketReadQuota",
			Handler:    _GfSpMetadataService_GfSpGetBucketReadQuota_Handler,
		},
		{
			MethodName: "GfSpGetLatestBucketReadQuota",
			Handler:    _GfSpMetadataService_GfSpGetLatestBucketReadQuota_Handler,
		},
		{
			MethodName: "GfSpListBucketReadRecord",
			Handler:    _GfSpMetadataService_GfSpListBucketReadRecord_Handler,
		},
		{
			MethodName: "GfSpQueryUploadProgress",
			Handler:    _GfSpMetadataService_GfSpQueryUploadProgress_Handler,
		},
		{
			MethodName: "GfSpQueryResumableUploadSegment",
			Handler:    _GfSpMetadataService_GfSpQueryResumableUploadSegment_Handler,
		},
		{
			MethodName: "GfSpGetGroupList",
			Handler:    _GfSpMetadataService_GfSpGetGroupList_Handler,
		},
		{
			MethodName: "GfSpListBucketsByIDs",
			Handler:    _GfSpMetadataService_GfSpListBucketsByIDs_Handler,
		},
		{
			MethodName: "GfSpListObjectsByIDs",
			Handler:    _GfSpMetadataService_GfSpListObjectsByIDs_Handler,
		},
		{
			MethodName: "GfSpVerifyPermissionByID",
			Handler:    _GfSpMetadataService_GfSpVerifyPermissionByID_Handler,
		},
		{
			MethodName: "GfSpListVirtualGroupFamiliesBySpID",
			Handler:    _GfSpMetadataService_GfSpListVirtualGroupFamiliesBySpID_Handler,
		},
		{
			MethodName: "GfSpGetGlobalVirtualGroupByGvgID",
			Handler:    _GfSpMetadataService_GfSpGetGlobalVirtualGroupByGvgID_Handler,
		},
		{
			MethodName: "GfSpGetVirtualGroupFamily",
			Handler:    _GfSpMetadataService_GfSpGetVirtualGroupFamily_Handler,
		},
		{
			MethodName: "GfSpGetGlobalVirtualGroup",
			Handler:    _GfSpMetadataService_GfSpGetGlobalVirtualGroup_Handler,
		},
		{
			MethodName: "GfSpListObjectsInGVG",
			Handler:    _GfSpMetadataService_GfSpListObjectsInGVG_Handler,
		},
		{
			MethodName: "GfSpListObjectsInGVGAndBucket",
			Handler:    _GfSpMetadataService_GfSpListObjectsInGVGAndBucket_Handler,
		},
		{
			MethodName: "GfSpListObjectsByGVGAndBucketForGC",
			Handler:    _GfSpMetadataService_GfSpListObjectsByGVGAndBucketForGC_Handler,
		},
		{
			MethodName: "GfSpListGlobalVirtualGroupsBySecondarySP",
			Handler:    _GfSpMetadataService_GfSpListGlobalVirtualGroupsBySecondarySP_Handler,
		},
		{
			MethodName: "GfSpListGlobalVirtualGroupsByBucket",
			Handler:    _GfSpMetadataService_GfSpListGlobalVirtualGroupsByBucket_Handler,
		},
		{
			MethodName: "GfSpListMigrateBucketEvents",
			Handler:    _GfSpMetadataService_GfSpListMigrateBucketEvents_Handler,
		},
		{
			MethodName: "GfSpListSwapOutEvents",
			Handler:    _GfSpMetadataService_GfSpListSwapOutEvents_Handler,
		},
		{
			MethodName: "GfSpListSpExitEvents",
			Handler:    _GfSpMetadataService_GfSpListSpExitEvents_Handler,
		},
		{
			MethodName: "GfSpGetSPInfo",
			Handler:    _GfSpMetadataService_GfSpGetSPInfo_Handler,
		},
		{
			MethodName: "GfSpGetStatus",
			Handler:    _GfSpMetadataService_GfSpGetStatus_Handler,
		},
		{
			MethodName: "GfSpGetUserGroups",
			Handler:    _GfSpMetadataService_GfSpGetUserGroups_Handler,
		},
		{
			MethodName: "GfSpGetGroupMembers",
			Handler:    _GfSpMetadataService_GfSpGetGroupMembers_Handler,
		},
		{
			MethodName: "GfSpGetUserOwnedGroups",
			Handler:    _GfSpMetadataService_GfSpGetUserOwnedGroups_Handler,
		},
		{
			MethodName: "GfSpListObjectPolicies",
			Handler:    _GfSpMetadataService_GfSpListObjectPolicies_Handler,
		},
		{
			MethodName: "GfSpListPaymentAccountStreams",
			Handler:    _GfSpMetadataService_GfSpListPaymentAccountStreams_Handler,
		},
		{
			MethodName: "GfSpListUserPaymentAccounts",
			Handler:    _GfSpMetadataService_GfSpListUserPaymentAccounts_Handler,
		},
		{
			MethodName: "GfSpListGroupsByIDs",
			Handler:    _GfSpMetadataService_GfSpListGroupsByIDs_Handler,
		},
		{
			MethodName: "GfSpGetSPMigratingBucketNumber",
			Handler:    _GfSpMetadataService_GfSpGetSPMigratingBucketNumber_Handler,
		},
		{
			MethodName: "GfSpVerifyMigrateGVGPermission",
			Handler:    _GfSpMetadataService_GfSpVerifyMigrateGVGPermission_Handler,
		},
		{
			MethodName: "GfSpGetBucketSize",
			Handler:    _GfSpMetadataService_GfSpGetBucketSize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modular/metadata/types/metadata.proto",
}

func (m *Bucket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bucket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bucket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateTime != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x48
	}
	if m.UpdateAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x40
	}
	if len(m.UpdateTxHash) > 0 {
		i -= len(m.UpdateTxHash)
		copy(dAtA[i:], m.UpdateTxHash)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.UpdateTxHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreateTxHash) > 0 {
		i -= len(m.CreateTxHash)
		copy(dAtA[i:], m.CreateTxHash)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.CreateTxHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DeleteReason) > 0 {
		i -= len(m.DeleteReason)
		copy(dAtA[i:], m.DeleteReason)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.DeleteReason)))
		i--
		dAtA[i] = 0x22
	}
	if m.DeleteAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.DeleteAt))
		i--
		dAtA[i] = 0x18
	}
	if m.Removed {
		i--
		if m.Removed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.BucketInfo != nil {
		{
			size, err := m.BucketInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Object) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Object) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Object) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SealTxHash) > 0 {
		i -= len(m.SealTxHash)
		copy(dAtA[i:], m.SealTxHash)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.SealTxHash)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.UpdateTxHash) > 0 {
		i -= len(m.UpdateTxHash)
		copy(dAtA[i:], m.UpdateTxHash)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.UpdateTxHash)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CreateTxHash) > 0 {
		i -= len(m.CreateTxHash)
		copy(dAtA[i:], m.CreateTxHash)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.CreateTxHash)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DeleteReason) > 0 {
		i -= len(m.DeleteReason)
		copy(dAtA[i:], m.DeleteReason)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.DeleteReason)))
		i--
		dAtA[i] = 0x32
	}
	if m.DeleteAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.DeleteAt))
		i--
		dAtA[i] = 0x28
	}
	if m.UpdateAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x20
	}
	if m.Removed {
		i--
		if m.Removed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.LockedBalance) > 0 {
		i -= len(m.LockedBalance)
		copy(dAtA[i:], m.LockedBalance)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.LockedBalance)))
		i--
		dAtA[i] = 0x12
	}
	if m.ObjectInfo != nil {
		{
			size, err := m.ObjectInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ObjectDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Gvg != nil {
		{
			size, err := m.Gvg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Bucket != nil {
		{
			size, err := m.Bucket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VGFInfoBucket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VGFInfoBucket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VGFInfoBucket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vgf != nil {
		{
			size, err := m.Vgf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.UpdateTime != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x48
	}
	if m.UpdateAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x40
	}
	if len(m.UpdateTxHash) > 0 {
		i -= len(m.UpdateTxHash)
		copy(dAtA[i:], m.UpdateTxHash)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.UpdateTxHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreateTxHash) > 0 {
		i -= len(m.CreateTxHash)
		copy(dAtA[i:], m.CreateTxHash)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.CreateTxHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DeleteReason) > 0 {
		i -= len(m.DeleteReason)
		copy(dAtA[i:], m.DeleteReason)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.DeleteReason)))
		i--
		dAtA[i] = 0x22
	}
	if m.DeleteAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.DeleteAt))
		i--
		dAtA[i] = 0x18
	}
	if m.Removed {
		i--
		if m.Removed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.BucketInfo != nil {
		{
			size, err := m.BucketInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PaymentAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateTime != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x28
	}
	if m.UpdateAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x20
	}
	if m.Refundable {
		i--
		if m.Refundable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PaymentAccountMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentAccountMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentAccountMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StreamRecord != nil {
		{
			size, err := m.StreamRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PaymentAccount != nil {
		{
			size, err := m.PaymentAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetUserBucketsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetUserBucketsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetUserBucketsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeRemoved {
		i--
		if m.IncludeRemoved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.AccountId) > 0 {
		i -= len(m.AccountId)
		copy(dAtA[i:], m.AccountId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.AccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetUserBucketsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetUserBucketsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetUserBucketsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Buckets) > 0 {
		for iNdEx := len(m.Buckets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Buckets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListObjectsByBucketNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListObjectsByBucketNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListObjectsByBucketNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeRemoved {
		i--
		if m.IncludeRemoved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Delimiter) > 0 {
		i -= len(m.Delimiter)
		copy(dAtA[i:], m.Delimiter)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Delimiter)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ContinuationToken) > 0 {
		i -= len(m.ContinuationToken)
		copy(dAtA[i:], m.ContinuationToken)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.ContinuationToken)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StartAfter) > 0 {
		i -= len(m.StartAfter)
		copy(dAtA[i:], m.StartAfter)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.StartAfter)))
		i--
		dAtA[i] = 0x22
	}
	if m.MaxKeys != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.MaxKeys))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AccountId) > 0 {
		i -= len(m.AccountId)
		copy(dAtA[i:], m.AccountId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.AccountId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListObjectsByBucketNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListObjectsByBucketNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListObjectsByBucketNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContinuationToken) > 0 {
		i -= len(m.ContinuationToken)
		copy(dAtA[i:], m.ContinuationToken)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.ContinuationToken)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.CommonPrefixes) > 0 {
		for iNdEx := len(m.CommonPrefixes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CommonPrefixes[iNdEx])
			copy(dAtA[i:], m.CommonPrefixes[iNdEx])
			i = encodeVarintMetadata(dAtA, i, uint64(len(m.CommonPrefixes[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Delimiter) > 0 {
		i -= len(m.Delimiter)
		copy(dAtA[i:], m.Delimiter)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Delimiter)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NextContinuationToken) > 0 {
		i -= len(m.NextContinuationToken)
		copy(dAtA[i:], m.NextContinuationToken)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.NextContinuationToken)))
		i--
		dAtA[i] = 0x2a
	}
	if m.IsTruncated {
		i--
		if m.IsTruncated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.MaxKeys != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.MaxKeys))
		i--
		dAtA[i] = 0x18
	}
	if m.KeyCount != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.KeyCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Objects) > 0 {
		for iNdEx := len(m.Objects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Objects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetBucketByBucketNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetBucketByBucketNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetBucketByBucketNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludePrivate {
		i--
		if m.IncludePrivate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetBucketByBucketNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetBucketByBucketNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetBucketByBucketNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bucket != nil {
		{
			size, err := m.Bucket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetBucketByBucketIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetBucketByBucketIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetBucketByBucketIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludePrivate {
		i--
		if m.IncludePrivate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.BucketId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.BucketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetBucketByBucketIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetBucketByBucketIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetBucketByBucketIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bucket != nil {
		{
			size, err := m.Bucket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListDeletedObjectsByBlockNumberRangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListDeletedObjectsByBlockNumberRangeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListDeletedObjectsByBlockNumberRangeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludePrivate {
		i--
		if m.IncludePrivate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.EndBlockNumber != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.EndBlockNumber))
		i--
		dAtA[i] = 0x10
	}
	if m.StartBlockNumber != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.StartBlockNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListDeletedObjectsByBlockNumberRangeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListDeletedObjectsByBlockNumberRangeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListDeletedObjectsByBlockNumberRangeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndBlockNumber != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.EndBlockNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Objects) > 0 {
		for iNdEx := len(m.Objects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Objects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetUserBucketsCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetUserBucketsCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetUserBucketsCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeRemoved {
		i--
		if m.IncludeRemoved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.AccountId) > 0 {
		i -= len(m.AccountId)
		copy(dAtA[i:], m.AccountId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.AccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetUserBucketsCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetUserBucketsCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetUserBucketsCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListExpiredBucketsBySpRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListExpiredBucketsBySpRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListExpiredBucketsBySpRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.PrimarySpId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.PrimarySpId))
		i--
		dAtA[i] = 0x10
	}
	if m.CreateAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListExpiredBucketsBySpResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListExpiredBucketsBySpResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListExpiredBucketsBySpResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Buckets) > 0 {
		for iNdEx := len(m.Buckets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Buckets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetObjectMetaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetObjectMetaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetObjectMetaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludePrivate {
		i--
		if m.IncludePrivate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObjectName) > 0 {
		i -= len(m.ObjectName)
		copy(dAtA[i:], m.ObjectName)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.ObjectName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetObjectMetaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetObjectMetaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetObjectMetaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetPaymentByBucketNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetPaymentByBucketNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetPaymentByBucketNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludePrivate {
		i--
		if m.IncludePrivate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetPaymentByBucketNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetPaymentByBucketNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetPaymentByBucketNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StreamRecord != nil {
		{
			size, err := m.StreamRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetPaymentByBucketIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetPaymentByBucketIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetPaymentByBucketIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludePrivate {
		i--
		if m.IncludePrivate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.BucketId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.BucketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetPaymentByBucketIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetPaymentByBucketIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetPaymentByBucketIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StreamRecord != nil {
		{
			size, err := m.StreamRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetBucketMetaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetBucketMetaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetBucketMetaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludePrivate {
		i--
		if m.IncludePrivate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetBucketMetaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetBucketMetaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetBucketMetaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StreamRecord != nil {
		{
			size, err := m.StreamRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Bucket != nil {
		{
			size, err := m.Bucket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetEndpointBySpIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetEndpointBySpIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetEndpointBySpIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.SpId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetEndpointBySpIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetEndpointBySpIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetEndpointBySpIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetBucketReadQuotaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetBucketReadQuotaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetBucketReadQuotaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.YearMonth) > 0 {
		i -= len(m.YearMonth)
		copy(dAtA[i:], m.YearMonth)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.YearMonth)))
		i--
		dAtA[i] = 0x12
	}
	if m.BucketInfo != nil {
		{
			size, err := m.BucketInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetBucketReadQuotaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetBucketReadQuotaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetBucketReadQuotaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FreeQuotaConsumeSize != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.FreeQuotaConsumeSize))
		i--
		dAtA[i] = 0x28
	}
	if m.ConsumedSize != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.ConsumedSize))
		i--
		dAtA[i] = 0x20
	}
	if m.SpFreeQuotaSize != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.SpFreeQuotaSize))
		i--
		dAtA[i] = 0x18
	}
	if m.ChargedQuotaSize != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.ChargedQuotaSize))
		i--
		dAtA[i] = 0x10
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetLatestBucketReadQuotaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetLatestBucketReadQuotaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetLatestBucketReadQuotaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BucketId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.BucketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetLatestBucketReadQuotaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetLatestBucketReadQuotaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetLatestBucketReadQuotaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Quota != nil {
		{
			size, err := m.Quota.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListBucketReadRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListBucketReadRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListBucketReadRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxRecordNum != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.MaxRecordNum))
		i--
		dAtA[i] = 0x20
	}
	if m.EndTimestampUs != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.EndTimestampUs))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTimestampUs != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.StartTimestampUs))
		i--
		dAtA[i] = 0x10
	}
	if m.BucketInfo != nil {
		{
			size, err := m.BucketInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReadRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReadSize != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.ReadSize))
		i--
		dAtA[i] = 0x28
	}
	if m.TimestampUs != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.TimestampUs))
		i--
		dAtA[i] = 0x20
	}
	if len(m.AccountAddress) > 0 {
		i -= len(m.AccountAddress)
		copy(dAtA[i:], m.AccountAddress)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.AccountAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ObjectId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ObjectName) > 0 {
		i -= len(m.ObjectName)
		copy(dAtA[i:], m.ObjectName)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.ObjectName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListBucketReadRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListBucketReadRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListBucketReadRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextStartTimestampUs != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.NextStartTimestampUs))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ReadRecords) > 0 {
		for iNdEx := len(m.ReadRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReadRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpQueryUploadProgressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpQueryUploadProgressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpQueryUploadProgressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ObjectId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpQueryUploadProgressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpQueryUploadProgressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpQueryUploadProgressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrDescription) > 0 {
		i -= len(m.ErrDescription)
		copy(dAtA[i:], m.ErrDescription)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.ErrDescription)))
		i--
		dAtA[i] = 0x1a
	}
	if m.State != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpQueryResumableUploadSegmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpQueryResumableUploadSegmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpQueryResumableUploadSegmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ObjectId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpQueryResumableUploadSegmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpQueryResumableUploadSegmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpQueryResumableUploadSegmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SegmentCount != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.SegmentCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Group) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Removed {
		i--
		if m.Removed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.NumberOfMembers != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.NumberOfMembers))
		i--
		dAtA[i] = 0x38
	}
	if m.UpdateTime != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.UpdateAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x28
	}
	if m.CreateTime != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x20
	}
	if m.CreateAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Group != nil {
		{
			size, err := m.Group.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpirationTime != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.ExpirationTime))
		i--
		dAtA[i] = 0x48
	}
	if m.Removed {
		i--
		if m.Removed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.UpdateTime != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x38
	}
	if m.UpdateAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x30
	}
	if m.CreateTime != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x28
	}
	if m.CreateAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccountId) > 0 {
		i -= len(m.AccountId)
		copy(dAtA[i:], m.AccountId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.AccountId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Group != nil {
		{
			size, err := m.Group.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetGroupListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetGroupListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetGroupListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeRemoved {
		i--
		if m.IncludeRemoved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Offset != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x28
	}
	if m.Limit != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SourceType) > 0 {
		i -= len(m.SourceType)
		copy(dAtA[i:], m.SourceType)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.SourceType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetGroupListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetGroupListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetGroupListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListBucketsByIDsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListBucketsByIDsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListBucketsByIDsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeRemoved {
		i--
		if m.IncludeRemoved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.BucketIds) > 0 {
		dAtA28 := make([]byte, len(m.BucketIds)*10)
		var j27 int
		for _, num := range m.BucketIds {
			for num >= 1<<7 {
				dAtA28[j27] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j27++
			}
			dAtA28[j27] = uint8(num)
			j27++
		}
		i -= j27
		copy(dAtA[i:], dAtA28[:j27])
		i = encodeVarintMetadata(dAtA, i, uint64(j27))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListBucketsByIDsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListBucketsByIDsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListBucketsByIDsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Buckets) > 0 {
		for k := range m.Buckets {
			v := m.Buckets[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMetadata(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMetadata(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMetadata(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListObjectsByIDsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListObjectsByIDsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListObjectsByIDsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeRemoved {
		i--
		if m.IncludeRemoved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ObjectIds) > 0 {
		dAtA31 := make([]byte, len(m.ObjectIds)*10)
		var j30 int
		for _, num := range m.ObjectIds {
			for num >= 1<<7 {
				dAtA31[j30] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j30++
			}
			dAtA31[j30] = uint8(num)
			j30++
		}
		i -= j30
		copy(dAtA[i:], dAtA31[:j30])
		i = encodeVarintMetadata(dAtA, i, uint64(j30))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListObjectsByIDsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListObjectsByIDsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListObjectsByIDsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Objects) > 0 {
		for k := range m.Objects {
			v := m.Objects[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMetadata(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMetadata(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMetadata(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpVerifyPermissionByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpVerifyPermissionByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpVerifyPermissionByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActionType != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.ActionType))
		i--
		dAtA[i] = 0x20
	}
	if m.ResourceId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.ResourceId))
		i--
		dAtA[i] = 0x18
	}
	if m.ResourceType != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.ResourceType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpVerifyPermissionByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpVerifyPermissionByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpVerifyPermissionByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Effect != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Effect))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListVirtualGroupFamiliesBySpIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListVirtualGroupFamiliesBySpIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListVirtualGroupFamiliesBySpIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.SpId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListVirtualGroupFamiliesBySpIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListVirtualGroupFamiliesBySpIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListVirtualGroupFamiliesBySpIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GlobalVirtualGroupFamilies) > 0 {
		for iNdEx := len(m.GlobalVirtualGroupFamilies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GlobalVirtualGroupFamilies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetGlobalVirtualGroupByGvgIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetGlobalVirtualGroupByGvgIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetGlobalVirtualGroupByGvgIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GvgId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.GvgId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetGlobalVirtualGroupByGvgIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetGlobalVirtualGroupByGvgIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetGlobalVirtualGroupByGvgIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GlobalVirtualGroup != nil {
		{
			size, err := m.GlobalVirtualGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetVirtualGroupFamilyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetVirtualGroupFamilyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetVirtualGroupFamilyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VgfId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.VgfId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetVirtualGroupFamilyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetVirtualGroupFamilyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetVirtualGroupFamilyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vgf != nil {
		{
			size, err := m.Vgf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetGlobalVirtualGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetGlobalVirtualGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetGlobalVirtualGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LvgId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.LvgId))
		i--
		dAtA[i] = 0x10
	}
	if m.BucketId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.BucketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetGlobalVirtualGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetGlobalVirtualGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetGlobalVirtualGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Gvg != nil {
		{
			size, err := m.Gvg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListObjectsInGVGRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListObjectsInGVGRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListObjectsInGVGRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.StartAfter != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.StartAfter))
		i--
		dAtA[i] = 0x18
	}
	if m.GvgId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.GvgId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListObjectsInGVGResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListObjectsInGVGResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListObjectsInGVGResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Objects) > 0 {
		for iNdEx := len(m.Objects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Objects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListObjectsInGVGAndBucketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListObjectsInGVGAndBucketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListObjectsInGVGAndBucketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.StartAfter != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.StartAfter))
		i--
		dAtA[i] = 0x18
	}
	if m.BucketId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.BucketId))
		i--
		dAtA[i] = 0x10
	}
	if m.GvgId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.GvgId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListObjectsInGVGAndBucketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListObjectsInGVGAndBucketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListObjectsInGVGAndBucketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Objects) > 0 {
		for iNdEx := len(m.Objects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Objects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListObjectsByGVGAndBucketForGCRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListObjectsByGVGAndBucketForGCRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListObjectsByGVGAndBucketForGCRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.StartAfter != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.StartAfter))
		i--
		dAtA[i] = 0x18
	}
	if m.BucketId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.BucketId))
		i--
		dAtA[i] = 0x10
	}
	if m.GvgId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.GvgId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListObjectsByGVGAndBucketForGCResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListObjectsByGVGAndBucketForGCResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListObjectsByGVGAndBucketForGCResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Objects) > 0 {
		for iNdEx := len(m.Objects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Objects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListMigrateBucketEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListMigrateBucketEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListMigrateBucketEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.SpId))
		i--
		dAtA[i] = 0x10
	}
	if m.BlockId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.BlockId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListMigrateBucketEvents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListMigrateBucketEvents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListMigrateBucketEvents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RejectEvent != nil {
		{
			size, err := m.RejectEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CompleteEvent != nil {
		{
			size, err := m.CompleteEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CancelEvent != nil {
		{
			size, err := m.CancelEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListMigrateBucketEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListMigrateBucketEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListMigrateBucketEventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListSwapOutEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListSwapOutEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListSwapOutEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.SpId))
		i--
		dAtA[i] = 0x10
	}
	if m.BlockId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.BlockId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListSwapOutEvents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSwapOutEvents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSwapOutEvents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompleteEvents != nil {
		{
			size, err := m.CompleteEvents.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CancelEvents != nil {
		{
			size, err := m.CancelEvents.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Events != nil {
		{
			size, err := m.Events.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListSwapOutEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListSwapOutEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListSwapOutEventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListGlobalVirtualGroupsBySecondarySPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListGlobalVirtualGroupsBySecondarySPRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListGlobalVirtualGroupsBySecondarySPRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.SpId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListGlobalVirtualGroupsBySecondarySPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListGlobalVirtualGroupsBySecondarySPResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListGlobalVirtualGroupsBySecondarySPResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListGlobalVirtualGroupsByBucketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListGlobalVirtualGroupsByBucketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListGlobalVirtualGroupsByBucketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BucketId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.BucketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListGlobalVirtualGroupsByBucketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListGlobalVirtualGroupsByBucketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListGlobalVirtualGroupsByBucketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListSpExitEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListSpExitEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListSpExitEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.SpId))
		i--
		dAtA[i] = 0x10
	}
	if m.BlockId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.BlockId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListSpExitEvents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSpExitEvents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSpExitEvents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompleteEvent != nil {
		{
			size, err := m.CompleteEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListSpExitEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListSpExitEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListSpExitEventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Events != nil {
		{
			size, err := m.Events.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetSPInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetSPInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetSPInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetSPInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetSPInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetSPInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StorageProvider != nil {
		{
			size, err := m.StorageProvider.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainInfo != nil {
		{
			size, err := m.ChainInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockSyncerInfo != nil {
		{
			size, err := m.BlockSyncerInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.StorageProviderInfo != nil {
		{
			size, err := m.StorageProviderInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockSyncerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockSyncerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockSyncerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BsEnableDualDb {
		i--
		if m.BsEnableDualDb {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.BsWorkers != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.BsWorkers))
		i--
		dAtA[i] = 0x40
	}
	if len(m.BsModules) > 0 {
		for iNdEx := len(m.BsModules) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BsModules[iNdEx])
			copy(dAtA[i:], m.BsModules[iNdEx])
			i = encodeVarintMetadata(dAtA, i, uint64(len(m.BsModules[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.BsDefaultCollationName) > 0 {
		i -= len(m.BsDefaultCollationName)
		copy(dAtA[i:], m.BsDefaultCollationName)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.BsDefaultCollationName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BsDefaultCharacterSetName) > 0 {
		i -= len(m.BsDefaultCharacterSetName)
		copy(dAtA[i:], m.BsDefaultCharacterSetName)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.BsDefaultCharacterSetName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BsMysqlVersion) > 0 {
		i -= len(m.BsMysqlVersion)
		copy(dAtA[i:], m.BsMysqlVersion)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.BsMysqlVersion)))
		i--
		dAtA[i] = 0x22
	}
	if m.BsUpdateTime != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.BsUpdateTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BsBlockHash) > 0 {
		i -= len(m.BsBlockHash)
		copy(dAtA[i:], m.BsBlockHash)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.BsBlockHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.BsBlockHeight != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.BsBlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainAddress) > 0 {
		for iNdEx := len(m.ChainAddress) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ChainAddress[iNdEx])
			copy(dAtA[i:], m.ChainAddress[iNdEx])
			i = encodeVarintMetadata(dAtA, i, uint64(len(m.ChainAddress[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StorageProviderInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageProviderInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageProviderInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpDomainName) > 0 {
		i -= len(m.SpDomainName)
		copy(dAtA[i:], m.SpDomainName)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.SpDomainName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SpOperatorAddress) > 0 {
		i -= len(m.SpOperatorAddress)
		copy(dAtA[i:], m.SpOperatorAddress)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.SpOperatorAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SpOperatingSystem) > 0 {
		i -= len(m.SpOperatingSystem)
		copy(dAtA[i:], m.SpOperatingSystem)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.SpOperatingSystem)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SpGoVersion) > 0 {
		i -= len(m.SpGoVersion)
		copy(dAtA[i:], m.SpGoVersion)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.SpGoVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SpArchitecture) > 0 {
		i -= len(m.SpArchitecture)
		copy(dAtA[i:], m.SpArchitecture)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.SpArchitecture)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SpCodeCommit) > 0 {
		i -= len(m.SpCodeCommit)
		copy(dAtA[i:], m.SpCodeCommit)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.SpCodeCommit)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SpCodeVersion) > 0 {
		i -= len(m.SpCodeVersion)
		copy(dAtA[i:], m.SpCodeVersion)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.SpCodeVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GfSpGetStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetUserGroupsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetUserGroupsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetUserGroupsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartAfter != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.StartAfter))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AccountId) > 0 {
		i -= len(m.AccountId)
		copy(dAtA[i:], m.AccountId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.AccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetUserGroupsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetUserGroupsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetUserGroupsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetGroupMembersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetGroupMembersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetGroupMembersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StartAfter) > 0 {
		i -= len(m.StartAfter)
		copy(dAtA[i:], m.StartAfter)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.StartAfter)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Limit != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.GroupId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetGroupMembersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetGroupMembersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetGroupMembersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetUserOwnedGroupsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetUserOwnedGroupsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetUserOwnedGroupsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartAfter != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.StartAfter))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AccountId) > 0 {
		i -= len(m.AccountId)
		copy(dAtA[i:], m.AccountId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.AccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetUserOwnedGroupsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetUserOwnedGroupsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetUserOwnedGroupsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Policy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Policy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Policy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpirationTime != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.ExpirationTime))
		i--
		dAtA[i] = 0x38
	}
	if m.UpdateTimestamp != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.UpdateTimestamp))
		i--
		dAtA[i] = 0x30
	}
	if m.CreateTimestamp != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.CreateTimestamp))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ResourceId) > 0 {
		i -= len(m.ResourceId)
		copy(dAtA[i:], m.ResourceId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.ResourceId)))
		i--
		dAtA[i] = 0x22
	}
	if m.ResourceType != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.ResourceType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PrincipalValue) > 0 {
		i -= len(m.PrincipalValue)
		copy(dAtA[i:], m.PrincipalValue)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.PrincipalValue)))
		i--
		dAtA[i] = 0x12
	}
	if m.PrincipalType != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.PrincipalType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListObjectPoliciesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListObjectPoliciesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListObjectPoliciesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartAfter != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.StartAfter))
		i--
		dAtA[i] = 0x28
	}
	if m.Limit != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.ActionType != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.ActionType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObjectName) > 0 {
		i -= len(m.ObjectName)
		copy(dAtA[i:], m.ObjectName)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.ObjectName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListObjectPoliciesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListObjectPoliciesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListObjectPoliciesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for iNdEx := len(m.Policies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Policies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListPaymentAccountStreamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListPaymentAccountStreamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListPaymentAccountStreamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PaymentAccount) > 0 {
		i -= len(m.PaymentAccount)
		copy(dAtA[i:], m.PaymentAccount)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.PaymentAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListPaymentAccountStreamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListPaymentAccountStreamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListPaymentAccountStreamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Buckets) > 0 {
		for iNdEx := len(m.Buckets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Buckets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListUserPaymentAccountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListUserPaymentAccountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListUserPaymentAccountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountId) > 0 {
		i -= len(m.AccountId)
		copy(dAtA[i:], m.AccountId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.AccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListUserPaymentAccountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListUserPaymentAccountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListUserPaymentAccountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PaymentAccounts) > 0 {
		for iNdEx := len(m.PaymentAccounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PaymentAccounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListGroupsByIDsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListGroupsByIDsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListGroupsByIDsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupIds) > 0 {
		dAtA52 := make([]byte, len(m.GroupIds)*10)
		var j51 int
		for _, num := range m.GroupIds {
			for num >= 1<<7 {
				dAtA52[j51] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j51++
			}
			dAtA52[j51] = uint8(num)
			j51++
		}
		i -= j51
		copy(dAtA[i:], dAtA52[:j51])
		i = encodeVarintMetadata(dAtA, i, uint64(j51))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpListGroupsByIDsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpListGroupsByIDsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpListGroupsByIDsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for k := range m.Groups {
			v := m.Groups[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMetadata(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMetadata(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMetadata(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetSPMigratingBucketNumberRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetSPMigratingBucketNumberRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetSPMigratingBucketNumberRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.SpId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetSPMigratingBucketNumberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetSPMigratingBucketNumberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetSPMigratingBucketNumberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpVerifyMigrateGVGPermissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpVerifyMigrateGVGPermissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpVerifyMigrateGVGPermissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DstSpId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.DstSpId))
		i--
		dAtA[i] = 0x18
	}
	if m.GvgId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.GvgId))
		i--
		dAtA[i] = 0x10
	}
	if m.BucketId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.BucketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpVerifyMigrateGVGPermissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpVerifyMigrateGVGPermissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpVerifyMigrateGVGPermissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Effect != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Effect))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetBucketSizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetBucketSizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetBucketSizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BucketId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.BucketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetBucketSizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetBucketSizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetBucketSizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BucketSize) > 0 {
		i -= len(m.BucketSize)
		copy(dAtA[i:], m.BucketSize)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.BucketSize)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMetadata(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetadata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Bucket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BucketInfo != nil {
		l = m.BucketInfo.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Removed {
		n += 2
	}
	if m.DeleteAt != 0 {
		n += 1 + sovMetadata(uint64(m.DeleteAt))
	}
	l = len(m.DeleteReason)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.CreateTxHash)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.UpdateTxHash)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.UpdateAt != 0 {
		n += 1 + sovMetadata(uint64(m.UpdateAt))
	}
	if m.UpdateTime != 0 {
		n += 1 + sovMetadata(uint64(m.UpdateTime))
	}
	return n
}

func (m *Object) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjectInfo != nil {
		l = m.ObjectInfo.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.LockedBalance)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Removed {
		n += 2
	}
	if m.UpdateAt != 0 {
		n += 1 + sovMetadata(uint64(m.UpdateAt))
	}
	if m.DeleteAt != 0 {
		n += 1 + sovMetadata(uint64(m.DeleteAt))
	}
	l = len(m.DeleteReason)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.CreateTxHash)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.UpdateTxHash)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.SealTxHash)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *ObjectDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Bucket != nil {
		l = m.Bucket.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Gvg != nil {
		l = m.Gvg.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *VGFInfoBucket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BucketInfo != nil {
		l = m.BucketInfo.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Removed {
		n += 2
	}
	if m.DeleteAt != 0 {
		n += 1 + sovMetadata(uint64(m.DeleteAt))
	}
	l = len(m.DeleteReason)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.CreateTxHash)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.UpdateTxHash)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.UpdateAt != 0 {
		n += 1 + sovMetadata(uint64(m.UpdateAt))
	}
	if m.UpdateTime != 0 {
		n += 1 + sovMetadata(uint64(m.UpdateTime))
	}
	if m.Vgf != nil {
		l = m.Vgf.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *PaymentAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Refundable {
		n += 2
	}
	if m.UpdateAt != 0 {
		n += 1 + sovMetadata(uint64(m.UpdateAt))
	}
	if m.UpdateTime != 0 {
		n += 1 + sovMetadata(uint64(m.UpdateTime))
	}
	return n
}

func (m *PaymentAccountMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PaymentAccount != nil {
		l = m.PaymentAccount.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.StreamRecord != nil {
		l = m.StreamRecord.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpGetUserBucketsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.IncludeRemoved {
		n += 2
	}
	return n
}

func (m *GfSpGetUserBucketsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Buckets) > 0 {
		for _, e := range m.Buckets {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	return n
}

func (m *GfSpListObjectsByBucketNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.MaxKeys != 0 {
		n += 1 + sovMetadata(uint64(m.MaxKeys))
	}
	l = len(m.StartAfter)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.ContinuationToken)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Delimiter)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.IncludeRemoved {
		n += 2
	}
	return n
}

func (m *GfSpListObjectsByBucketNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Objects) > 0 {
		for _, e := range m.Objects {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	if m.KeyCount != 0 {
		n += 1 + sovMetadata(uint64(m.KeyCount))
	}
	if m.MaxKeys != 0 {
		n += 1 + sovMetadata(uint64(m.MaxKeys))
	}
	if m.IsTruncated {
		n += 2
	}
	l = len(m.NextContinuationToken)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Delimiter)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if len(m.CommonPrefixes) > 0 {
		for _, s := range m.CommonPrefixes {
			l = len(s)
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	l = len(m.ContinuationToken)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpGetBucketByBucketNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.IncludePrivate {
		n += 2
	}
	return n
}

func (m *GfSpGetBucketByBucketNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bucket != nil {
		l = m.Bucket.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpGetBucketByBucketIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BucketId != 0 {
		n += 1 + sovMetadata(uint64(m.BucketId))
	}
	if m.IncludePrivate {
		n += 2
	}
	return n
}

func (m *GfSpGetBucketByBucketIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bucket != nil {
		l = m.Bucket.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpListDeletedObjectsByBlockNumberRangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartBlockNumber != 0 {
		n += 1 + sovMetadata(uint64(m.StartBlockNumber))
	}
	if m.EndBlockNumber != 0 {
		n += 1 + sovMetadata(uint64(m.EndBlockNumber))
	}
	if m.IncludePrivate {
		n += 2
	}
	return n
}

func (m *GfSpListDeletedObjectsByBlockNumberRangeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Objects) > 0 {
		for _, e := range m.Objects {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	if m.EndBlockNumber != 0 {
		n += 1 + sovMetadata(uint64(m.EndBlockNumber))
	}
	return n
}

func (m *GfSpGetUserBucketsCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.IncludeRemoved {
		n += 2
	}
	return n
}

func (m *GfSpGetUserBucketsCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovMetadata(uint64(m.Count))
	}
	return n
}

func (m *GfSpListExpiredBucketsBySpRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateAt != 0 {
		n += 1 + sovMetadata(uint64(m.CreateAt))
	}
	if m.PrimarySpId != 0 {
		n += 1 + sovMetadata(uint64(m.PrimarySpId))
	}
	if m.Limit != 0 {
		n += 1 + sovMetadata(uint64(m.Limit))
	}
	return n
}

func (m *GfSpListExpiredBucketsBySpResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Buckets) > 0 {
		for _, e := range m.Buckets {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	return n
}

func (m *GfSpGetObjectMetaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjectName)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.IncludePrivate {
		n += 2
	}
	return n
}

func (m *GfSpGetObjectMetaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpGetPaymentByBucketNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.IncludePrivate {
		n += 2
	}
	return n
}

func (m *GfSpGetPaymentByBucketNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StreamRecord != nil {
		l = m.StreamRecord.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpGetPaymentByBucketIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BucketId != 0 {
		n += 1 + sovMetadata(uint64(m.BucketId))
	}
	if m.IncludePrivate {
		n += 2
	}
	return n
}

func (m *GfSpGetPaymentByBucketIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StreamRecord != nil {
		l = m.StreamRecord.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpGetBucketMetaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.IncludePrivate {
		n += 2
	}
	return n
}

func (m *GfSpGetBucketMetaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bucket != nil {
		l = m.Bucket.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.StreamRecord != nil {
		l = m.StreamRecord.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpGetEndpointBySpIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpId != 0 {
		n += 1 + sovMetadata(uint64(m.SpId))
	}
	return n
}

func (m *GfSpGetEndpointBySpIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpGetBucketReadQuotaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BucketInfo != nil {
		l = m.BucketInfo.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.YearMonth)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpGetBucketReadQuotaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.ChargedQuotaSize != 0 {
		n += 1 + sovMetadata(uint64(m.ChargedQuotaSize))
	}
	if m.SpFreeQuotaSize != 0 {
		n += 1 + sovMetadata(uint64(m.SpFreeQuotaSize))
	}
	if m.ConsumedSize != 0 {
		n += 1 + sovMetadata(uint64(m.ConsumedSize))
	}
	if m.FreeQuotaConsumeSize != 0 {
		n += 1 + sovMetadata(uint64(m.FreeQuotaConsumeSize))
	}
	return n
}

func (m *GfSpGetLatestBucketReadQuotaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BucketId != 0 {
		n += 1 + sovMetadata(uint64(m.BucketId))
	}
	return n
}

func (m *GfSpGetLatestBucketReadQuotaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Quota != nil {
		l = m.Quota.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpListBucketReadRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BucketInfo != nil {
		l = m.BucketInfo.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.StartTimestampUs != 0 {
		n += 1 + sovMetadata(uint64(m.StartTimestampUs))
	}
	if m.EndTimestampUs != 0 {
		n += 1 + sovMetadata(uint64(m.EndTimestampUs))
	}
	if m.MaxRecordNum != 0 {
		n += 1 + sovMetadata(uint64(m.MaxRecordNum))
	}
	return n
}

func (m *ReadRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjectName)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.ObjectId != 0 {
		n += 1 + sovMetadata(uint64(m.ObjectId))
	}
	l = len(m.AccountAddress)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.TimestampUs != 0 {
		n += 1 + sovMetadata(uint64(m.TimestampUs))
	}
	if m.ReadSize != 0 {
		n += 1 + sovMetadata(uint64(m.ReadSize))
	}
	return n
}

func (m *GfSpListBucketReadRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if len(m.ReadRecords) > 0 {
		for _, e := range m.ReadRecords {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	if m.NextStartTimestampUs != 0 {
		n += 1 + sovMetadata(uint64(m.NextStartTimestampUs))
	}
	return n
}

func (m *GfSpQueryUploadProgressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjectId != 0 {
		n += 1 + sovMetadata(uint64(m.ObjectId))
	}
	return n
}

func (m *GfSpQueryUploadProgressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovMetadata(uint64(m.State))
	}
	l = len(m.ErrDescription)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpQueryResumableUploadSegmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjectId != 0 {
		n += 1 + sovMetadata(uint64(m.ObjectId))
	}
	return n
}

func (m *GfSpQueryResumableUploadSegmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.SegmentCount != 0 {
		n += 1 + sovMetadata(uint64(m.SegmentCount))
	}
	return n
}

func (m *Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovMetadata(uint64(m.CreateAt))
	}
	if m.CreateTime != 0 {
		n += 1 + sovMetadata(uint64(m.CreateTime))
	}
	if m.UpdateAt != 0 {
		n += 1 + sovMetadata(uint64(m.UpdateAt))
	}
	if m.UpdateTime != 0 {
		n += 1 + sovMetadata(uint64(m.UpdateTime))
	}
	if m.NumberOfMembers != 0 {
		n += 1 + sovMetadata(uint64(m.NumberOfMembers))
	}
	if m.Removed {
		n += 2
	}
	return n
}

func (m *GroupMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovMetadata(uint64(m.CreateAt))
	}
	if m.CreateTime != 0 {
		n += 1 + sovMetadata(uint64(m.CreateTime))
	}
	if m.UpdateAt != 0 {
		n += 1 + sovMetadata(uint64(m.UpdateAt))
	}
	if m.UpdateTime != 0 {
		n += 1 + sovMetadata(uint64(m.UpdateTime))
	}
	if m.Removed {
		n += 2
	}
	if m.ExpirationTime != 0 {
		n += 1 + sovMetadata(uint64(m.ExpirationTime))
	}
	return n
}

func (m *GfSpGetGroupListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.SourceType)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovMetadata(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovMetadata(uint64(m.Offset))
	}
	if m.IncludeRemoved {
		n += 2
	}
	return n
}

func (m *GfSpGetGroupListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovMetadata(uint64(m.Count))
	}
	return n
}

func (m *GfSpListBucketsByIDsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BucketIds) > 0 {
		l = 0
		for _, e := range m.BucketIds {
			l += sovMetadata(uint64(e))
		}
		n += 1 + sovMetadata(uint64(l)) + l
	}
	if m.IncludeRemoved {
		n += 2
	}
	return n
}

func (m *GfSpListBucketsByIDsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Buckets) > 0 {
		for k, v := range m.Buckets {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMetadata(uint64(l))
			}
			mapEntrySize := 1 + sovMetadata(uint64(k)) + l
			n += mapEntrySize + 1 + sovMetadata(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GfSpListObjectsByIDsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ObjectIds) > 0 {
		l = 0
		for _, e := range m.ObjectIds {
			l += sovMetadata(uint64(e))
		}
		n += 1 + sovMetadata(uint64(l)) + l
	}
	if m.IncludeRemoved {
		n += 2
	}
	return n
}

func (m *GfSpListObjectsByIDsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Objects) > 0 {
		for k, v := range m.Objects {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMetadata(uint64(l))
			}
			mapEntrySize := 1 + sovMetadata(uint64(k)) + l
			n += mapEntrySize + 1 + sovMetadata(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GfSpVerifyPermissionByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.ResourceType != 0 {
		n += 1 + sovMetadata(uint64(m.ResourceType))
	}
	if m.ResourceId != 0 {
		n += 1 + sovMetadata(uint64(m.ResourceId))
	}
	if m.ActionType != 0 {
		n += 1 + sovMetadata(uint64(m.ActionType))
	}
	return n
}

func (m *GfSpVerifyPermissionByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Effect != 0 {
		n += 1 + sovMetadata(uint64(m.Effect))
	}
	return n
}

func (m *GfSpListVirtualGroupFamiliesBySpIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpId != 0 {
		n += 1 + sovMetadata(uint64(m.SpId))
	}
	return n
}

func (m *GfSpListVirtualGroupFamiliesBySpIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GlobalVirtualGroupFamilies) > 0 {
		for _, e := range m.GlobalVirtualGroupFamilies {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	return n
}

func (m *GfSpGetGlobalVirtualGroupByGvgIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GvgId != 0 {
		n += 1 + sovMetadata(uint64(m.GvgId))
	}
	return n
}

func (m *GfSpGetGlobalVirtualGroupByGvgIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalVirtualGroup != nil {
		l = m.GlobalVirtualGroup.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpGetVirtualGroupFamilyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VgfId != 0 {
		n += 1 + sovMetadata(uint64(m.VgfId))
	}
	return n
}

func (m *GfSpGetVirtualGroupFamilyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vgf != nil {
		l = m.Vgf.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpGetGlobalVirtualGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BucketId != 0 {
		n += 1 + sovMetadata(uint64(m.BucketId))
	}
	if m.LvgId != 0 {
		n += 1 + sovMetadata(uint64(m.LvgId))
	}
	return n
}

func (m *GfSpGetGlobalVirtualGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gvg != nil {
		l = m.Gvg.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpListObjectsInGVGRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GvgId != 0 {
		n += 1 + sovMetadata(uint64(m.GvgId))
	}
	if m.StartAfter != 0 {
		n += 1 + sovMetadata(uint64(m.StartAfter))
	}
	if m.Limit != 0 {
		n += 1 + sovMetadata(uint64(m.Limit))
	}
	return n
}

func (m *GfSpListObjectsInGVGResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Objects) > 0 {
		for _, e := range m.Objects {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	return n
}

func (m *GfSpListObjectsInGVGAndBucketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GvgId != 0 {
		n += 1 + sovMetadata(uint64(m.GvgId))
	}
	if m.BucketId != 0 {
		n += 1 + sovMetadata(uint64(m.BucketId))
	}
	if m.StartAfter != 0 {
		n += 1 + sovMetadata(uint64(m.StartAfter))
	}
	if m.Limit != 0 {
		n += 1 + sovMetadata(uint64(m.Limit))
	}
	return n
}

func (m *GfSpListObjectsInGVGAndBucketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Objects) > 0 {
		for _, e := range m.Objects {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	return n
}

func (m *GfSpListObjectsByGVGAndBucketForGCRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GvgId != 0 {
		n += 1 + sovMetadata(uint64(m.GvgId))
	}
	if m.BucketId != 0 {
		n += 1 + sovMetadata(uint64(m.BucketId))
	}
	if m.StartAfter != 0 {
		n += 1 + sovMetadata(uint64(m.StartAfter))
	}
	if m.Limit != 0 {
		n += 1 + sovMetadata(uint64(m.Limit))
	}
	return n
}

func (m *GfSpListObjectsByGVGAndBucketForGCResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Objects) > 0 {
		for _, e := range m.Objects {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	return n
}

func (m *GfSpListMigrateBucketEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockId != 0 {
		n += 1 + sovMetadata(uint64(m.BlockId))
	}
	if m.SpId != 0 {
		n += 1 + sovMetadata(uint64(m.SpId))
	}
	return n
}

func (m *ListMigrateBucketEvents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.CancelEvent != nil {
		l = m.CancelEvent.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.CompleteEvent != nil {
		l = m.CompleteEvent.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.RejectEvent != nil {
		l = m.RejectEvent.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpListMigrateBucketEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	return n
}

func (m *GfSpListSwapOutEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockId != 0 {
		n += 1 + sovMetadata(uint64(m.BlockId))
	}
	if m.SpId != 0 {
		n += 1 + sovMetadata(uint64(m.SpId))
	}
	return n
}

func (m *ListSwapOutEvents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Events != nil {
		l = m.Events.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.CancelEvents != nil {
		l = m.CancelEvents.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.CompleteEvents != nil {
		l = m.CompleteEvents.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpListSwapOutEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	return n
}

func (m *GfSpListGlobalVirtualGroupsBySecondarySPRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpId != 0 {
		n += 1 + sovMetadata(uint64(m.SpId))
	}
	return n
}

func (m *GfSpListGlobalVirtualGroupsBySecondarySPResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	return n
}

func (m *GfSpListGlobalVirtualGroupsByBucketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BucketId != 0 {
		n += 1 + sovMetadata(uint64(m.BucketId))
	}
	return n
}

func (m *GfSpListGlobalVirtualGroupsByBucketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	return n
}

func (m *GfSpListSpExitEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockId != 0 {
		n += 1 + sovMetadata(uint64(m.BlockId))
	}
	if m.SpId != 0 {
		n += 1 + sovMetadata(uint64(m.SpId))
	}
	return n
}

func (m *ListSpExitEvents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.CompleteEvent != nil {
		l = m.CompleteEvent.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpListSpExitEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Events != nil {
		l = m.Events.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpGetSPInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpGetSPInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageProvider != nil {
		l = m.StorageProvider.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StorageProviderInfo != nil {
		l = m.StorageProviderInfo.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.BlockSyncerInfo != nil {
		l = m.BlockSyncerInfo.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.ChainInfo != nil {
		l = m.ChainInfo.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *BlockSyncerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BsBlockHeight != 0 {
		n += 1 + sovMetadata(uint64(m.BsBlockHeight))
	}
	l = len(m.BsBlockHash)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.BsUpdateTime != 0 {
		n += 1 + sovMetadata(uint64(m.BsUpdateTime))
	}
	l = len(m.BsMysqlVersion)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.BsDefaultCharacterSetName)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.BsDefaultCollationName)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if len(m.BsModules) > 0 {
		for _, s := range m.BsModules {
			l = len(s)
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	if m.BsWorkers != 0 {
		n += 1 + sovMetadata(uint64(m.BsWorkers))
	}
	if m.BsEnableDualDb {
		n += 2
	}
	return n
}

func (m *ChainInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if len(m.ChainAddress) > 0 {
		for _, s := range m.ChainAddress {
			l = len(s)
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	return n
}

func (m *StorageProviderInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpCodeVersion)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.SpCodeCommit)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.SpArchitecture)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.SpGoVersion)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.SpOperatingSystem)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.SpOperatorAddress)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.SpDomainName)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpGetStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GfSpGetStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpGetUserGroupsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovMetadata(uint64(m.Limit))
	}
	if m.StartAfter != 0 {
		n += 1 + sovMetadata(uint64(m.StartAfter))
	}
	return n
}

func (m *GfSpGetUserGroupsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	return n
}

func (m *GfSpGetGroupMembersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovMetadata(uint64(m.GroupId))
	}
	if m.Limit != 0 {
		n += 1 + sovMetadata(uint64(m.Limit))
	}
	l = len(m.StartAfter)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpGetGroupMembersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	return n
}

func (m *GfSpGetUserOwnedGroupsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovMetadata(uint64(m.Limit))
	}
	if m.StartAfter != 0 {
		n += 1 + sovMetadata(uint64(m.StartAfter))
	}
	return n
}

func (m *GfSpGetUserOwnedGroupsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	return n
}

func (m *Policy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrincipalType != 0 {
		n += 1 + sovMetadata(uint64(m.PrincipalType))
	}
	l = len(m.PrincipalValue)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.ResourceType != 0 {
		n += 1 + sovMetadata(uint64(m.ResourceType))
	}
	l = len(m.ResourceId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.CreateTimestamp != 0 {
		n += 1 + sovMetadata(uint64(m.CreateTimestamp))
	}
	if m.UpdateTimestamp != 0 {
		n += 1 + sovMetadata(uint64(m.UpdateTimestamp))
	}
	if m.ExpirationTime != 0 {
		n += 1 + sovMetadata(uint64(m.ExpirationTime))
	}
	return n
}

func (m *GfSpListObjectPoliciesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjectName)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.ActionType != 0 {
		n += 1 + sovMetadata(uint64(m.ActionType))
	}
	if m.Limit != 0 {
		n += 1 + sovMetadata(uint64(m.Limit))
	}
	if m.StartAfter != 0 {
		n += 1 + sovMetadata(uint64(m.StartAfter))
	}
	return n
}

func (m *GfSpListObjectPoliciesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for _, e := range m.Policies {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	return n
}

func (m *GfSpListPaymentAccountStreamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PaymentAccount)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpListPaymentAccountStreamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Buckets) > 0 {
		for _, e := range m.Buckets {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	return n
}

func (m *GfSpListUserPaymentAccountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *GfSpListUserPaymentAccountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PaymentAccounts) > 0 {
		for _, e := range m.PaymentAccounts {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	return n
}

func (m *GfSpListGroupsByIDsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GroupIds) > 0 {
		l = 0
		for _, e := range m.GroupIds {
			l += sovMetadata(uint64(e))
		}
		n += 1 + sovMetadata(uint64(l)) + l
	}
	return n
}

func (m *GfSpListGroupsByIDsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for k, v := range m.Groups {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMetadata(uint64(l))
			}
			mapEntrySize := 1 + sovMetadata(uint64(k)) + l
			n += mapEntrySize + 1 + sovMetadata(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GfSpGetSPMigratingBucketNumberRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpId != 0 {
		n += 1 + sovMetadata(uint64(m.SpId))
	}
	return n
}

func (m *GfSpGetSPMigratingBucketNumberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovMetadata(uint64(m.Count))
	}
	return n
}

func (m *GfSpVerifyMigrateGVGPermissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BucketId != 0 {
		n += 1 + sovMetadata(uint64(m.BucketId))
	}
	if m.GvgId != 0 {
		n += 1 + sovMetadata(uint64(m.GvgId))
	}
	if m.DstSpId != 0 {
		n += 1 + sovMetadata(uint64(m.DstSpId))
	}
	return n
}

func (m *GfSpVerifyMigrateGVGPermissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Effect != 0 {
		n += 1 + sovMetadata(uint64(m.Effect))
	}
	return n
}

func (m *GfSpGetBucketSizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BucketId != 0 {
		n += 1 + sovMetadata(uint64(m.BucketId))
	}
	return n
}

func (m *GfSpGetBucketSizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BucketSize)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func sovMetadata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetadata(x uint64) (n int) {
	return sovMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Bucket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BucketInfo == nil {
				m.BucketInfo = &types.BucketInfo{}
			}
			if err := m.BucketInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Removed = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteAt", wireType)
			}
			m.DeleteAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeleteAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeleteReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Object) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Object: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Object: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectInfo == nil {
				m.ObjectInfo = &types.ObjectInfo{}
			}
			if err := m.ObjectInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockedBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Removed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteAt", wireType)
			}
			m.DeleteAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeleteAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeleteReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SealTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SealTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bucket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bucket == nil {
				m.Bucket = &Bucket{}
			}
			if err := m.Bucket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gvg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gvg == nil {
				m.Gvg = &types1.GlobalVirtualGroup{}
			}
			if err := m.Gvg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VGFInfoBucket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VGFInfoBucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VGFInfoBucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BucketInfo == nil {
				m.BucketInfo = &types.BucketInfo{}
			}
			if err := m.BucketInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Removed = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteAt", wireType)
			}
			m.DeleteAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeleteAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeleteReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vgf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vgf == nil {
				m.Vgf = &types1.GlobalVirtualGroupFamily{}
			}
			if err := m.Vgf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refundable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Refundable = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentAccountMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentAccountMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentAccountMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaymentAccount == nil {
				m.PaymentAccount = &PaymentAccount{}
			}
			if err := m.PaymentAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StreamRecord == nil {
				m.StreamRecord = &types2.StreamRecord{}
			}
			if err := m.StreamRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetUserBucketsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetUserBucketsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetUserBucketsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRemoved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRemoved = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetUserBucketsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetUserBucketsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetUserBucketsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buckets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buckets = append(m.Buckets, &VGFInfoBucket{})
			if err := m.Buckets[len(m.Buckets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListObjectsByBucketNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListObjectsByBucketNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListObjectsByBucketNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxKeys", wireType)
			}
			m.MaxKeys = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxKeys |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAfter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartAfter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinuationToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContinuationToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delimiter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delimiter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRemoved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRemoved = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListObjectsByBucketNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListObjectsByBucketNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListObjectsByBucketNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objects = append(m.Objects, &Object{})
			if err := m.Objects[len(m.Objects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyCount", wireType)
			}
			m.KeyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxKeys", wireType)
			}
			m.MaxKeys = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxKeys |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTruncated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTruncated = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextContinuationToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextContinuationToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delimiter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delimiter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonPrefixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommonPrefixes = append(m.CommonPrefixes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinuationToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContinuationToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetBucketByBucketNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetBucketByBucketNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetBucketByBucketNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludePrivate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludePrivate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetBucketByBucketNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetBucketByBucketNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetBucketByBucketNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bucket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bucket == nil {
				m.Bucket = &Bucket{}
			}
			if err := m.Bucket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetBucketByBucketIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetBucketByBucketIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetBucketByBucketIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketId", wireType)
			}
			m.BucketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BucketId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludePrivate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludePrivate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetBucketByBucketIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetBucketByBucketIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetBucketByBucketIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bucket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bucket == nil {
				m.Bucket = &Bucket{}
			}
			if err := m.Bucket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListDeletedObjectsByBlockNumberRangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListDeletedObjectsByBlockNumberRangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListDeletedObjectsByBlockNumberRangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlockNumber", wireType)
			}
			m.StartBlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlockNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlockNumber", wireType)
			}
			m.EndBlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlockNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludePrivate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludePrivate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListDeletedObjectsByBlockNumberRangeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListDeletedObjectsByBlockNumberRangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListDeletedObjectsByBlockNumberRangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objects = append(m.Objects, &Object{})
			if err := m.Objects[len(m.Objects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlockNumber", wireType)
			}
			m.EndBlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlockNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetUserBucketsCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetUserBucketsCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetUserBucketsCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRemoved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRemoved = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetUserBucketsCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetUserBucketsCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetUserBucketsCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListExpiredBucketsBySpRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListExpiredBucketsBySpRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListExpiredBucketsBySpRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimarySpId", wireType)
			}
			m.PrimarySpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimarySpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListExpiredBucketsBySpResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListExpiredBucketsBySpResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListExpiredBucketsBySpResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buckets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buckets = append(m.Buckets, &Bucket{})
			if err := m.Buckets[len(m.Buckets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetObjectMetaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetObjectMetaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetObjectMetaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludePrivate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludePrivate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetObjectMetaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetObjectMetaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetObjectMetaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetPaymentByBucketNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetPaymentByBucketNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetPaymentByBucketNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludePrivate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludePrivate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetPaymentByBucketNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetPaymentByBucketNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetPaymentByBucketNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StreamRecord == nil {
				m.StreamRecord = &types2.StreamRecord{}
			}
			if err := m.StreamRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetPaymentByBucketIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetPaymentByBucketIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetPaymentByBucketIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketId", wireType)
			}
			m.BucketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BucketId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludePrivate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludePrivate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetPaymentByBucketIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetPaymentByBucketIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetPaymentByBucketIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StreamRecord == nil {
				m.StreamRecord = &types2.StreamRecord{}
			}
			if err := m.StreamRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetBucketMetaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetBucketMetaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetBucketMetaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludePrivate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludePrivate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetBucketMetaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetBucketMetaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetBucketMetaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bucket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bucket == nil {
				m.Bucket = &VGFInfoBucket{}
			}
			if err := m.Bucket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StreamRecord == nil {
				m.StreamRecord = &types2.StreamRecord{}
			}
			if err := m.StreamRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetEndpointBySpIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetEndpointBySpIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetEndpointBySpIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpId", wireType)
			}
			m.SpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetEndpointBySpIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetEndpointBySpIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetEndpointBySpIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetBucketReadQuotaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetBucketReadQuotaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetBucketReadQuotaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BucketInfo == nil {
				m.BucketInfo = &types.BucketInfo{}
			}
			if err := m.BucketInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YearMonth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.YearMonth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetBucketReadQuotaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetBucketReadQuotaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetBucketReadQuotaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &gfsperrors.GfSpError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargedQuotaSize", wireType)
			}
			m.ChargedQuotaSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChargedQuotaSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpFreeQuotaSize", wireType)
			}
			m.SpFreeQuotaSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpFreeQuotaSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumedSize", wireType)
			}
			m.ConsumedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsumedSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeQuotaConsumeSize", wireType)
			}
			m.FreeQuotaConsumeSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeQuotaConsumeSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetLatestBucketReadQuotaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetLatestBucketReadQuotaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetLatestBucketReadQuotaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketId", wireType)
			}
			m.BucketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BucketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetLatestBucketReadQuotaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetLatestBucketReadQuotaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetLatestBucketReadQuotaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &gfsperrors.GfSpError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quota", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Quota == nil {
				m.Quota = &gfsptask.GfSpBucketQuotaInfo{}
			}
			if err := m.Quota.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListBucketReadRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListBucketReadRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListBucketReadRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BucketInfo == nil {
				m.BucketInfo = &types.BucketInfo{}
			}
			if err := m.BucketInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestampUs", wireType)
			}
			m.StartTimestampUs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimestampUs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestampUs", wireType)
			}
			m.EndTimestampUs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTimestampUs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRecordNum", wireType)
			}
			m.MaxRecordNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRecordNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampUs", wireType)
			}
			m.TimestampUs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampUs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadSize", wireType)
			}
			m.ReadSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListBucketReadRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListBucketReadRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListBucketReadRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &gfsperrors.GfSpError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReadRecords = append(m.ReadRecords, &ReadRecord{})
			if err := m.ReadRecords[len(m.ReadRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextStartTimestampUs", wireType)
			}
			m.NextStartTimestampUs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextStartTimestampUs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpQueryUploadProgressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpQueryUploadProgressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpQueryUploadProgressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpQueryUploadProgressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpQueryUploadProgressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpQueryUploadProgressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &gfsperrors.GfSpError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= types3.TaskState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpQueryResumableUploadSegmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpQueryResumableUploadSegmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpQueryResumableUploadSegmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpQueryResumableUploadSegmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpQueryResumableUploadSegmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpQueryResumableUploadSegmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &gfsperrors.GfSpError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentCount", wireType)
			}
			m.SegmentCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &types.GroupInfo{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfMembers", wireType)
			}
			m.NumberOfMembers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfMembers |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Removed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &types.GroupInfo{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Removed = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			m.ExpirationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetGroupListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetGroupListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetGroupListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRemoved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRemoved = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetGroupListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetGroupListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetGroupListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListBucketsByIDsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListBucketsByIDsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListBucketsByIDsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetadata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BucketIds = append(m.BucketIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetadata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMetadata
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMetadata
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BucketIds) == 0 {
					m.BucketIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BucketIds = append(m.BucketIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRemoved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRemoved = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListBucketsByIDsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListBucketsByIDsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListBucketsByIDsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buckets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Buckets == nil {
				m.Buckets = make(map[uint64]*Bucket)
			}
			var mapkey uint64
			var mapvalue *Bucket
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetadata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMetadata
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMetadata
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Bucket{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMetadata(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMetadata
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Buckets[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListObjectsByIDsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListObjectsByIDsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListObjectsByIDsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetadata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ObjectIds = append(m.ObjectIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetadata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMetadata
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMetadata
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ObjectIds) == 0 {
					m.ObjectIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ObjectIds = append(m.ObjectIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRemoved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRemoved = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListObjectsByIDsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListObjectsByIDsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListObjectsByIDsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Objects == nil {
				m.Objects = make(map[uint64]*Object)
			}
			var mapkey uint64
			var mapvalue *Object
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetadata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMetadata
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMetadata
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Object{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMetadata(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMetadata
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Objects[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpVerifyPermissionByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpVerifyPermissionByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpVerifyPermissionByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceType", wireType)
			}
			m.ResourceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceType |= resource.ResourceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			m.ResourceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			m.ActionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionType |= types4.ActionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpVerifyPermissionByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpVerifyPermissionByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpVerifyPermissionByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effect", wireType)
			}
			m.Effect = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Effect |= types4.Effect(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListVirtualGroupFamiliesBySpIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListVirtualGroupFamiliesBySpIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListVirtualGroupFamiliesBySpIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpId", wireType)
			}
			m.SpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListVirtualGroupFamiliesBySpIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListVirtualGroupFamiliesBySpIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListVirtualGroupFamiliesBySpIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroupFamilies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GlobalVirtualGroupFamilies = append(m.GlobalVirtualGroupFamilies, &types1.GlobalVirtualGroupFamily{})
			if err := m.GlobalVirtualGroupFamilies[len(m.GlobalVirtualGroupFamilies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetGlobalVirtualGroupByGvgIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetGlobalVirtualGroupByGvgIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetGlobalVirtualGroupByGvgIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GvgId", wireType)
			}
			m.GvgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GvgId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetGlobalVirtualGroupByGvgIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetGlobalVirtualGroupByGvgIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetGlobalVirtualGroupByGvgIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVirtualGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GlobalVirtualGroup == nil {
				m.GlobalVirtualGroup = &types1.GlobalVirtualGroup{}
			}
			if err := m.GlobalVirtualGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetVirtualGroupFamilyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetVirtualGroupFamilyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetVirtualGroupFamilyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VgfId", wireType)
			}
			m.VgfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VgfId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetVirtualGroupFamilyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetVirtualGroupFamilyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetVirtualGroupFamilyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vgf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vgf == nil {
				m.Vgf = &types1.GlobalVirtualGroupFamily{}
			}
			if err := m.Vgf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetGlobalVirtualGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetGlobalVirtualGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetGlobalVirtualGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketId", wireType)
			}
			m.BucketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BucketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LvgId", wireType)
			}
			m.LvgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LvgId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetGlobalVirtualGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetGlobalVirtualGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetGlobalVirtualGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gvg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gvg == nil {
				m.Gvg = &types1.GlobalVirtualGroup{}
			}
			if err := m.Gvg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListObjectsInGVGRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListObjectsInGVGRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListObjectsInGVGRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GvgId", wireType)
			}
			m.GvgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GvgId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAfter", wireType)
			}
			m.StartAfter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAfter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListObjectsInGVGResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListObjectsInGVGResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListObjectsInGVGResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objects = append(m.Objects, &ObjectDetails{})
			if err := m.Objects[len(m.Objects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListObjectsInGVGAndBucketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListObjectsInGVGAndBucketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListObjectsInGVGAndBucketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GvgId", wireType)
			}
			m.GvgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GvgId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketId", wireType)
			}
			m.BucketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BucketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAfter", wireType)
			}
			m.StartAfter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAfter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListObjectsInGVGAndBucketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListObjectsInGVGAndBucketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListObjectsInGVGAndBucketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objects = append(m.Objects, &ObjectDetails{})
			if err := m.Objects[len(m.Objects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListObjectsByGVGAndBucketForGCRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListObjectsByGVGAndBucketForGCRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListObjectsByGVGAndBucketForGCRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GvgId", wireType)
			}
			m.GvgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GvgId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketId", wireType)
			}
			m.BucketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BucketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAfter", wireType)
			}
			m.StartAfter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAfter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListObjectsByGVGAndBucketForGCResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListObjectsByGVGAndBucketForGCResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListObjectsByGVGAndBucketForGCResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objects = append(m.Objects, &ObjectDetails{})
			if err := m.Objects[len(m.Objects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListMigrateBucketEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListMigrateBucketEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListMigrateBucketEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockId", wireType)
			}
			m.BlockId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpId", wireType)
			}
			m.SpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMigrateBucketEvents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListMigrateBucketEvents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListMigrateBucketEvents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &types.EventMigrationBucket{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CancelEvent == nil {
				m.CancelEvent = &types.EventCancelMigrationBucket{}
			}
			if err := m.CancelEvent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompleteEvent == nil {
				m.CompleteEvent = &types.EventCompleteMigrationBucket{}
			}
			if err := m.CompleteEvent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RejectEvent == nil {
				m.RejectEvent = &types.EventRejectMigrateBucket{}
			}
			if err := m.RejectEvent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListMigrateBucketEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListMigrateBucketEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListMigrateBucketEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &ListMigrateBucketEvents{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListSwapOutEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListSwapOutEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListSwapOutEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockId", wireType)
			}
			m.BlockId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpId", wireType)
			}
			m.SpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSwapOutEvents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSwapOutEvents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSwapOutEvents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Events == nil {
				m.Events = &types1.EventSwapOut{}
			}
			if err := m.Events.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CancelEvents == nil {
				m.CancelEvents = &types1.EventCancelSwapOut{}
			}
			if err := m.CancelEvents.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompleteEvents == nil {
				m.CompleteEvents = &types1.EventCompleteSwapOut{}
			}
			if err := m.CompleteEvents.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListSwapOutEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListSwapOutEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListSwapOutEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &ListSwapOutEvents{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListGlobalVirtualGroupsBySecondarySPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListGlobalVirtualGroupsBySecondarySPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListGlobalVirtualGroupsBySecondarySPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpId", wireType)
			}
			m.SpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListGlobalVirtualGroupsBySecondarySPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListGlobalVirtualGroupsBySecondarySPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListGlobalVirtualGroupsBySecondarySPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &types1.GlobalVirtualGroup{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListGlobalVirtualGroupsByBucketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListGlobalVirtualGroupsByBucketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListGlobalVirtualGroupsByBucketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketId", wireType)
			}
			m.BucketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BucketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListGlobalVirtualGroupsByBucketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListGlobalVirtualGroupsByBucketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListGlobalVirtualGroupsByBucketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &types1.GlobalVirtualGroup{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListSpExitEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListSpExitEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListSpExitEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockId", wireType)
			}
			m.BlockId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpId", wireType)
			}
			m.SpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSpExitEvents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSpExitEvents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSpExitEvents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &types1.EventStorageProviderExit{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompleteEvent == nil {
				m.CompleteEvent = &types1.EventCompleteStorageProviderExit{}
			}
			if err := m.CompleteEvent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListSpExitEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListSpExitEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListSpExitEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Events == nil {
				m.Events = &ListSpExitEvents{}
			}
			if err := m.Events.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetSPInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetSPInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetSPInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetSPInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetSPInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetSPInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageProvider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StorageProvider == nil {
				m.StorageProvider = &types5.StorageProvider{}
			}
			if err := m.StorageProvider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageProviderInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StorageProviderInfo == nil {
				m.StorageProviderInfo = &StorageProviderInfo{}
			}
			if err := m.StorageProviderInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSyncerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockSyncerInfo == nil {
				m.BlockSyncerInfo = &BlockSyncerInfo{}
			}
			if err := m.BlockSyncerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainInfo == nil {
				m.ChainInfo = &ChainInfo{}
			}
			if err := m.ChainInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockSyncerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockSyncerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockSyncerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BsBlockHeight", wireType)
			}
			m.BsBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BsBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BsBlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BsBlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BsUpdateTime", wireType)
			}
			m.BsUpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BsUpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BsMysqlVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BsMysqlVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BsDefaultCharacterSetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BsDefaultCharacterSetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BsDefaultCollationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BsDefaultCollationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BsModules", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BsModules = append(m.BsModules, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BsWorkers", wireType)
			}
			m.BsWorkers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BsWorkers |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BsEnableDualDb", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BsEnableDualDb = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainAddress = append(m.ChainAddress, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageProviderInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageProviderInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageProviderInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpCodeVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpCodeVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpCodeCommit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpCodeCommit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpArchitecture", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpArchitecture = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpGoVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpGoVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpOperatingSystem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpOperatingSystem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpOperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpOperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpDomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpDomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetUserGroupsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetUserGroupsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetUserGroupsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAfter", wireType)
			}
			m.StartAfter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAfter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetUserGroupsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetUserGroupsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetUserGroupsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupMember{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetGroupMembersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetGroupMembersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetGroupMembersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAfter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartAfter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetGroupMembersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetGroupMembersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetGroupMembersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupMember{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetUserOwnedGroupsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetUserOwnedGroupsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetUserOwnedGroupsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAfter", wireType)
			}
			m.StartAfter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAfter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetUserOwnedGroupsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetUserOwnedGroupsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetUserOwnedGroupsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupMember{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Policy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Policy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Policy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrincipalType", wireType)
			}
			m.PrincipalType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrincipalType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrincipalValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrincipalValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceType", wireType)
			}
			m.ResourceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceType |= resource.ResourceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTimestamp", wireType)
			}
			m.CreateTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTimestamp", wireType)
			}
			m.UpdateTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			m.ExpirationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListObjectPoliciesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListObjectPoliciesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListObjectPoliciesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			m.ActionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionType |= types4.ActionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAfter", wireType)
			}
			m.StartAfter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAfter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListObjectPoliciesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListObjectPoliciesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListObjectPoliciesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policies = append(m.Policies, &Policy{})
			if err := m.Policies[len(m.Policies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListPaymentAccountStreamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListPaymentAccountStreamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListPaymentAccountStreamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListPaymentAccountStreamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListPaymentAccountStreamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListPaymentAccountStreamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buckets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buckets = append(m.Buckets, &Bucket{})
			if err := m.Buckets[len(m.Buckets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListUserPaymentAccountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListUserPaymentAccountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListUserPaymentAccountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListUserPaymentAccountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListUserPaymentAccountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListUserPaymentAccountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAccounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentAccounts = append(m.PaymentAccounts, &PaymentAccountMeta{})
			if err := m.PaymentAccounts[len(m.PaymentAccounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListGroupsByIDsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListGroupsByIDsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListGroupsByIDsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetadata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GroupIds = append(m.GroupIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetadata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMetadata
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMetadata
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GroupIds) == 0 {
					m.GroupIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GroupIds = append(m.GroupIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpListGroupsByIDsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpListGroupsByIDsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpListGroupsByIDsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Groups == nil {
				m.Groups = make(map[uint64]*Group)
			}
			var mapkey uint64
			var mapvalue *Group
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetadata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMetadata
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMetadata
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Group{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMetadata(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMetadata
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Groups[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetSPMigratingBucketNumberRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetSPMigratingBucketNumberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetSPMigratingBucketNumberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpId", wireType)
			}
			m.SpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetSPMigratingBucketNumberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetSPMigratingBucketNumberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetSPMigratingBucketNumberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpVerifyMigrateGVGPermissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpVerifyMigrateGVGPermissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpVerifyMigrateGVGPermissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketId", wireType)
			}
			m.BucketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BucketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GvgId", wireType)
			}
			m.GvgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GvgId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstSpId", wireType)
			}
			m.DstSpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstSpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpVerifyMigrateGVGPermissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpVerifyMigrateGVGPermissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpVerifyMigrateGVGPermissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effect", wireType)
			}
			m.Effect = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Effect |= types4.Effect(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetBucketSizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetBucketSizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetBucketSizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketId", wireType)
			}
			m.BucketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BucketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetBucketSizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetBucketSizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetBucketSizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetadata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetadata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetadata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetadata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetadata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetadata = fmt.Errorf("proto: unexpected end of group")
)
