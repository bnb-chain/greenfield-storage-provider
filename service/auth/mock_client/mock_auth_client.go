// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/ruojunm/binance_workspace/greenfield-storage-provider/service/auth/types/auth.pb.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	types "github.com/bnb-chain/greenfield-storage-provider/service/auth/types"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAuthServiceClient is a mock of AuthServiceClient interface.
type MockAuthServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceClientMockRecorder
}

// MockAuthServiceClientMockRecorder is the mock recorder for MockAuthServiceClient.
type MockAuthServiceClientMockRecorder struct {
	mock *MockAuthServiceClient
}

// NewMockAuthServiceClient creates a new mock instance.
func NewMockAuthServiceClient(ctrl *gomock.Controller) *MockAuthServiceClient {
	mock := &MockAuthServiceClient{ctrl: ctrl}
	mock.recorder = &MockAuthServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceClient) EXPECT() *MockAuthServiceClientMockRecorder {
	return m.recorder
}

// GetAuthNonce mocks base method.
func (m *MockAuthServiceClient) GetAuthNonce(ctx context.Context, in *types.GetAuthNonceRequest, opts ...grpc.CallOption) (*types.GetAuthNonceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthNonce", varargs...)
	ret0, _ := ret[0].(*types.GetAuthNonceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthNonce indicates an expected call of GetAuthNonce.
func (mr *MockAuthServiceClientMockRecorder) GetAuthNonce(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthNonce", reflect.TypeOf((*MockAuthServiceClient)(nil).GetAuthNonce), varargs...)
}

// UpdateUserPublicKey mocks base method.
func (m *MockAuthServiceClient) UpdateUserPublicKey(ctx context.Context, in *types.UpdateUserPublicKeyRequest, opts ...grpc.CallOption) (*types.UpdateUserPublicKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserPublicKey", varargs...)
	ret0, _ := ret[0].(*types.UpdateUserPublicKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPublicKey indicates an expected call of UpdateUserPublicKey.
func (mr *MockAuthServiceClientMockRecorder) UpdateUserPublicKey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPublicKey", reflect.TypeOf((*MockAuthServiceClient)(nil).UpdateUserPublicKey), varargs...)
}

// VerifyOffChainSignature mocks base method.
func (m *MockAuthServiceClient) VerifyOffChainSignature(ctx context.Context, in *types.VerifyOffChainSignatureRequest, opts ...grpc.CallOption) (*types.VerifyOffChainSignatureResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyOffChainSignature", varargs...)
	ret0, _ := ret[0].(*types.VerifyOffChainSignatureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyOffChainSignature indicates an expected call of VerifyOffChainSignature.
func (mr *MockAuthServiceClientMockRecorder) VerifyOffChainSignature(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOffChainSignature", reflect.TypeOf((*MockAuthServiceClient)(nil).VerifyOffChainSignature), varargs...)
}

// MockAuthServiceServer is a mock of AuthServiceServer interface.
type MockAuthServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceServerMockRecorder
}

// MockAuthServiceServerMockRecorder is the mock recorder for MockAuthServiceServer.
type MockAuthServiceServerMockRecorder struct {
	mock *MockAuthServiceServer
}

// NewMockAuthServiceServer creates a new mock instance.
func NewMockAuthServiceServer(ctrl *gomock.Controller) *MockAuthServiceServer {
	mock := &MockAuthServiceServer{ctrl: ctrl}
	mock.recorder = &MockAuthServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceServer) EXPECT() *MockAuthServiceServerMockRecorder {
	return m.recorder
}

// GetAuthNonce mocks base method.
func (m *MockAuthServiceServer) GetAuthNonce(arg0 context.Context, arg1 *types.GetAuthNonceRequest) (*types.GetAuthNonceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthNonce", arg0, arg1)
	ret0, _ := ret[0].(*types.GetAuthNonceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthNonce indicates an expected call of GetAuthNonce.
func (mr *MockAuthServiceServerMockRecorder) GetAuthNonce(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthNonce", reflect.TypeOf((*MockAuthServiceServer)(nil).GetAuthNonce), arg0, arg1)
}

// UpdateUserPublicKey mocks base method.
func (m *MockAuthServiceServer) UpdateUserPublicKey(arg0 context.Context, arg1 *types.UpdateUserPublicKeyRequest) (*types.UpdateUserPublicKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPublicKey", arg0, arg1)
	ret0, _ := ret[0].(*types.UpdateUserPublicKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPublicKey indicates an expected call of UpdateUserPublicKey.
func (mr *MockAuthServiceServerMockRecorder) UpdateUserPublicKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPublicKey", reflect.TypeOf((*MockAuthServiceServer)(nil).UpdateUserPublicKey), arg0, arg1)
}

// VerifyOffChainSignature mocks base method.
func (m *MockAuthServiceServer) VerifyOffChainSignature(arg0 context.Context, arg1 *types.VerifyOffChainSignatureRequest) (*types.VerifyOffChainSignatureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOffChainSignature", arg0, arg1)
	ret0, _ := ret[0].(*types.VerifyOffChainSignatureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyOffChainSignature indicates an expected call of VerifyOffChainSignature.
func (mr *MockAuthServiceServerMockRecorder) VerifyOffChainSignature(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOffChainSignature", reflect.TypeOf((*MockAuthServiceServer)(nil).VerifyOffChainSignature), arg0, arg1)
}
