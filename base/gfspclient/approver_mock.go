// Code generated by MockGen. DO NOT EDIT.
// Source: ./approver.go

// Package gfspclient is a generated GoMock package.
package gfspclient

import (
	context "context"
	reflect "reflect"

	task "github.com/bnb-chain/greenfield-storage-provider/core/task"
	gomock "go.uber.org/mock/gomock"
)

// MockApproverAPI is a mock of ApproverAPI interface.
type MockApproverAPI struct {
	ctrl     *gomock.Controller
	recorder *MockApproverAPIMockRecorder
}

// MockApproverAPIMockRecorder is the mock recorder for MockApproverAPI.
type MockApproverAPIMockRecorder struct {
	mock *MockApproverAPI
}

// NewMockApproverAPI creates a new mock instance.
func NewMockApproverAPI(ctrl *gomock.Controller) *MockApproverAPI {
	mock := &MockApproverAPI{ctrl: ctrl}
	mock.recorder = &MockApproverAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApproverAPI) EXPECT() *MockApproverAPIMockRecorder {
	return m.recorder
}

// AskCreateBucketApproval mocks base method.
func (m *MockApproverAPI) AskCreateBucketApproval(ctx context.Context, t task.ApprovalCreateBucketTask) (bool, task.ApprovalCreateBucketTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskCreateBucketApproval", ctx, t)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(task.ApprovalCreateBucketTask)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AskCreateBucketApproval indicates an expected call of AskCreateBucketApproval.
func (mr *MockApproverAPIMockRecorder) AskCreateBucketApproval(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskCreateBucketApproval", reflect.TypeOf((*MockApproverAPI)(nil).AskCreateBucketApproval), ctx, t)
}

// AskCreateObjectApproval mocks base method.
func (m *MockApproverAPI) AskCreateObjectApproval(ctx context.Context, t task.ApprovalCreateObjectTask) (bool, task.ApprovalCreateObjectTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskCreateObjectApproval", ctx, t)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(task.ApprovalCreateObjectTask)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AskCreateObjectApproval indicates an expected call of AskCreateObjectApproval.
func (mr *MockApproverAPIMockRecorder) AskCreateObjectApproval(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskCreateObjectApproval", reflect.TypeOf((*MockApproverAPI)(nil).AskCreateObjectApproval), ctx, t)
}

// AskMigrateBucketApproval mocks base method.
func (m *MockApproverAPI) AskMigrateBucketApproval(ctx context.Context, t task.ApprovalMigrateBucketTask) (bool, task.ApprovalMigrateBucketTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskMigrateBucketApproval", ctx, t)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(task.ApprovalMigrateBucketTask)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AskMigrateBucketApproval indicates an expected call of AskMigrateBucketApproval.
func (mr *MockApproverAPIMockRecorder) AskMigrateBucketApproval(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskMigrateBucketApproval", reflect.TypeOf((*MockApproverAPI)(nil).AskMigrateBucketApproval), ctx, t)
}
