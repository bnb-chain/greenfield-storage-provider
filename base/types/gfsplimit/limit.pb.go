// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: base/types/gfsplimit/limit.proto

package gfsplimit

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GfSpLimit struct {
	Memory              int64 `protobuf:"varint,1,opt,name=memory,proto3" json:"memory,omitempty"`
	Tasks               int32 `protobuf:"varint,2,opt,name=tasks,proto3" json:"tasks,omitempty"`
	TasksHighPriority   int32 `protobuf:"varint,3,opt,name=tasks_high_priority,json=tasksHighPriority,proto3" json:"tasks_high_priority,omitempty"`
	TasksMediumPriority int32 `protobuf:"varint,4,opt,name=tasks_medium_priority,json=tasksMediumPriority,proto3" json:"tasks_medium_priority,omitempty"`
	TasksLowPriority    int32 `protobuf:"varint,5,opt,name=tasks_low_priority,json=tasksLowPriority,proto3" json:"tasks_low_priority,omitempty"`
	Fd                  int32 `protobuf:"varint,6,opt,name=fd,proto3" json:"fd,omitempty"`
	Conns               int32 `protobuf:"varint,7,opt,name=conns,proto3" json:"conns,omitempty"`
	ConnsInbound        int32 `protobuf:"varint,8,opt,name=conns_inbound,json=connsInbound,proto3" json:"conns_inbound,omitempty"`
	ConnsOutbound       int32 `protobuf:"varint,9,opt,name=conns_outbound,json=connsOutbound,proto3" json:"conns_outbound,omitempty"`
}

func (m *GfSpLimit) Reset()         { *m = GfSpLimit{} }
func (m *GfSpLimit) String() string { return proto.CompactTextString(m) }
func (*GfSpLimit) ProtoMessage()    {}
func (*GfSpLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_e212271a6ab2b8df, []int{0}
}
func (m *GfSpLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpLimit.Merge(m, src)
}
func (m *GfSpLimit) XXX_Size() int {
	return m.Size()
}
func (m *GfSpLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpLimit.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpLimit proto.InternalMessageInfo

func (m *GfSpLimit) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *GfSpLimit) GetTasks() int32 {
	if m != nil {
		return m.Tasks
	}
	return 0
}

func (m *GfSpLimit) GetTasksHighPriority() int32 {
	if m != nil {
		return m.TasksHighPriority
	}
	return 0
}

func (m *GfSpLimit) GetTasksMediumPriority() int32 {
	if m != nil {
		return m.TasksMediumPriority
	}
	return 0
}

func (m *GfSpLimit) GetTasksLowPriority() int32 {
	if m != nil {
		return m.TasksLowPriority
	}
	return 0
}

func (m *GfSpLimit) GetFd() int32 {
	if m != nil {
		return m.Fd
	}
	return 0
}

func (m *GfSpLimit) GetConns() int32 {
	if m != nil {
		return m.Conns
	}
	return 0
}

func (m *GfSpLimit) GetConnsInbound() int32 {
	if m != nil {
		return m.ConnsInbound
	}
	return 0
}

func (m *GfSpLimit) GetConnsOutbound() int32 {
	if m != nil {
		return m.ConnsOutbound
	}
	return 0
}

type GfSpLimiter struct {
	System       *GfSpLimit            `protobuf:"bytes,1,opt,name=system,proto3" json:"system,omitempty"`
	Transient    *GfSpLimit            `protobuf:"bytes,2,opt,name=transient,proto3" json:"transient,omitempty"`
	ServiceLimit map[string]*GfSpLimit `protobuf:"bytes,3,rep,name=service_limit,json=serviceLimit,proto3" json:"service_limit,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GfSpLimiter) Reset()         { *m = GfSpLimiter{} }
func (m *GfSpLimiter) String() string { return proto.CompactTextString(m) }
func (*GfSpLimiter) ProtoMessage()    {}
func (*GfSpLimiter) Descriptor() ([]byte, []int) {
	return fileDescriptor_e212271a6ab2b8df, []int{1}
}
func (m *GfSpLimiter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpLimiter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpLimiter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpLimiter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpLimiter.Merge(m, src)
}
func (m *GfSpLimiter) XXX_Size() int {
	return m.Size()
}
func (m *GfSpLimiter) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpLimiter.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpLimiter proto.InternalMessageInfo

func (m *GfSpLimiter) GetSystem() *GfSpLimit {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *GfSpLimiter) GetTransient() *GfSpLimit {
	if m != nil {
		return m.Transient
	}
	return nil
}

func (m *GfSpLimiter) GetServiceLimit() map[string]*GfSpLimit {
	if m != nil {
		return m.ServiceLimit
	}
	return nil
}

func init() {
	proto.RegisterType((*GfSpLimit)(nil), "base.types.gfsplimit.GfSpLimit")
	proto.RegisterType((*GfSpLimiter)(nil), "base.types.gfsplimit.GfSpLimiter")
	proto.RegisterMapType((map[string]*GfSpLimit)(nil), "base.types.gfsplimit.GfSpLimiter.ServiceLimitEntry")
}

func init() { proto.RegisterFile("base/types/gfsplimit/limit.proto", fileDescriptor_e212271a6ab2b8df) }

var fileDescriptor_e212271a6ab2b8df = []byte{
	// 452 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x9b, 0xc4, 0x56, 0x3b, 0xdd, 0x5d, 0x76, 0xc7, 0x55, 0x82, 0x87, 0x58, 0x56, 0x84,
	0x1e, 0xec, 0x04, 0xba, 0x88, 0x22, 0x78, 0x11, 0x16, 0x15, 0x56, 0x94, 0xec, 0x45, 0xbc, 0xc4,
	0xa4, 0x79, 0x49, 0x86, 0x6d, 0x66, 0xc2, 0xcc, 0xa4, 0x4b, 0xbe, 0x85, 0x5f, 0xc8, 0x83, 0x37,
	0x8f, 0x7b, 0xf4, 0x28, 0xed, 0x17, 0x91, 0xbe, 0x29, 0xa9, 0xe0, 0x82, 0x7b, 0x09, 0xf3, 0xde,
	0xff, 0xf7, 0x1b, 0x1e, 0x8f, 0x0c, 0x19, 0xa7, 0x89, 0x86, 0xd0, 0xb4, 0x35, 0xe8, 0xb0, 0xc8,
	0x75, 0xbd, 0xe0, 0x15, 0x37, 0x21, 0x7e, 0x59, 0xad, 0xa4, 0x91, 0xf4, 0x78, 0x43, 0x30, 0x24,
	0x58, 0x47, 0x9c, 0x7c, 0x77, 0xc9, 0xf0, 0x6d, 0x7e, 0x51, 0x9f, 0x6f, 0x2a, 0xfa, 0x90, 0x0c,
	0x2a, 0xa8, 0xa4, 0x6a, 0x7d, 0x67, 0xec, 0x4c, 0xbc, 0x68, 0x5b, 0xd1, 0x63, 0xd2, 0x37, 0x89,
	0xbe, 0xd4, 0xbe, 0x3b, 0x76, 0x26, 0xfd, 0xc8, 0x16, 0x94, 0x91, 0xfb, 0x78, 0x88, 0x4b, 0x5e,
	0x94, 0x71, 0xad, 0xb8, 0x54, 0xdc, 0xb4, 0xbe, 0x87, 0xcc, 0x11, 0x46, 0xef, 0x78, 0x51, 0x7e,
	0xda, 0x06, 0x74, 0x46, 0x1e, 0x58, 0xbe, 0x82, 0x8c, 0x37, 0xd5, 0xce, 0xb8, 0x83, 0x86, 0xbd,
	0xec, 0x03, 0x66, 0x9d, 0xf3, 0x8c, 0x50, 0xeb, 0x2c, 0xe4, 0xd5, 0x4e, 0xe8, 0xa3, 0x70, 0x88,
	0xc9, 0xb9, 0xbc, 0xea, 0xe8, 0x03, 0xe2, 0xe6, 0x99, 0x3f, 0xc0, 0xd4, 0xcd, 0xb3, 0xcd, 0xdc,
	0x73, 0x29, 0x84, 0xf6, 0xef, 0xda, 0xb9, 0xb1, 0xa0, 0x4f, 0xc8, 0x3e, 0x1e, 0x62, 0x2e, 0x52,
	0xd9, 0x88, 0xcc, 0xbf, 0x87, 0xe9, 0x1e, 0x36, 0xdf, 0xdb, 0x1e, 0x7d, 0x4a, 0x0e, 0x2c, 0x24,
	0x1b, 0x63, 0xa9, 0x21, 0x52, 0x56, 0xfd, 0xb8, 0x6d, 0x9e, 0xfc, 0x70, 0xc9, 0xa8, 0xdb, 0x1f,
	0x28, 0xfa, 0x82, 0x0c, 0x74, 0xab, 0x0d, 0x54, 0xb8, 0xc1, 0xd1, 0xec, 0x31, 0xbb, 0x69, 0xed,
	0xac, 0x53, 0xa2, 0x2d, 0x4e, 0x5f, 0x93, 0xa1, 0x51, 0x89, 0xd0, 0x1c, 0x84, 0xc1, 0x35, 0xdf,
	0xc2, 0xdd, 0x19, 0xf4, 0x33, 0xd9, 0xd7, 0xa0, 0x96, 0x7c, 0x0e, 0x31, 0x52, 0xbe, 0x37, 0xf6,
	0x26, 0xa3, 0xd9, 0xe9, 0x7f, 0xae, 0x00, 0xc5, 0x2e, 0xac, 0x86, 0xe5, 0x99, 0x30, 0xaa, 0x8d,
	0xf6, 0xf4, 0x5f, 0xad, 0x47, 0x5f, 0xc9, 0xd1, 0x3f, 0x08, 0x3d, 0x24, 0xde, 0x25, 0xd8, 0xbf,
	0x64, 0x18, 0x6d, 0x8e, 0xf4, 0x39, 0xe9, 0x2f, 0x93, 0x45, 0x03, 0xb7, 0x9d, 0xdd, 0xd2, 0xaf,
	0xdc, 0x97, 0xce, 0x9b, 0xf8, 0xe7, 0x2a, 0x70, 0xae, 0x57, 0x81, 0xf3, 0x7b, 0x15, 0x38, 0xdf,
	0xd6, 0x41, 0xef, 0x7a, 0x1d, 0xf4, 0x7e, 0xad, 0x83, 0xde, 0x97, 0xb3, 0x82, 0x9b, 0xb2, 0x49,
	0xd9, 0x5c, 0x56, 0x61, 0x2a, 0xd2, 0xe9, 0xbc, 0x4c, 0xb8, 0x08, 0x0b, 0x05, 0x20, 0x72, 0x0e,
	0x8b, 0x6c, 0xaa, 0x8d, 0x54, 0x49, 0x01, 0xd3, 0x5a, 0xc9, 0x25, 0xcf, 0x40, 0x85, 0x37, 0x3d,
	0x83, 0x74, 0x80, 0x2f, 0xe0, 0xf4, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x05, 0x37, 0x08, 0x2c,
	0x25, 0x03, 0x00, 0x00,
}

func (m *GfSpLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConnsOutbound != 0 {
		i = encodeVarintLimit(dAtA, i, uint64(m.ConnsOutbound))
		i--
		dAtA[i] = 0x48
	}
	if m.ConnsInbound != 0 {
		i = encodeVarintLimit(dAtA, i, uint64(m.ConnsInbound))
		i--
		dAtA[i] = 0x40
	}
	if m.Conns != 0 {
		i = encodeVarintLimit(dAtA, i, uint64(m.Conns))
		i--
		dAtA[i] = 0x38
	}
	if m.Fd != 0 {
		i = encodeVarintLimit(dAtA, i, uint64(m.Fd))
		i--
		dAtA[i] = 0x30
	}
	if m.TasksLowPriority != 0 {
		i = encodeVarintLimit(dAtA, i, uint64(m.TasksLowPriority))
		i--
		dAtA[i] = 0x28
	}
	if m.TasksMediumPriority != 0 {
		i = encodeVarintLimit(dAtA, i, uint64(m.TasksMediumPriority))
		i--
		dAtA[i] = 0x20
	}
	if m.TasksHighPriority != 0 {
		i = encodeVarintLimit(dAtA, i, uint64(m.TasksHighPriority))
		i--
		dAtA[i] = 0x18
	}
	if m.Tasks != 0 {
		i = encodeVarintLimit(dAtA, i, uint64(m.Tasks))
		i--
		dAtA[i] = 0x10
	}
	if m.Memory != 0 {
		i = encodeVarintLimit(dAtA, i, uint64(m.Memory))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpLimiter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpLimiter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpLimiter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServiceLimit) > 0 {
		for k := range m.ServiceLimit {
			v := m.ServiceLimit[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintLimit(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintLimit(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintLimit(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Transient != nil {
		{
			size, err := m.Transient.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLimit(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.System != nil {
		{
			size, err := m.System.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLimit(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLimit(dAtA []byte, offset int, v uint64) int {
	offset -= sovLimit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GfSpLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Memory != 0 {
		n += 1 + sovLimit(uint64(m.Memory))
	}
	if m.Tasks != 0 {
		n += 1 + sovLimit(uint64(m.Tasks))
	}
	if m.TasksHighPriority != 0 {
		n += 1 + sovLimit(uint64(m.TasksHighPriority))
	}
	if m.TasksMediumPriority != 0 {
		n += 1 + sovLimit(uint64(m.TasksMediumPriority))
	}
	if m.TasksLowPriority != 0 {
		n += 1 + sovLimit(uint64(m.TasksLowPriority))
	}
	if m.Fd != 0 {
		n += 1 + sovLimit(uint64(m.Fd))
	}
	if m.Conns != 0 {
		n += 1 + sovLimit(uint64(m.Conns))
	}
	if m.ConnsInbound != 0 {
		n += 1 + sovLimit(uint64(m.ConnsInbound))
	}
	if m.ConnsOutbound != 0 {
		n += 1 + sovLimit(uint64(m.ConnsOutbound))
	}
	return n
}

func (m *GfSpLimiter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.System != nil {
		l = m.System.Size()
		n += 1 + l + sovLimit(uint64(l))
	}
	if m.Transient != nil {
		l = m.Transient.Size()
		n += 1 + l + sovLimit(uint64(l))
	}
	if len(m.ServiceLimit) > 0 {
		for k, v := range m.ServiceLimit {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovLimit(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovLimit(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovLimit(uint64(mapEntrySize))
		}
	}
	return n
}

func sovLimit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLimit(x uint64) (n int) {
	return sovLimit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GfSpLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			m.Memory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memory |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			m.Tasks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tasks |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TasksHighPriority", wireType)
			}
			m.TasksHighPriority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TasksHighPriority |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TasksMediumPriority", wireType)
			}
			m.TasksMediumPriority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TasksMediumPriority |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TasksLowPriority", wireType)
			}
			m.TasksLowPriority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TasksLowPriority |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fd", wireType)
			}
			m.Fd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fd |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conns", wireType)
			}
			m.Conns = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Conns |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnsInbound", wireType)
			}
			m.ConnsInbound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnsInbound |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnsOutbound", wireType)
			}
			m.ConnsOutbound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnsOutbound |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpLimiter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpLimiter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpLimiter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field System", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.System == nil {
				m.System = &GfSpLimit{}
			}
			if err := m.System.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transient == nil {
				m.Transient = &GfSpLimit{}
			}
			if err := m.Transient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceLimit == nil {
				m.ServiceLimit = make(map[string]*GfSpLimit)
			}
			var mapkey string
			var mapvalue *GfSpLimit
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLimit
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLimit
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLimit
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthLimit
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLimit
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLimit
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthLimit
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &GfSpLimit{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLimit(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLimit
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ServiceLimit[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLimit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLimit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLimit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLimit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLimit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLimit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLimit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLimit = fmt.Errorf("proto: unexpected end of group")
)
