// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: base/types/gfspserver/manage.proto

package gfspserver

import (
	context "context"
	fmt "fmt"
	gfsperrors "github.com/bnb-chain/greenfield-storage-provider/base/types/gfsperrors"
	gfsplimit "github.com/bnb-chain/greenfield-storage-provider/base/types/gfsplimit"
	gfsptask "github.com/bnb-chain/greenfield-storage-provider/base/types/gfsptask"
	types1 "github.com/bnb-chain/greenfield/x/sp/types"
	types "github.com/bnb-chain/greenfield/x/virtualgroup/types"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GfSpBeginTaskRequest struct {
	// Types that are valid to be assigned to Request:
	//	*GfSpBeginTaskRequest_UploadObjectTask
	//	*GfSpBeginTaskRequest_ResumableUploadObjectTask
	Request isGfSpBeginTaskRequest_Request `protobuf_oneof:"request"`
}

func (m *GfSpBeginTaskRequest) Reset()         { *m = GfSpBeginTaskRequest{} }
func (m *GfSpBeginTaskRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpBeginTaskRequest) ProtoMessage()    {}
func (*GfSpBeginTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7801aa704e62bc53, []int{0}
}
func (m *GfSpBeginTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpBeginTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpBeginTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpBeginTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpBeginTaskRequest.Merge(m, src)
}
func (m *GfSpBeginTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpBeginTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpBeginTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpBeginTaskRequest proto.InternalMessageInfo

type isGfSpBeginTaskRequest_Request interface {
	isGfSpBeginTaskRequest_Request()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GfSpBeginTaskRequest_UploadObjectTask struct {
	UploadObjectTask *gfsptask.GfSpUploadObjectTask `protobuf:"bytes,1,opt,name=upload_object_task,json=uploadObjectTask,proto3,oneof" json:"upload_object_task,omitempty"`
}
type GfSpBeginTaskRequest_ResumableUploadObjectTask struct {
	ResumableUploadObjectTask *gfsptask.GfSpResumableUploadObjectTask `protobuf:"bytes,2,opt,name=resumable_upload_object_task,json=resumableUploadObjectTask,proto3,oneof" json:"resumable_upload_object_task,omitempty"`
}

func (*GfSpBeginTaskRequest_UploadObjectTask) isGfSpBeginTaskRequest_Request()          {}
func (*GfSpBeginTaskRequest_ResumableUploadObjectTask) isGfSpBeginTaskRequest_Request() {}

func (m *GfSpBeginTaskRequest) GetRequest() isGfSpBeginTaskRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *GfSpBeginTaskRequest) GetUploadObjectTask() *gfsptask.GfSpUploadObjectTask {
	if x, ok := m.GetRequest().(*GfSpBeginTaskRequest_UploadObjectTask); ok {
		return x.UploadObjectTask
	}
	return nil
}

func (m *GfSpBeginTaskRequest) GetResumableUploadObjectTask() *gfsptask.GfSpResumableUploadObjectTask {
	if x, ok := m.GetRequest().(*GfSpBeginTaskRequest_ResumableUploadObjectTask); ok {
		return x.ResumableUploadObjectTask
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GfSpBeginTaskRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GfSpBeginTaskRequest_UploadObjectTask)(nil),
		(*GfSpBeginTaskRequest_ResumableUploadObjectTask)(nil),
	}
}

type GfSpBeginTaskResponse struct {
	Err *gfsperrors.GfSpError `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *GfSpBeginTaskResponse) Reset()         { *m = GfSpBeginTaskResponse{} }
func (m *GfSpBeginTaskResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpBeginTaskResponse) ProtoMessage()    {}
func (*GfSpBeginTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7801aa704e62bc53, []int{1}
}
func (m *GfSpBeginTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpBeginTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpBeginTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpBeginTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpBeginTaskResponse.Merge(m, src)
}
func (m *GfSpBeginTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpBeginTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpBeginTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpBeginTaskResponse proto.InternalMessageInfo

func (m *GfSpBeginTaskResponse) GetErr() *gfsperrors.GfSpError {
	if m != nil {
		return m.Err
	}
	return nil
}

type GfSpAskTaskRequest struct {
	NodeLimit *gfsplimit.GfSpLimit `protobuf:"bytes,1,opt,name=node_limit,json=nodeLimit,proto3" json:"node_limit,omitempty"`
}

func (m *GfSpAskTaskRequest) Reset()         { *m = GfSpAskTaskRequest{} }
func (m *GfSpAskTaskRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpAskTaskRequest) ProtoMessage()    {}
func (*GfSpAskTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7801aa704e62bc53, []int{2}
}
func (m *GfSpAskTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpAskTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpAskTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpAskTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpAskTaskRequest.Merge(m, src)
}
func (m *GfSpAskTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpAskTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpAskTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpAskTaskRequest proto.InternalMessageInfo

func (m *GfSpAskTaskRequest) GetNodeLimit() *gfsplimit.GfSpLimit {
	if m != nil {
		return m.NodeLimit
	}
	return nil
}

type GfSpAskTaskResponse struct {
	Err *gfsperrors.GfSpError `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	// Types that are valid to be assigned to Response:
	//	*GfSpAskTaskResponse_ReplicatePieceTask
	//	*GfSpAskTaskResponse_SealObjectTask
	//	*GfSpAskTaskResponse_ReceivePieceTask
	//	*GfSpAskTaskResponse_GcObjectTask
	//	*GfSpAskTaskResponse_GcZombiePieceTask
	//	*GfSpAskTaskResponse_GcMetaTask
	//	*GfSpAskTaskResponse_RecoverPieceTask
	//	*GfSpAskTaskResponse_MigrateGvgTask
	Response isGfSpAskTaskResponse_Response `protobuf_oneof:"response"`
}

func (m *GfSpAskTaskResponse) Reset()         { *m = GfSpAskTaskResponse{} }
func (m *GfSpAskTaskResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpAskTaskResponse) ProtoMessage()    {}
func (*GfSpAskTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7801aa704e62bc53, []int{3}
}
func (m *GfSpAskTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpAskTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpAskTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpAskTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpAskTaskResponse.Merge(m, src)
}
func (m *GfSpAskTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpAskTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpAskTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpAskTaskResponse proto.InternalMessageInfo

type isGfSpAskTaskResponse_Response interface {
	isGfSpAskTaskResponse_Response()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GfSpAskTaskResponse_ReplicatePieceTask struct {
	ReplicatePieceTask *gfsptask.GfSpReplicatePieceTask `protobuf:"bytes,2,opt,name=replicate_piece_task,json=replicatePieceTask,proto3,oneof" json:"replicate_piece_task,omitempty"`
}
type GfSpAskTaskResponse_SealObjectTask struct {
	SealObjectTask *gfsptask.GfSpSealObjectTask `protobuf:"bytes,3,opt,name=seal_object_task,json=sealObjectTask,proto3,oneof" json:"seal_object_task,omitempty"`
}
type GfSpAskTaskResponse_ReceivePieceTask struct {
	ReceivePieceTask *gfsptask.GfSpReceivePieceTask `protobuf:"bytes,4,opt,name=receive_piece_task,json=receivePieceTask,proto3,oneof" json:"receive_piece_task,omitempty"`
}
type GfSpAskTaskResponse_GcObjectTask struct {
	GcObjectTask *gfsptask.GfSpGCObjectTask `protobuf:"bytes,5,opt,name=gc_object_task,json=gcObjectTask,proto3,oneof" json:"gc_object_task,omitempty"`
}
type GfSpAskTaskResponse_GcZombiePieceTask struct {
	GcZombiePieceTask *gfsptask.GfSpGCZombiePieceTask `protobuf:"bytes,6,opt,name=gc_zombie_piece_task,json=gcZombiePieceTask,proto3,oneof" json:"gc_zombie_piece_task,omitempty"`
}
type GfSpAskTaskResponse_GcMetaTask struct {
	GcMetaTask *gfsptask.GfSpGCMetaTask `protobuf:"bytes,7,opt,name=gc_meta_task,json=gcMetaTask,proto3,oneof" json:"gc_meta_task,omitempty"`
}
type GfSpAskTaskResponse_RecoverPieceTask struct {
	RecoverPieceTask *gfsptask.GfSpRecoverPieceTask `protobuf:"bytes,8,opt,name=recover_piece_task,json=recoverPieceTask,proto3,oneof" json:"recover_piece_task,omitempty"`
}
type GfSpAskTaskResponse_MigrateGvgTask struct {
	MigrateGvgTask *gfsptask.GfSpMigrateGVGTask `protobuf:"bytes,9,opt,name=migrate_gvg_task,json=migrateGvgTask,proto3,oneof" json:"migrate_gvg_task,omitempty"`
}

func (*GfSpAskTaskResponse_ReplicatePieceTask) isGfSpAskTaskResponse_Response() {}
func (*GfSpAskTaskResponse_SealObjectTask) isGfSpAskTaskResponse_Response()     {}
func (*GfSpAskTaskResponse_ReceivePieceTask) isGfSpAskTaskResponse_Response()   {}
func (*GfSpAskTaskResponse_GcObjectTask) isGfSpAskTaskResponse_Response()       {}
func (*GfSpAskTaskResponse_GcZombiePieceTask) isGfSpAskTaskResponse_Response()  {}
func (*GfSpAskTaskResponse_GcMetaTask) isGfSpAskTaskResponse_Response()         {}
func (*GfSpAskTaskResponse_RecoverPieceTask) isGfSpAskTaskResponse_Response()   {}
func (*GfSpAskTaskResponse_MigrateGvgTask) isGfSpAskTaskResponse_Response()     {}

func (m *GfSpAskTaskResponse) GetResponse() isGfSpAskTaskResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *GfSpAskTaskResponse) GetErr() *gfsperrors.GfSpError {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GfSpAskTaskResponse) GetReplicatePieceTask() *gfsptask.GfSpReplicatePieceTask {
	if x, ok := m.GetResponse().(*GfSpAskTaskResponse_ReplicatePieceTask); ok {
		return x.ReplicatePieceTask
	}
	return nil
}

func (m *GfSpAskTaskResponse) GetSealObjectTask() *gfsptask.GfSpSealObjectTask {
	if x, ok := m.GetResponse().(*GfSpAskTaskResponse_SealObjectTask); ok {
		return x.SealObjectTask
	}
	return nil
}

func (m *GfSpAskTaskResponse) GetReceivePieceTask() *gfsptask.GfSpReceivePieceTask {
	if x, ok := m.GetResponse().(*GfSpAskTaskResponse_ReceivePieceTask); ok {
		return x.ReceivePieceTask
	}
	return nil
}

func (m *GfSpAskTaskResponse) GetGcObjectTask() *gfsptask.GfSpGCObjectTask {
	if x, ok := m.GetResponse().(*GfSpAskTaskResponse_GcObjectTask); ok {
		return x.GcObjectTask
	}
	return nil
}

func (m *GfSpAskTaskResponse) GetGcZombiePieceTask() *gfsptask.GfSpGCZombiePieceTask {
	if x, ok := m.GetResponse().(*GfSpAskTaskResponse_GcZombiePieceTask); ok {
		return x.GcZombiePieceTask
	}
	return nil
}

func (m *GfSpAskTaskResponse) GetGcMetaTask() *gfsptask.GfSpGCMetaTask {
	if x, ok := m.GetResponse().(*GfSpAskTaskResponse_GcMetaTask); ok {
		return x.GcMetaTask
	}
	return nil
}

func (m *GfSpAskTaskResponse) GetRecoverPieceTask() *gfsptask.GfSpRecoverPieceTask {
	if x, ok := m.GetResponse().(*GfSpAskTaskResponse_RecoverPieceTask); ok {
		return x.RecoverPieceTask
	}
	return nil
}

func (m *GfSpAskTaskResponse) GetMigrateGvgTask() *gfsptask.GfSpMigrateGVGTask {
	if x, ok := m.GetResponse().(*GfSpAskTaskResponse_MigrateGvgTask); ok {
		return x.MigrateGvgTask
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GfSpAskTaskResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GfSpAskTaskResponse_ReplicatePieceTask)(nil),
		(*GfSpAskTaskResponse_SealObjectTask)(nil),
		(*GfSpAskTaskResponse_ReceivePieceTask)(nil),
		(*GfSpAskTaskResponse_GcObjectTask)(nil),
		(*GfSpAskTaskResponse_GcZombiePieceTask)(nil),
		(*GfSpAskTaskResponse_GcMetaTask)(nil),
		(*GfSpAskTaskResponse_RecoverPieceTask)(nil),
		(*GfSpAskTaskResponse_MigrateGvgTask)(nil),
	}
}

type GfSpReportTaskRequest struct {
	// Types that are valid to be assigned to Request:
	//	*GfSpReportTaskRequest_UploadObjectTask
	//	*GfSpReportTaskRequest_ReplicatePieceTask
	//	*GfSpReportTaskRequest_SealObjectTask
	//	*GfSpReportTaskRequest_GcObjectTask
	//	*GfSpReportTaskRequest_GcZombiePieceTask
	//	*GfSpReportTaskRequest_GcMetaTask
	//	*GfSpReportTaskRequest_DownloadObjectTask
	//	*GfSpReportTaskRequest_ChallengePieceTask
	//	*GfSpReportTaskRequest_ReceivePieceTask
	//	*GfSpReportTaskRequest_ResumableUploadObjectTask
	//	*GfSpReportTaskRequest_RecoverPieceTask
	//	*GfSpReportTaskRequest_MigrateGvgTask
	Request isGfSpReportTaskRequest_Request `protobuf_oneof:"request"`
}

func (m *GfSpReportTaskRequest) Reset()         { *m = GfSpReportTaskRequest{} }
func (m *GfSpReportTaskRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpReportTaskRequest) ProtoMessage()    {}
func (*GfSpReportTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7801aa704e62bc53, []int{4}
}
func (m *GfSpReportTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpReportTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpReportTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpReportTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpReportTaskRequest.Merge(m, src)
}
func (m *GfSpReportTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpReportTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpReportTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpReportTaskRequest proto.InternalMessageInfo

type isGfSpReportTaskRequest_Request interface {
	isGfSpReportTaskRequest_Request()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GfSpReportTaskRequest_UploadObjectTask struct {
	UploadObjectTask *gfsptask.GfSpUploadObjectTask `protobuf:"bytes,1,opt,name=upload_object_task,json=uploadObjectTask,proto3,oneof" json:"upload_object_task,omitempty"`
}
type GfSpReportTaskRequest_ReplicatePieceTask struct {
	ReplicatePieceTask *gfsptask.GfSpReplicatePieceTask `protobuf:"bytes,2,opt,name=replicate_piece_task,json=replicatePieceTask,proto3,oneof" json:"replicate_piece_task,omitempty"`
}
type GfSpReportTaskRequest_SealObjectTask struct {
	SealObjectTask *gfsptask.GfSpSealObjectTask `protobuf:"bytes,3,opt,name=seal_object_task,json=sealObjectTask,proto3,oneof" json:"seal_object_task,omitempty"`
}
type GfSpReportTaskRequest_GcObjectTask struct {
	GcObjectTask *gfsptask.GfSpGCObjectTask `protobuf:"bytes,4,opt,name=gc_object_task,json=gcObjectTask,proto3,oneof" json:"gc_object_task,omitempty"`
}
type GfSpReportTaskRequest_GcZombiePieceTask struct {
	GcZombiePieceTask *gfsptask.GfSpGCZombiePieceTask `protobuf:"bytes,5,opt,name=gc_zombie_piece_task,json=gcZombiePieceTask,proto3,oneof" json:"gc_zombie_piece_task,omitempty"`
}
type GfSpReportTaskRequest_GcMetaTask struct {
	GcMetaTask *gfsptask.GfSpGCMetaTask `protobuf:"bytes,6,opt,name=gc_meta_task,json=gcMetaTask,proto3,oneof" json:"gc_meta_task,omitempty"`
}
type GfSpReportTaskRequest_DownloadObjectTask struct {
	DownloadObjectTask *gfsptask.GfSpDownloadObjectTask `protobuf:"bytes,7,opt,name=download_object_task,json=downloadObjectTask,proto3,oneof" json:"download_object_task,omitempty"`
}
type GfSpReportTaskRequest_ChallengePieceTask struct {
	ChallengePieceTask *gfsptask.GfSpChallengePieceTask `protobuf:"bytes,8,opt,name=challenge_piece_task,json=challengePieceTask,proto3,oneof" json:"challenge_piece_task,omitempty"`
}
type GfSpReportTaskRequest_ReceivePieceTask struct {
	ReceivePieceTask *gfsptask.GfSpReceivePieceTask `protobuf:"bytes,9,opt,name=receive_piece_task,json=receivePieceTask,proto3,oneof" json:"receive_piece_task,omitempty"`
}
type GfSpReportTaskRequest_ResumableUploadObjectTask struct {
	ResumableUploadObjectTask *gfsptask.GfSpResumableUploadObjectTask `protobuf:"bytes,10,opt,name=resumable_upload_object_task,json=resumableUploadObjectTask,proto3,oneof" json:"resumable_upload_object_task,omitempty"`
}
type GfSpReportTaskRequest_RecoverPieceTask struct {
	RecoverPieceTask *gfsptask.GfSpRecoverPieceTask `protobuf:"bytes,11,opt,name=recover_piece_task,json=recoverPieceTask,proto3,oneof" json:"recover_piece_task,omitempty"`
}
type GfSpReportTaskRequest_MigrateGvgTask struct {
	MigrateGvgTask *gfsptask.GfSpMigrateGVGTask `protobuf:"bytes,12,opt,name=migrate_gvg_task,json=migrateGvgTask,proto3,oneof" json:"migrate_gvg_task,omitempty"`
}

func (*GfSpReportTaskRequest_UploadObjectTask) isGfSpReportTaskRequest_Request()          {}
func (*GfSpReportTaskRequest_ReplicatePieceTask) isGfSpReportTaskRequest_Request()        {}
func (*GfSpReportTaskRequest_SealObjectTask) isGfSpReportTaskRequest_Request()            {}
func (*GfSpReportTaskRequest_GcObjectTask) isGfSpReportTaskRequest_Request()              {}
func (*GfSpReportTaskRequest_GcZombiePieceTask) isGfSpReportTaskRequest_Request()         {}
func (*GfSpReportTaskRequest_GcMetaTask) isGfSpReportTaskRequest_Request()                {}
func (*GfSpReportTaskRequest_DownloadObjectTask) isGfSpReportTaskRequest_Request()        {}
func (*GfSpReportTaskRequest_ChallengePieceTask) isGfSpReportTaskRequest_Request()        {}
func (*GfSpReportTaskRequest_ReceivePieceTask) isGfSpReportTaskRequest_Request()          {}
func (*GfSpReportTaskRequest_ResumableUploadObjectTask) isGfSpReportTaskRequest_Request() {}
func (*GfSpReportTaskRequest_RecoverPieceTask) isGfSpReportTaskRequest_Request()          {}
func (*GfSpReportTaskRequest_MigrateGvgTask) isGfSpReportTaskRequest_Request()            {}

func (m *GfSpReportTaskRequest) GetRequest() isGfSpReportTaskRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *GfSpReportTaskRequest) GetUploadObjectTask() *gfsptask.GfSpUploadObjectTask {
	if x, ok := m.GetRequest().(*GfSpReportTaskRequest_UploadObjectTask); ok {
		return x.UploadObjectTask
	}
	return nil
}

func (m *GfSpReportTaskRequest) GetReplicatePieceTask() *gfsptask.GfSpReplicatePieceTask {
	if x, ok := m.GetRequest().(*GfSpReportTaskRequest_ReplicatePieceTask); ok {
		return x.ReplicatePieceTask
	}
	return nil
}

func (m *GfSpReportTaskRequest) GetSealObjectTask() *gfsptask.GfSpSealObjectTask {
	if x, ok := m.GetRequest().(*GfSpReportTaskRequest_SealObjectTask); ok {
		return x.SealObjectTask
	}
	return nil
}

func (m *GfSpReportTaskRequest) GetGcObjectTask() *gfsptask.GfSpGCObjectTask {
	if x, ok := m.GetRequest().(*GfSpReportTaskRequest_GcObjectTask); ok {
		return x.GcObjectTask
	}
	return nil
}

func (m *GfSpReportTaskRequest) GetGcZombiePieceTask() *gfsptask.GfSpGCZombiePieceTask {
	if x, ok := m.GetRequest().(*GfSpReportTaskRequest_GcZombiePieceTask); ok {
		return x.GcZombiePieceTask
	}
	return nil
}

func (m *GfSpReportTaskRequest) GetGcMetaTask() *gfsptask.GfSpGCMetaTask {
	if x, ok := m.GetRequest().(*GfSpReportTaskRequest_GcMetaTask); ok {
		return x.GcMetaTask
	}
	return nil
}

func (m *GfSpReportTaskRequest) GetDownloadObjectTask() *gfsptask.GfSpDownloadObjectTask {
	if x, ok := m.GetRequest().(*GfSpReportTaskRequest_DownloadObjectTask); ok {
		return x.DownloadObjectTask
	}
	return nil
}

func (m *GfSpReportTaskRequest) GetChallengePieceTask() *gfsptask.GfSpChallengePieceTask {
	if x, ok := m.GetRequest().(*GfSpReportTaskRequest_ChallengePieceTask); ok {
		return x.ChallengePieceTask
	}
	return nil
}

func (m *GfSpReportTaskRequest) GetReceivePieceTask() *gfsptask.GfSpReceivePieceTask {
	if x, ok := m.GetRequest().(*GfSpReportTaskRequest_ReceivePieceTask); ok {
		return x.ReceivePieceTask
	}
	return nil
}

func (m *GfSpReportTaskRequest) GetResumableUploadObjectTask() *gfsptask.GfSpResumableUploadObjectTask {
	if x, ok := m.GetRequest().(*GfSpReportTaskRequest_ResumableUploadObjectTask); ok {
		return x.ResumableUploadObjectTask
	}
	return nil
}

func (m *GfSpReportTaskRequest) GetRecoverPieceTask() *gfsptask.GfSpRecoverPieceTask {
	if x, ok := m.GetRequest().(*GfSpReportTaskRequest_RecoverPieceTask); ok {
		return x.RecoverPieceTask
	}
	return nil
}

func (m *GfSpReportTaskRequest) GetMigrateGvgTask() *gfsptask.GfSpMigrateGVGTask {
	if x, ok := m.GetRequest().(*GfSpReportTaskRequest_MigrateGvgTask); ok {
		return x.MigrateGvgTask
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GfSpReportTaskRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GfSpReportTaskRequest_UploadObjectTask)(nil),
		(*GfSpReportTaskRequest_ReplicatePieceTask)(nil),
		(*GfSpReportTaskRequest_SealObjectTask)(nil),
		(*GfSpReportTaskRequest_GcObjectTask)(nil),
		(*GfSpReportTaskRequest_GcZombiePieceTask)(nil),
		(*GfSpReportTaskRequest_GcMetaTask)(nil),
		(*GfSpReportTaskRequest_DownloadObjectTask)(nil),
		(*GfSpReportTaskRequest_ChallengePieceTask)(nil),
		(*GfSpReportTaskRequest_ReceivePieceTask)(nil),
		(*GfSpReportTaskRequest_ResumableUploadObjectTask)(nil),
		(*GfSpReportTaskRequest_RecoverPieceTask)(nil),
		(*GfSpReportTaskRequest_MigrateGvgTask)(nil),
	}
}

type GfSpReportTaskResponse struct {
	Err *gfsperrors.GfSpError `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *GfSpReportTaskResponse) Reset()         { *m = GfSpReportTaskResponse{} }
func (m *GfSpReportTaskResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpReportTaskResponse) ProtoMessage()    {}
func (*GfSpReportTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7801aa704e62bc53, []int{5}
}
func (m *GfSpReportTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpReportTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpReportTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpReportTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpReportTaskResponse.Merge(m, src)
}
func (m *GfSpReportTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpReportTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpReportTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpReportTaskResponse proto.InternalMessageInfo

func (m *GfSpReportTaskResponse) GetErr() *gfsperrors.GfSpError {
	if m != nil {
		return m.Err
	}
	return nil
}

type GfSpPickVirtualGroupFamilyRequest struct {
	CreateBucketApprovalTask *gfsptask.GfSpCreateBucketApprovalTask `protobuf:"bytes,1,opt,name=create_bucket_approval_task,json=createBucketApprovalTask,proto3" json:"create_bucket_approval_task,omitempty"`
}

func (m *GfSpPickVirtualGroupFamilyRequest) Reset()         { *m = GfSpPickVirtualGroupFamilyRequest{} }
func (m *GfSpPickVirtualGroupFamilyRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpPickVirtualGroupFamilyRequest) ProtoMessage()    {}
func (*GfSpPickVirtualGroupFamilyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7801aa704e62bc53, []int{6}
}
func (m *GfSpPickVirtualGroupFamilyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpPickVirtualGroupFamilyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpPickVirtualGroupFamilyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpPickVirtualGroupFamilyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpPickVirtualGroupFamilyRequest.Merge(m, src)
}
func (m *GfSpPickVirtualGroupFamilyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpPickVirtualGroupFamilyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpPickVirtualGroupFamilyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpPickVirtualGroupFamilyRequest proto.InternalMessageInfo

func (m *GfSpPickVirtualGroupFamilyRequest) GetCreateBucketApprovalTask() *gfsptask.GfSpCreateBucketApprovalTask {
	if m != nil {
		return m.CreateBucketApprovalTask
	}
	return nil
}

type GfSpPickVirtualGroupFamilyResponse struct {
	Err   *gfsperrors.GfSpError `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	VgfId uint32                `protobuf:"varint,2,opt,name=vgf_id,json=vgfId,proto3" json:"vgf_id,omitempty"`
}

func (m *GfSpPickVirtualGroupFamilyResponse) Reset()         { *m = GfSpPickVirtualGroupFamilyResponse{} }
func (m *GfSpPickVirtualGroupFamilyResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpPickVirtualGroupFamilyResponse) ProtoMessage()    {}
func (*GfSpPickVirtualGroupFamilyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7801aa704e62bc53, []int{7}
}
func (m *GfSpPickVirtualGroupFamilyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpPickVirtualGroupFamilyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpPickVirtualGroupFamilyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpPickVirtualGroupFamilyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpPickVirtualGroupFamilyResponse.Merge(m, src)
}
func (m *GfSpPickVirtualGroupFamilyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpPickVirtualGroupFamilyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpPickVirtualGroupFamilyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpPickVirtualGroupFamilyResponse proto.InternalMessageInfo

func (m *GfSpPickVirtualGroupFamilyResponse) GetErr() *gfsperrors.GfSpError {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GfSpPickVirtualGroupFamilyResponse) GetVgfId() uint32 {
	if m != nil {
		return m.VgfId
	}
	return 0
}

type GfSpNotifyMigrateSwapOutRequest struct {
	SwapOut *types.MsgSwapOut `protobuf:"bytes,1,opt,name=swap_out,json=swapOut,proto3" json:"swap_out,omitempty"`
}

func (m *GfSpNotifyMigrateSwapOutRequest) Reset()         { *m = GfSpNotifyMigrateSwapOutRequest{} }
func (m *GfSpNotifyMigrateSwapOutRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpNotifyMigrateSwapOutRequest) ProtoMessage()    {}
func (*GfSpNotifyMigrateSwapOutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7801aa704e62bc53, []int{8}
}
func (m *GfSpNotifyMigrateSwapOutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpNotifyMigrateSwapOutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpNotifyMigrateSwapOutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpNotifyMigrateSwapOutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpNotifyMigrateSwapOutRequest.Merge(m, src)
}
func (m *GfSpNotifyMigrateSwapOutRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpNotifyMigrateSwapOutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpNotifyMigrateSwapOutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpNotifyMigrateSwapOutRequest proto.InternalMessageInfo

func (m *GfSpNotifyMigrateSwapOutRequest) GetSwapOut() *types.MsgSwapOut {
	if m != nil {
		return m.SwapOut
	}
	return nil
}

type GfSpNotifyMigrateSwapOutResponse struct {
	Err *gfsperrors.GfSpError `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *GfSpNotifyMigrateSwapOutResponse) Reset()         { *m = GfSpNotifyMigrateSwapOutResponse{} }
func (m *GfSpNotifyMigrateSwapOutResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpNotifyMigrateSwapOutResponse) ProtoMessage()    {}
func (*GfSpNotifyMigrateSwapOutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7801aa704e62bc53, []int{9}
}
func (m *GfSpNotifyMigrateSwapOutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpNotifyMigrateSwapOutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpNotifyMigrateSwapOutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpNotifyMigrateSwapOutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpNotifyMigrateSwapOutResponse.Merge(m, src)
}
func (m *GfSpNotifyMigrateSwapOutResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpNotifyMigrateSwapOutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpNotifyMigrateSwapOutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpNotifyMigrateSwapOutResponse proto.InternalMessageInfo

func (m *GfSpNotifyMigrateSwapOutResponse) GetErr() *gfsperrors.GfSpError {
	if m != nil {
		return m.Err
	}
	return nil
}

type GfSpQuerySPByOperatorAddressRequest struct {
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
}

func (m *GfSpQuerySPByOperatorAddressRequest) Reset()         { *m = GfSpQuerySPByOperatorAddressRequest{} }
func (m *GfSpQuerySPByOperatorAddressRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpQuerySPByOperatorAddressRequest) ProtoMessage()    {}
func (*GfSpQuerySPByOperatorAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7801aa704e62bc53, []int{10}
}
func (m *GfSpQuerySPByOperatorAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpQuerySPByOperatorAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpQuerySPByOperatorAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpQuerySPByOperatorAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpQuerySPByOperatorAddressRequest.Merge(m, src)
}
func (m *GfSpQuerySPByOperatorAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpQuerySPByOperatorAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpQuerySPByOperatorAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpQuerySPByOperatorAddressRequest proto.InternalMessageInfo

func (m *GfSpQuerySPByOperatorAddressRequest) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

type GfSpQuerySPByOperatorAddressResponse struct {
	Err             *gfsperrors.GfSpError   `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	StorageProvider *types1.StorageProvider `protobuf:"bytes,2,opt,name=storage_provider,json=storageProvider,proto3" json:"storage_provider,omitempty"`
}

func (m *GfSpQuerySPByOperatorAddressResponse) Reset()         { *m = GfSpQuerySPByOperatorAddressResponse{} }
func (m *GfSpQuerySPByOperatorAddressResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpQuerySPByOperatorAddressResponse) ProtoMessage()    {}
func (*GfSpQuerySPByOperatorAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7801aa704e62bc53, []int{11}
}
func (m *GfSpQuerySPByOperatorAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpQuerySPByOperatorAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpQuerySPByOperatorAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpQuerySPByOperatorAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpQuerySPByOperatorAddressResponse.Merge(m, src)
}
func (m *GfSpQuerySPByOperatorAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpQuerySPByOperatorAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpQuerySPByOperatorAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpQuerySPByOperatorAddressResponse proto.InternalMessageInfo

func (m *GfSpQuerySPByOperatorAddressResponse) GetErr() *gfsperrors.GfSpError {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GfSpQuerySPByOperatorAddressResponse) GetStorageProvider() *types1.StorageProvider {
	if m != nil {
		return m.StorageProvider
	}
	return nil
}

type GfSpQueryTasksStatsRequest struct {
}

func (m *GfSpQueryTasksStatsRequest) Reset()         { *m = GfSpQueryTasksStatsRequest{} }
func (m *GfSpQueryTasksStatsRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpQueryTasksStatsRequest) ProtoMessage()    {}
func (*GfSpQueryTasksStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7801aa704e62bc53, []int{12}
}
func (m *GfSpQueryTasksStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpQueryTasksStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpQueryTasksStatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpQueryTasksStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpQueryTasksStatsRequest.Merge(m, src)
}
func (m *GfSpQueryTasksStatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpQueryTasksStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpQueryTasksStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpQueryTasksStatsRequest proto.InternalMessageInfo

type GfSpQueryTasksStatsResponse struct {
	Stats *TasksStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (m *GfSpQueryTasksStatsResponse) Reset()         { *m = GfSpQueryTasksStatsResponse{} }
func (m *GfSpQueryTasksStatsResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpQueryTasksStatsResponse) ProtoMessage()    {}
func (*GfSpQueryTasksStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7801aa704e62bc53, []int{13}
}
func (m *GfSpQueryTasksStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpQueryTasksStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpQueryTasksStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpQueryTasksStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpQueryTasksStatsResponse.Merge(m, src)
}
func (m *GfSpQueryTasksStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpQueryTasksStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpQueryTasksStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpQueryTasksStatsResponse proto.InternalMessageInfo

func (m *GfSpQueryTasksStatsResponse) GetStats() *TasksStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type TasksStats struct {
	UploadCount          uint32 `protobuf:"varint,1,opt,name=upload_count,json=uploadCount,proto3" json:"upload_count,omitempty"`
	ReplicateCount       uint32 `protobuf:"varint,2,opt,name=replicate_count,json=replicateCount,proto3" json:"replicate_count,omitempty"`
	SealCount            uint32 `protobuf:"varint,3,opt,name=seal_count,json=sealCount,proto3" json:"seal_count,omitempty"`
	ResumableUploadCount uint32 `protobuf:"varint,4,opt,name=resumable_upload_count,json=resumableUploadCount,proto3" json:"resumable_upload_count,omitempty"`
	MaxUploading         uint32 `protobuf:"varint,5,opt,name=max_uploading,json=maxUploading,proto3" json:"max_uploading,omitempty"`
	MigrateGvgCount      uint32 `protobuf:"varint,6,opt,name=migrate_gvg_count,json=migrateGvgCount,proto3" json:"migrate_gvg_count,omitempty"`
}

func (m *TasksStats) Reset()         { *m = TasksStats{} }
func (m *TasksStats) String() string { return proto.CompactTextString(m) }
func (*TasksStats) ProtoMessage()    {}
func (*TasksStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_7801aa704e62bc53, []int{14}
}
func (m *TasksStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TasksStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TasksStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TasksStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TasksStats.Merge(m, src)
}
func (m *TasksStats) XXX_Size() int {
	return m.Size()
}
func (m *TasksStats) XXX_DiscardUnknown() {
	xxx_messageInfo_TasksStats.DiscardUnknown(m)
}

var xxx_messageInfo_TasksStats proto.InternalMessageInfo

func (m *TasksStats) GetUploadCount() uint32 {
	if m != nil {
		return m.UploadCount
	}
	return 0
}

func (m *TasksStats) GetReplicateCount() uint32 {
	if m != nil {
		return m.ReplicateCount
	}
	return 0
}

func (m *TasksStats) GetSealCount() uint32 {
	if m != nil {
		return m.SealCount
	}
	return 0
}

func (m *TasksStats) GetResumableUploadCount() uint32 {
	if m != nil {
		return m.ResumableUploadCount
	}
	return 0
}

func (m *TasksStats) GetMaxUploading() uint32 {
	if m != nil {
		return m.MaxUploading
	}
	return 0
}

func (m *TasksStats) GetMigrateGvgCount() uint32 {
	if m != nil {
		return m.MigrateGvgCount
	}
	return 0
}

func init() {
	proto.RegisterType((*GfSpBeginTaskRequest)(nil), "base.types.gfspserver.GfSpBeginTaskRequest")
	proto.RegisterType((*GfSpBeginTaskResponse)(nil), "base.types.gfspserver.GfSpBeginTaskResponse")
	proto.RegisterType((*GfSpAskTaskRequest)(nil), "base.types.gfspserver.GfSpAskTaskRequest")
	proto.RegisterType((*GfSpAskTaskResponse)(nil), "base.types.gfspserver.GfSpAskTaskResponse")
	proto.RegisterType((*GfSpReportTaskRequest)(nil), "base.types.gfspserver.GfSpReportTaskRequest")
	proto.RegisterType((*GfSpReportTaskResponse)(nil), "base.types.gfspserver.GfSpReportTaskResponse")
	proto.RegisterType((*GfSpPickVirtualGroupFamilyRequest)(nil), "base.types.gfspserver.GfSpPickVirtualGroupFamilyRequest")
	proto.RegisterType((*GfSpPickVirtualGroupFamilyResponse)(nil), "base.types.gfspserver.GfSpPickVirtualGroupFamilyResponse")
	proto.RegisterType((*GfSpNotifyMigrateSwapOutRequest)(nil), "base.types.gfspserver.GfSpNotifyMigrateSwapOutRequest")
	proto.RegisterType((*GfSpNotifyMigrateSwapOutResponse)(nil), "base.types.gfspserver.GfSpNotifyMigrateSwapOutResponse")
	proto.RegisterType((*GfSpQuerySPByOperatorAddressRequest)(nil), "base.types.gfspserver.GfSpQuerySPByOperatorAddressRequest")
	proto.RegisterType((*GfSpQuerySPByOperatorAddressResponse)(nil), "base.types.gfspserver.GfSpQuerySPByOperatorAddressResponse")
	proto.RegisterType((*GfSpQueryTasksStatsRequest)(nil), "base.types.gfspserver.GfSpQueryTasksStatsRequest")
	proto.RegisterType((*GfSpQueryTasksStatsResponse)(nil), "base.types.gfspserver.GfSpQueryTasksStatsResponse")
	proto.RegisterType((*TasksStats)(nil), "base.types.gfspserver.TasksStats")
}

func init() {
	proto.RegisterFile("base/types/gfspserver/manage.proto", fileDescriptor_7801aa704e62bc53)
}

var fileDescriptor_7801aa704e62bc53 = []byte{
	// 1246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0x8e, 0x69, 0xb3, 0xc9, 0xbe, 0xfc, 0xec, 0x90, 0x56, 0xed, 0xb6, 0x6c, 0x13, 0x07, 0x54,
	0x9a, 0x92, 0x5d, 0x35, 0x20, 0xca, 0x0f, 0x09, 0x29, 0x09, 0x74, 0xa9, 0x68, 0x48, 0xf0, 0xb6,
	0x91, 0xa8, 0x84, 0xcc, 0xac, 0x77, 0xd6, 0x31, 0xf1, 0xee, 0x98, 0x19, 0x7b, 0x93, 0x70, 0xe0,
	0x3f, 0xa8, 0x84, 0x84, 0x38, 0x20, 0x71, 0xe5, 0x7f, 0xe1, 0xd8, 0x23, 0x47, 0x94, 0xdc, 0xb9,
	0x70, 0x47, 0x68, 0x66, 0xec, 0x5d, 0xdb, 0xbb, 0xf6, 0xa6, 0x09, 0x41, 0xe2, 0x92, 0xba, 0x6f,
	0xbe, 0xef, 0x7b, 0xcf, 0x33, 0xcf, 0xdf, 0xcc, 0x2c, 0xe8, 0x0d, 0xcc, 0x49, 0xd5, 0x3f, 0xf2,
	0x08, 0xaf, 0xda, 0x2d, 0xee, 0x71, 0xc2, 0xba, 0x84, 0x55, 0xdb, 0xb8, 0x83, 0x6d, 0x52, 0xf1,
	0x18, 0xf5, 0x29, 0xba, 0x2a, 0x30, 0x15, 0x89, 0xa9, 0xf4, 0x31, 0xa5, 0xa5, 0x14, 0x95, 0x30,
	0x46, 0x19, 0xaf, 0xca, 0x7f, 0x14, 0xb3, 0xb4, 0x98, 0x82, 0xb8, 0x4e, 0xdb, 0xf1, 0xab, 0xf2,
	0x6f, 0x88, 0x28, 0xa7, 0x10, 0x3e, 0xe6, 0xfb, 0x55, 0xf1, 0x27, 0x1c, 0xbf, 0x61, 0x33, 0x42,
	0x3a, 0x2d, 0x87, 0xb8, 0xcd, 0x2a, 0xf7, 0x14, 0x30, 0x12, 0x8f, 0x0d, 0x75, 0x1d, 0xe6, 0x07,
	0xd8, 0xb5, 0x19, 0x0d, 0xbc, 0xaa, 0x7f, 0xa8, 0x10, 0xfa, 0x5f, 0x1a, 0x2c, 0xd4, 0x5a, 0x75,
	0x6f, 0x83, 0xd8, 0x4e, 0xe7, 0x09, 0xe6, 0xfb, 0x06, 0xf9, 0x36, 0x20, 0xdc, 0x47, 0x5f, 0x02,
	0x0a, 0x3c, 0x97, 0xe2, 0xa6, 0x49, 0x1b, 0xdf, 0x10, 0xcb, 0x37, 0x45, 0xc6, 0xeb, 0xda, 0xa2,
	0xf6, 0xe6, 0xd4, 0xda, 0xdd, 0x4a, 0xea, 0x75, 0x65, 0x35, 0x42, 0xe6, 0xa9, 0xa4, 0x6c, 0x4b,
	0x86, 0x50, 0xfb, 0x74, 0xcc, 0x98, 0x0f, 0x52, 0x31, 0x14, 0xc0, 0x2d, 0x46, 0x78, 0xd0, 0xc6,
	0x0d, 0x97, 0x98, 0x43, 0x92, 0xbc, 0x22, 0x93, 0xac, 0x65, 0x26, 0x31, 0x22, 0xf2, 0x90, 0x6c,
	0x37, 0x58, 0xd6, 0xe0, 0x46, 0x11, 0x26, 0x98, 0x7a, 0x39, 0xfd, 0x33, 0xb8, 0x9a, 0x7a, 0x69,
	0xee, 0xd1, 0x0e, 0x27, 0x68, 0x0d, 0x2e, 0x11, 0xc6, 0xc2, 0xd7, 0x5c, 0x4c, 0x57, 0xa0, 0x96,
	0x4f, 0xd6, 0xf0, 0x89, 0x78, 0x34, 0x04, 0x58, 0x7f, 0x02, 0x48, 0x44, 0xd6, 0xf9, 0x7e, 0x7c,
	0xfe, 0x3e, 0x02, 0xe8, 0xd0, 0x26, 0x31, 0xe5, 0x4a, 0x86, 0x82, 0xb7, 0xd3, 0x82, 0x6a, 0x99,
	0x05, 0xfb, 0xb1, 0x78, 0x32, 0x8a, 0x82, 0x22, 0x1f, 0xf5, 0xe7, 0x05, 0x78, 0x35, 0x21, 0x7b,
	0xf6, 0x0a, 0x91, 0x09, 0x0b, 0x8c, 0x78, 0xae, 0x63, 0x61, 0x9f, 0x98, 0x9e, 0x43, 0x2c, 0x12,
	0x9f, 0xe8, 0x7b, 0x39, 0x13, 0x1d, 0x92, 0x76, 0x04, 0x27, 0x9c, 0x61, 0xc4, 0x06, 0xa2, 0xa8,
	0x0e, 0xf3, 0x9c, 0x60, 0x37, 0xb1, 0x8a, 0x97, 0xa4, 0xf8, 0x9d, 0x4c, 0xf1, 0x3a, 0xc1, 0x6e,
	0x62, 0xe9, 0x66, 0x79, 0x22, 0x22, 0x3a, 0x90, 0x11, 0x8b, 0x38, 0xdd, 0x44, 0xcd, 0x97, 0x47,
	0x74, 0xa0, 0xa1, 0x28, 0xf1, 0x8a, 0xe7, 0x59, 0x2a, 0x86, 0xb6, 0x60, 0xd6, 0xb6, 0x12, 0xd5,
	0x8e, 0x4b, 0xd9, 0x37, 0x32, 0x65, 0x6b, 0x9b, 0x89, 0x5a, 0xa7, 0x6d, 0x2b, 0x56, 0xe9, 0x57,
	0xb0, 0x60, 0x5b, 0xe6, 0x77, 0xb4, 0xdd, 0x70, 0x12, 0xb5, 0x16, 0xa4, 0xe8, 0x4a, 0x8e, 0xe8,
	0x33, 0xc9, 0x89, 0x17, 0x7b, 0xc5, 0xb6, 0x52, 0x41, 0x54, 0x83, 0x69, 0xdb, 0x32, 0xdb, 0xc4,
	0xc7, 0x4a, 0x76, 0x42, 0xca, 0x2e, 0xe7, 0xc8, 0x6e, 0x11, 0x1f, 0x87, 0x7a, 0x60, 0x5b, 0xd1,
	0xff, 0xc2, 0x19, 0xa5, 0x5d, 0xc2, 0xe2, 0x55, 0x4e, 0x8e, 0x9e, 0x51, 0x41, 0x49, 0xcf, 0x68,
	0x22, 0x26, 0x3a, 0xa0, 0xed, 0xd8, 0x4c, 0x34, 0x98, 0xdd, 0xb5, 0x95, 0x70, 0x71, 0x44, 0x07,
	0x6c, 0x29, 0x42, 0x6d, 0xb7, 0x16, 0x75, 0x40, 0x28, 0x51, 0xeb, 0xda, 0xf2, 0x8b, 0x05, 0x98,
	0x64, 0x61, 0xdf, 0xeb, 0x7f, 0x4e, 0xaa, 0x6f, 0xd6, 0x20, 0x1e, 0x65, 0xfe, 0x7f, 0xe4, 0x54,
	0xff, 0xcf, 0x0f, 0x67, 0xb0, 0xbb, 0x2f, 0x5f, 0x44, 0x77, 0x8f, 0x5f, 0x4c, 0x77, 0x17, 0xce,
	0xda, 0xdd, 0x26, 0x2c, 0x34, 0xe9, 0x41, 0x67, 0xa0, 0x13, 0x26, 0x46, 0x2c, 0xd6, 0xc7, 0x21,
	0x29, 0x31, 0x05, 0xa8, 0x39, 0x10, 0x15, 0x09, 0xac, 0x3d, 0xec, 0xba, 0xa4, 0x63, 0x93, 0xc1,
	0x0f, 0x28, 0x3b, 0xc1, 0x66, 0x44, 0x4a, 0x74, 0x83, 0x35, 0x10, 0xcd, 0x70, 0xbc, 0xe2, 0xbf,
	0xe1, 0x78, 0xa3, 0xf6, 0x5c, 0xb8, 0x90, 0x3d, 0x37, 0xc3, 0x71, 0xa6, 0x2e, 0xca, 0x71, 0xa6,
	0xcf, 0xeb, 0x38, 0xb1, 0x33, 0xc2, 0x63, 0xb8, 0x96, 0xf6, 0x9b, 0x73, 0x1c, 0x12, 0x7e, 0xd2,
	0x60, 0x49, 0x84, 0x76, 0x1c, 0x6b, 0x7f, 0x57, 0x9d, 0xc4, 0x6a, 0xe2, 0x24, 0xf6, 0x10, 0xb7,
	0x1d, 0xf7, 0x28, 0xb2, 0x32, 0x0f, 0x6e, 0x5a, 0x8c, 0x88, 0x57, 0x6a, 0x04, 0xd6, 0x3e, 0xf1,
	0x4d, 0xec, 0x79, 0x8c, 0x76, 0xb1, 0x1b, 0xf7, 0xb4, 0xfb, 0xd9, 0x8d, 0x26, 0xb9, 0x1b, 0x92,
	0xba, 0x1e, 0x32, 0x65, 0xe5, 0xd7, 0xad, 0x8c, 0x11, 0x9d, 0x82, 0x9e, 0x57, 0xd6, 0x39, 0x0e,
	0x1d, 0x57, 0xa1, 0xd0, 0xb5, 0x5b, 0xa6, 0xd3, 0x94, 0x6e, 0x39, 0x63, 0x8c, 0x77, 0xed, 0xd6,
	0xa3, 0xa6, 0x8e, 0xe1, 0xb6, 0x00, 0x7e, 0x4e, 0x7d, 0xa7, 0x75, 0x14, 0xae, 0x47, 0xfd, 0x00,
	0x7b, 0xdb, 0x81, 0xdf, 0x3f, 0x3a, 0x4d, 0xf2, 0x03, 0xec, 0x99, 0x34, 0x88, 0x0e, 0x4e, 0xcb,
	0x95, 0xfe, 0x41, 0xb6, 0x12, 0x3f, 0xc8, 0x56, 0xb6, 0xb8, 0x1d, 0xb1, 0x27, 0xb8, 0x7a, 0xd0,
	0x77, 0x61, 0x31, 0x3b, 0xc5, 0x39, 0xd6, 0x70, 0x07, 0x96, 0x45, 0xe4, 0x8b, 0x80, 0xb0, 0xa3,
	0xfa, 0xce, 0xc6, 0xd1, 0xb6, 0x47, 0x18, 0xf6, 0x29, 0x5b, 0x6f, 0x36, 0x19, 0xe1, 0x3c, 0x2a,
	0xff, 0x2e, 0xcc, 0xd3, 0x70, 0xc4, 0xc4, 0x6a, 0x48, 0xe6, 0x29, 0x1a, 0x73, 0x34, 0xc9, 0xd0,
	0x7f, 0xd5, 0xe0, 0xf5, 0x7c, 0xc9, 0x73, 0x2c, 0xc0, 0x23, 0x98, 0xe7, 0x3e, 0x65, 0x58, 0x98,
	0x15, 0xa3, 0x5d, 0xa7, 0x49, 0x58, 0xb8, 0x71, 0x95, 0xe3, 0xd3, 0xc9, 0xbd, 0x4a, 0x5d, 0xc1,
	0x76, 0x42, 0x94, 0x31, 0xc7, 0x93, 0x01, 0xfd, 0x16, 0x94, 0x7a, 0x65, 0x8a, 0xb6, 0xe1, 0x75,
	0x1f, 0xfb, 0xd1, 0x0b, 0xeb, 0xbb, 0x70, 0x73, 0xe8, 0x68, 0x58, 0xfb, 0x03, 0x18, 0xe7, 0x22,
	0x10, 0x56, 0xbf, 0x54, 0x19, 0x7a, 0x57, 0xaa, 0xc4, 0x98, 0x0a, 0xaf, 0xff, 0xad, 0x01, 0xf4,
	0xa3, 0x68, 0x09, 0xa6, 0x43, 0xe3, 0xb2, 0x68, 0xd0, 0x51, 0xad, 0x31, 0x63, 0x4c, 0xa9, 0xd8,
	0xa6, 0x08, 0xa1, 0x3b, 0x30, 0xd7, 0xdf, 0xaf, 0x15, 0x4a, 0x35, 0xdf, 0x6c, 0x2f, 0xac, 0x80,
	0xaf, 0x01, 0xc8, 0x7d, 0x57, 0x61, 0x2e, 0x49, 0x4c, 0x51, 0x44, 0xd4, 0xf0, 0x3b, 0x70, 0x6d,
	0xc0, 0x2d, 0x15, 0xf4, 0xb2, 0x84, 0x2e, 0xa4, 0x1c, 0x4f, 0xb1, 0x96, 0x61, 0xa6, 0x8d, 0x0f,
	0x43, 0xbc, 0xd3, 0xb1, 0xe5, 0x0e, 0x39, 0x63, 0x4c, 0xb7, 0xf1, 0xe1, 0xd3, 0x28, 0x86, 0x56,
	0xe0, 0x4a, 0xdc, 0xb6, 0x94, 0x6a, 0x41, 0x02, 0xe7, 0xfa, 0x66, 0x24, 0x05, 0xd7, 0x7e, 0x99,
	0x80, 0x2b, 0xd2, 0xb6, 0xe4, 0x55, 0xb3, 0x4e, 0x58, 0xd7, 0xb1, 0x08, 0x72, 0x61, 0x26, 0x71,
	0x79, 0x41, 0xf7, 0x32, 0x66, 0x74, 0xd8, 0xbd, 0xae, 0xf4, 0xd6, 0xe9, 0xc0, 0xe1, 0xa9, 0x6b,
	0x0c, 0xb5, 0x60, 0x2a, 0x76, 0x0d, 0x41, 0x77, 0x73, 0xe8, 0xc9, 0x1b, 0x50, 0x69, 0xe5, 0x34,
	0xd0, 0x5e, 0x1e, 0x0a, 0xb3, 0x49, 0xbb, 0x45, 0x79, 0x95, 0x0e, 0x9c, 0x02, 0x4b, 0xab, 0xa7,
	0x44, 0xf7, 0x12, 0xfe, 0xa8, 0xa9, 0xa6, 0x1e, 0x6e, 0x7d, 0xe8, 0xbd, 0x1c, 0xbd, 0x5c, 0x13,
	0x2f, 0xbd, 0x7f, 0x06, 0x66, 0xaf, 0xaa, 0xe7, 0x1a, 0x5c, 0xcf, 0x32, 0x2f, 0xf4, 0x6e, 0x8e,
	0x72, 0x8e, 0xa1, 0x96, 0x1e, 0xbc, 0x34, 0xaf, 0x57, 0xcf, 0xcf, 0x1a, 0xdc, 0xca, 0x73, 0x28,
	0xf4, 0x41, 0x8e, 0xf6, 0x08, 0xa7, 0x2c, 0x7d, 0x78, 0x26, 0x6e, 0xaf, 0xb6, 0xef, 0xd5, 0x0d,
	0x39, 0xe5, 0x3b, 0xe8, 0xfe, 0x28, 0xd5, 0x01, 0x07, 0x2b, 0xad, 0xbd, 0x0c, 0x25, 0xca, 0xbf,
	0xf1, 0xf5, 0x6f, 0xc7, 0x65, 0xed, 0xc5, 0x71, 0x59, 0xfb, 0xe3, 0xb8, 0xac, 0xfd, 0x70, 0x52,
	0x1e, 0x7b, 0x71, 0x52, 0x1e, 0xfb, 0xfd, 0xa4, 0x3c, 0xf6, 0xec, 0xa1, 0xed, 0xf8, 0x7b, 0x41,
	0xa3, 0x62, 0xd1, 0x76, 0xb5, 0xd1, 0x69, 0xac, 0x5a, 0x7b, 0xd8, 0xe9, 0x54, 0xfb, 0xa6, 0xbb,
	0x1a, 0x1a, 0xec, 0x6a, 0x64, 0xcc, 0xd5, 0xa1, 0xbf, 0x31, 0x35, 0x0a, 0xf2, 0x47, 0x9a, 0xb7,
	0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x63, 0x6b, 0x58, 0xad, 0x83, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GfSpManageServiceClient is the client API for GfSpManageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GfSpManageServiceClient interface {
	GfSpBeginTask(ctx context.Context, in *GfSpBeginTaskRequest, opts ...grpc.CallOption) (*GfSpBeginTaskResponse, error)
	GfSpAskTask(ctx context.Context, in *GfSpAskTaskRequest, opts ...grpc.CallOption) (*GfSpAskTaskResponse, error)
	GfSpReportTask(ctx context.Context, in *GfSpReportTaskRequest, opts ...grpc.CallOption) (*GfSpReportTaskResponse, error)
	GfSpPickVirtualGroupFamily(ctx context.Context, in *GfSpPickVirtualGroupFamilyRequest, opts ...grpc.CallOption) (*GfSpPickVirtualGroupFamilyResponse, error)
	GfSpNotifyMigrateSwapOut(ctx context.Context, in *GfSpNotifyMigrateSwapOutRequest, opts ...grpc.CallOption) (*GfSpNotifyMigrateSwapOutResponse, error)
	GfSpQuerySPByOperatorAddress(ctx context.Context, in *GfSpQuerySPByOperatorAddressRequest, opts ...grpc.CallOption) (*GfSpQuerySPByOperatorAddressResponse, error)
	GfSpQueryTasksStats(ctx context.Context, in *GfSpQueryTasksStatsRequest, opts ...grpc.CallOption) (*GfSpQueryTasksStatsResponse, error)
}

type gfSpManageServiceClient struct {
	cc grpc1.ClientConn
}

func NewGfSpManageServiceClient(cc grpc1.ClientConn) GfSpManageServiceClient {
	return &gfSpManageServiceClient{cc}
}

func (c *gfSpManageServiceClient) GfSpBeginTask(ctx context.Context, in *GfSpBeginTaskRequest, opts ...grpc.CallOption) (*GfSpBeginTaskResponse, error) {
	out := new(GfSpBeginTaskResponse)
	err := c.cc.Invoke(ctx, "/base.types.gfspserver.GfSpManageService/GfSpBeginTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpManageServiceClient) GfSpAskTask(ctx context.Context, in *GfSpAskTaskRequest, opts ...grpc.CallOption) (*GfSpAskTaskResponse, error) {
	out := new(GfSpAskTaskResponse)
	err := c.cc.Invoke(ctx, "/base.types.gfspserver.GfSpManageService/GfSpAskTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpManageServiceClient) GfSpReportTask(ctx context.Context, in *GfSpReportTaskRequest, opts ...grpc.CallOption) (*GfSpReportTaskResponse, error) {
	out := new(GfSpReportTaskResponse)
	err := c.cc.Invoke(ctx, "/base.types.gfspserver.GfSpManageService/GfSpReportTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpManageServiceClient) GfSpPickVirtualGroupFamily(ctx context.Context, in *GfSpPickVirtualGroupFamilyRequest, opts ...grpc.CallOption) (*GfSpPickVirtualGroupFamilyResponse, error) {
	out := new(GfSpPickVirtualGroupFamilyResponse)
	err := c.cc.Invoke(ctx, "/base.types.gfspserver.GfSpManageService/GfSpPickVirtualGroupFamily", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpManageServiceClient) GfSpNotifyMigrateSwapOut(ctx context.Context, in *GfSpNotifyMigrateSwapOutRequest, opts ...grpc.CallOption) (*GfSpNotifyMigrateSwapOutResponse, error) {
	out := new(GfSpNotifyMigrateSwapOutResponse)
	err := c.cc.Invoke(ctx, "/base.types.gfspserver.GfSpManageService/GfSpNotifyMigrateSwapOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpManageServiceClient) GfSpQuerySPByOperatorAddress(ctx context.Context, in *GfSpQuerySPByOperatorAddressRequest, opts ...grpc.CallOption) (*GfSpQuerySPByOperatorAddressResponse, error) {
	out := new(GfSpQuerySPByOperatorAddressResponse)
	err := c.cc.Invoke(ctx, "/base.types.gfspserver.GfSpManageService/GfSpQuerySPByOperatorAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpManageServiceClient) GfSpQueryTasksStats(ctx context.Context, in *GfSpQueryTasksStatsRequest, opts ...grpc.CallOption) (*GfSpQueryTasksStatsResponse, error) {
	out := new(GfSpQueryTasksStatsResponse)
	err := c.cc.Invoke(ctx, "/base.types.gfspserver.GfSpManageService/GfSpQueryTasksStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GfSpManageServiceServer is the server API for GfSpManageService service.
type GfSpManageServiceServer interface {
	GfSpBeginTask(context.Context, *GfSpBeginTaskRequest) (*GfSpBeginTaskResponse, error)
	GfSpAskTask(context.Context, *GfSpAskTaskRequest) (*GfSpAskTaskResponse, error)
	GfSpReportTask(context.Context, *GfSpReportTaskRequest) (*GfSpReportTaskResponse, error)
	GfSpPickVirtualGroupFamily(context.Context, *GfSpPickVirtualGroupFamilyRequest) (*GfSpPickVirtualGroupFamilyResponse, error)
	GfSpNotifyMigrateSwapOut(context.Context, *GfSpNotifyMigrateSwapOutRequest) (*GfSpNotifyMigrateSwapOutResponse, error)
	GfSpQuerySPByOperatorAddress(context.Context, *GfSpQuerySPByOperatorAddressRequest) (*GfSpQuerySPByOperatorAddressResponse, error)
	GfSpQueryTasksStats(context.Context, *GfSpQueryTasksStatsRequest) (*GfSpQueryTasksStatsResponse, error)
}

// UnimplementedGfSpManageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGfSpManageServiceServer struct {
}

func (*UnimplementedGfSpManageServiceServer) GfSpBeginTask(ctx context.Context, req *GfSpBeginTaskRequest) (*GfSpBeginTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpBeginTask not implemented")
}
func (*UnimplementedGfSpManageServiceServer) GfSpAskTask(ctx context.Context, req *GfSpAskTaskRequest) (*GfSpAskTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpAskTask not implemented")
}
func (*UnimplementedGfSpManageServiceServer) GfSpReportTask(ctx context.Context, req *GfSpReportTaskRequest) (*GfSpReportTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpReportTask not implemented")
}
func (*UnimplementedGfSpManageServiceServer) GfSpPickVirtualGroupFamily(ctx context.Context, req *GfSpPickVirtualGroupFamilyRequest) (*GfSpPickVirtualGroupFamilyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpPickVirtualGroupFamily not implemented")
}
func (*UnimplementedGfSpManageServiceServer) GfSpNotifyMigrateSwapOut(ctx context.Context, req *GfSpNotifyMigrateSwapOutRequest) (*GfSpNotifyMigrateSwapOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpNotifyMigrateSwapOut not implemented")
}
func (*UnimplementedGfSpManageServiceServer) GfSpQuerySPByOperatorAddress(ctx context.Context, req *GfSpQuerySPByOperatorAddressRequest) (*GfSpQuerySPByOperatorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpQuerySPByOperatorAddress not implemented")
}
func (*UnimplementedGfSpManageServiceServer) GfSpQueryTasksStats(ctx context.Context, req *GfSpQueryTasksStatsRequest) (*GfSpQueryTasksStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpQueryTasksStats not implemented")
}

func RegisterGfSpManageServiceServer(s grpc1.Server, srv GfSpManageServiceServer) {
	s.RegisterService(&_GfSpManageService_serviceDesc, srv)
}

func _GfSpManageService_GfSpBeginTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpBeginTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpManageServiceServer).GfSpBeginTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.types.gfspserver.GfSpManageService/GfSpBeginTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpManageServiceServer).GfSpBeginTask(ctx, req.(*GfSpBeginTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpManageService_GfSpAskTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpAskTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpManageServiceServer).GfSpAskTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.types.gfspserver.GfSpManageService/GfSpAskTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpManageServiceServer).GfSpAskTask(ctx, req.(*GfSpAskTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpManageService_GfSpReportTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpReportTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpManageServiceServer).GfSpReportTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.types.gfspserver.GfSpManageService/GfSpReportTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpManageServiceServer).GfSpReportTask(ctx, req.(*GfSpReportTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpManageService_GfSpPickVirtualGroupFamily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpPickVirtualGroupFamilyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpManageServiceServer).GfSpPickVirtualGroupFamily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.types.gfspserver.GfSpManageService/GfSpPickVirtualGroupFamily",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpManageServiceServer).GfSpPickVirtualGroupFamily(ctx, req.(*GfSpPickVirtualGroupFamilyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpManageService_GfSpNotifyMigrateSwapOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpNotifyMigrateSwapOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpManageServiceServer).GfSpNotifyMigrateSwapOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.types.gfspserver.GfSpManageService/GfSpNotifyMigrateSwapOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpManageServiceServer).GfSpNotifyMigrateSwapOut(ctx, req.(*GfSpNotifyMigrateSwapOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpManageService_GfSpQuerySPByOperatorAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpQuerySPByOperatorAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpManageServiceServer).GfSpQuerySPByOperatorAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.types.gfspserver.GfSpManageService/GfSpQuerySPByOperatorAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpManageServiceServer).GfSpQuerySPByOperatorAddress(ctx, req.(*GfSpQuerySPByOperatorAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpManageService_GfSpQueryTasksStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpQueryTasksStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpManageServiceServer).GfSpQueryTasksStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.types.gfspserver.GfSpManageService/GfSpQueryTasksStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpManageServiceServer).GfSpQueryTasksStats(ctx, req.(*GfSpQueryTasksStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GfSpManageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "base.types.gfspserver.GfSpManageService",
	HandlerType: (*GfSpManageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GfSpBeginTask",
			Handler:    _GfSpManageService_GfSpBeginTask_Handler,
		},
		{
			MethodName: "GfSpAskTask",
			Handler:    _GfSpManageService_GfSpAskTask_Handler,
		},
		{
			MethodName: "GfSpReportTask",
			Handler:    _GfSpManageService_GfSpReportTask_Handler,
		},
		{
			MethodName: "GfSpPickVirtualGroupFamily",
			Handler:    _GfSpManageService_GfSpPickVirtualGroupFamily_Handler,
		},
		{
			MethodName: "GfSpNotifyMigrateSwapOut",
			Handler:    _GfSpManageService_GfSpNotifyMigrateSwapOut_Handler,
		},
		{
			MethodName: "GfSpQuerySPByOperatorAddress",
			Handler:    _GfSpManageService_GfSpQuerySPByOperatorAddress_Handler,
		},
		{
			MethodName: "GfSpQueryTasksStats",
			Handler:    _GfSpManageService_GfSpQueryTasksStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base/types/gfspserver/manage.proto",
}

func (m *GfSpBeginTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpBeginTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpBeginTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size := m.Request.Size()
			i -= size
			if _, err := m.Request.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpBeginTaskRequest_UploadObjectTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpBeginTaskRequest_UploadObjectTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UploadObjectTask != nil {
		{
			size, err := m.UploadObjectTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *GfSpBeginTaskRequest_ResumableUploadObjectTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpBeginTaskRequest_ResumableUploadObjectTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResumableUploadObjectTask != nil {
		{
			size, err := m.ResumableUploadObjectTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GfSpBeginTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpBeginTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpBeginTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpAskTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpAskTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpAskTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NodeLimit != nil {
		{
			size, err := m.NodeLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpAskTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpAskTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpAskTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		{
			size := m.Response.Size()
			i -= size
			if _, err := m.Response.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpAskTaskResponse_ReplicatePieceTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpAskTaskResponse_ReplicatePieceTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReplicatePieceTask != nil {
		{
			size, err := m.ReplicatePieceTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GfSpAskTaskResponse_SealObjectTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpAskTaskResponse_SealObjectTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SealObjectTask != nil {
		{
			size, err := m.SealObjectTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GfSpAskTaskResponse_ReceivePieceTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpAskTaskResponse_ReceivePieceTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReceivePieceTask != nil {
		{
			size, err := m.ReceivePieceTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GfSpAskTaskResponse_GcObjectTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpAskTaskResponse_GcObjectTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GcObjectTask != nil {
		{
			size, err := m.GcObjectTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GfSpAskTaskResponse_GcZombiePieceTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpAskTaskResponse_GcZombiePieceTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GcZombiePieceTask != nil {
		{
			size, err := m.GcZombiePieceTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GfSpAskTaskResponse_GcMetaTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpAskTaskResponse_GcMetaTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GcMetaTask != nil {
		{
			size, err := m.GcMetaTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GfSpAskTaskResponse_RecoverPieceTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpAskTaskResponse_RecoverPieceTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RecoverPieceTask != nil {
		{
			size, err := m.RecoverPieceTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GfSpAskTaskResponse_MigrateGvgTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpAskTaskResponse_MigrateGvgTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MigrateGvgTask != nil {
		{
			size, err := m.MigrateGvgTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GfSpReportTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpReportTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpReportTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size := m.Request.Size()
			i -= size
			if _, err := m.Request.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpReportTaskRequest_UploadObjectTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpReportTaskRequest_UploadObjectTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UploadObjectTask != nil {
		{
			size, err := m.UploadObjectTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *GfSpReportTaskRequest_ReplicatePieceTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpReportTaskRequest_ReplicatePieceTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReplicatePieceTask != nil {
		{
			size, err := m.ReplicatePieceTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GfSpReportTaskRequest_SealObjectTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpReportTaskRequest_SealObjectTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SealObjectTask != nil {
		{
			size, err := m.SealObjectTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GfSpReportTaskRequest_GcObjectTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpReportTaskRequest_GcObjectTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GcObjectTask != nil {
		{
			size, err := m.GcObjectTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GfSpReportTaskRequest_GcZombiePieceTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpReportTaskRequest_GcZombiePieceTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GcZombiePieceTask != nil {
		{
			size, err := m.GcZombiePieceTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GfSpReportTaskRequest_GcMetaTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpReportTaskRequest_GcMetaTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GcMetaTask != nil {
		{
			size, err := m.GcMetaTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GfSpReportTaskRequest_DownloadObjectTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpReportTaskRequest_DownloadObjectTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownloadObjectTask != nil {
		{
			size, err := m.DownloadObjectTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GfSpReportTaskRequest_ChallengePieceTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpReportTaskRequest_ChallengePieceTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChallengePieceTask != nil {
		{
			size, err := m.ChallengePieceTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GfSpReportTaskRequest_ReceivePieceTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpReportTaskRequest_ReceivePieceTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReceivePieceTask != nil {
		{
			size, err := m.ReceivePieceTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GfSpReportTaskRequest_ResumableUploadObjectTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpReportTaskRequest_ResumableUploadObjectTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResumableUploadObjectTask != nil {
		{
			size, err := m.ResumableUploadObjectTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GfSpReportTaskRequest_RecoverPieceTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpReportTaskRequest_RecoverPieceTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RecoverPieceTask != nil {
		{
			size, err := m.RecoverPieceTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *GfSpReportTaskRequest_MigrateGvgTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpReportTaskRequest_MigrateGvgTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MigrateGvgTask != nil {
		{
			size, err := m.MigrateGvgTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *GfSpReportTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpReportTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpReportTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpPickVirtualGroupFamilyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpPickVirtualGroupFamilyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpPickVirtualGroupFamilyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreateBucketApprovalTask != nil {
		{
			size, err := m.CreateBucketApprovalTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpPickVirtualGroupFamilyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpPickVirtualGroupFamilyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpPickVirtualGroupFamilyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VgfId != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.VgfId))
		i--
		dAtA[i] = 0x10
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpNotifyMigrateSwapOutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpNotifyMigrateSwapOutRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpNotifyMigrateSwapOutRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SwapOut != nil {
		{
			size, err := m.SwapOut.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpNotifyMigrateSwapOutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpNotifyMigrateSwapOutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpNotifyMigrateSwapOutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpQuerySPByOperatorAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpQuerySPByOperatorAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpQuerySPByOperatorAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintManage(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpQuerySPByOperatorAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpQuerySPByOperatorAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpQuerySPByOperatorAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StorageProvider != nil {
		{
			size, err := m.StorageProvider.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpQueryTasksStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpQueryTasksStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpQueryTasksStatsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GfSpQueryTasksStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpQueryTasksStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpQueryTasksStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TasksStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TasksStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TasksStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MigrateGvgCount != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.MigrateGvgCount))
		i--
		dAtA[i] = 0x30
	}
	if m.MaxUploading != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.MaxUploading))
		i--
		dAtA[i] = 0x28
	}
	if m.ResumableUploadCount != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.ResumableUploadCount))
		i--
		dAtA[i] = 0x20
	}
	if m.SealCount != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.SealCount))
		i--
		dAtA[i] = 0x18
	}
	if m.ReplicateCount != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.ReplicateCount))
		i--
		dAtA[i] = 0x10
	}
	if m.UploadCount != 0 {
		i = encodeVarintManage(dAtA, i, uint64(m.UploadCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintManage(dAtA []byte, offset int, v uint64) int {
	offset -= sovManage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GfSpBeginTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		n += m.Request.Size()
	}
	return n
}

func (m *GfSpBeginTaskRequest_UploadObjectTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UploadObjectTask != nil {
		l = m.UploadObjectTask.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}
func (m *GfSpBeginTaskRequest_ResumableUploadObjectTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResumableUploadObjectTask != nil {
		l = m.ResumableUploadObjectTask.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}
func (m *GfSpBeginTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}

func (m *GfSpAskTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeLimit != nil {
		l = m.NodeLimit.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}

func (m *GfSpAskTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	if m.Response != nil {
		n += m.Response.Size()
	}
	return n
}

func (m *GfSpAskTaskResponse_ReplicatePieceTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReplicatePieceTask != nil {
		l = m.ReplicatePieceTask.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}
func (m *GfSpAskTaskResponse_SealObjectTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SealObjectTask != nil {
		l = m.SealObjectTask.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}
func (m *GfSpAskTaskResponse_ReceivePieceTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReceivePieceTask != nil {
		l = m.ReceivePieceTask.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}
func (m *GfSpAskTaskResponse_GcObjectTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GcObjectTask != nil {
		l = m.GcObjectTask.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}
func (m *GfSpAskTaskResponse_GcZombiePieceTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GcZombiePieceTask != nil {
		l = m.GcZombiePieceTask.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}
func (m *GfSpAskTaskResponse_GcMetaTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GcMetaTask != nil {
		l = m.GcMetaTask.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}
func (m *GfSpAskTaskResponse_RecoverPieceTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecoverPieceTask != nil {
		l = m.RecoverPieceTask.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}
func (m *GfSpAskTaskResponse_MigrateGvgTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MigrateGvgTask != nil {
		l = m.MigrateGvgTask.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}
func (m *GfSpReportTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		n += m.Request.Size()
	}
	return n
}

func (m *GfSpReportTaskRequest_UploadObjectTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UploadObjectTask != nil {
		l = m.UploadObjectTask.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}
func (m *GfSpReportTaskRequest_ReplicatePieceTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReplicatePieceTask != nil {
		l = m.ReplicatePieceTask.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}
func (m *GfSpReportTaskRequest_SealObjectTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SealObjectTask != nil {
		l = m.SealObjectTask.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}
func (m *GfSpReportTaskRequest_GcObjectTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GcObjectTask != nil {
		l = m.GcObjectTask.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}
func (m *GfSpReportTaskRequest_GcZombiePieceTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GcZombiePieceTask != nil {
		l = m.GcZombiePieceTask.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}
func (m *GfSpReportTaskRequest_GcMetaTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GcMetaTask != nil {
		l = m.GcMetaTask.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}
func (m *GfSpReportTaskRequest_DownloadObjectTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownloadObjectTask != nil {
		l = m.DownloadObjectTask.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}
func (m *GfSpReportTaskRequest_ChallengePieceTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengePieceTask != nil {
		l = m.ChallengePieceTask.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}
func (m *GfSpReportTaskRequest_ReceivePieceTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReceivePieceTask != nil {
		l = m.ReceivePieceTask.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}
func (m *GfSpReportTaskRequest_ResumableUploadObjectTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResumableUploadObjectTask != nil {
		l = m.ResumableUploadObjectTask.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}
func (m *GfSpReportTaskRequest_RecoverPieceTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecoverPieceTask != nil {
		l = m.RecoverPieceTask.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}
func (m *GfSpReportTaskRequest_MigrateGvgTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MigrateGvgTask != nil {
		l = m.MigrateGvgTask.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}
func (m *GfSpReportTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}

func (m *GfSpPickVirtualGroupFamilyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateBucketApprovalTask != nil {
		l = m.CreateBucketApprovalTask.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}

func (m *GfSpPickVirtualGroupFamilyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	if m.VgfId != 0 {
		n += 1 + sovManage(uint64(m.VgfId))
	}
	return n
}

func (m *GfSpNotifyMigrateSwapOutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwapOut != nil {
		l = m.SwapOut.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}

func (m *GfSpNotifyMigrateSwapOutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}

func (m *GfSpQuerySPByOperatorAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}

func (m *GfSpQuerySPByOperatorAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	if m.StorageProvider != nil {
		l = m.StorageProvider.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}

func (m *GfSpQueryTasksStatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GfSpQueryTasksStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovManage(uint64(l))
	}
	return n
}

func (m *TasksStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UploadCount != 0 {
		n += 1 + sovManage(uint64(m.UploadCount))
	}
	if m.ReplicateCount != 0 {
		n += 1 + sovManage(uint64(m.ReplicateCount))
	}
	if m.SealCount != 0 {
		n += 1 + sovManage(uint64(m.SealCount))
	}
	if m.ResumableUploadCount != 0 {
		n += 1 + sovManage(uint64(m.ResumableUploadCount))
	}
	if m.MaxUploading != 0 {
		n += 1 + sovManage(uint64(m.MaxUploading))
	}
	if m.MigrateGvgCount != 0 {
		n += 1 + sovManage(uint64(m.MigrateGvgCount))
	}
	return n
}

func sovManage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozManage(x uint64) (n int) {
	return sovManage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GfSpBeginTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpBeginTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpBeginTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadObjectTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfsptask.GfSpUploadObjectTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &GfSpBeginTaskRequest_UploadObjectTask{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResumableUploadObjectTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfsptask.GfSpResumableUploadObjectTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &GfSpBeginTaskRequest_ResumableUploadObjectTask{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpBeginTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpBeginTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpBeginTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &gfsperrors.GfSpError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpAskTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpAskTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpAskTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeLimit == nil {
				m.NodeLimit = &gfsplimit.GfSpLimit{}
			}
			if err := m.NodeLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpAskTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpAskTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpAskTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &gfsperrors.GfSpError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicatePieceTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfsptask.GfSpReplicatePieceTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &GfSpAskTaskResponse_ReplicatePieceTask{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SealObjectTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfsptask.GfSpSealObjectTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &GfSpAskTaskResponse_SealObjectTask{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivePieceTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfsptask.GfSpReceivePieceTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &GfSpAskTaskResponse_ReceivePieceTask{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcObjectTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfsptask.GfSpGCObjectTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &GfSpAskTaskResponse_GcObjectTask{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcZombiePieceTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfsptask.GfSpGCZombiePieceTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &GfSpAskTaskResponse_GcZombiePieceTask{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcMetaTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfsptask.GfSpGCMetaTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &GfSpAskTaskResponse_GcMetaTask{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoverPieceTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfsptask.GfSpRecoverPieceTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &GfSpAskTaskResponse_RecoverPieceTask{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigrateGvgTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfsptask.GfSpMigrateGVGTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &GfSpAskTaskResponse_MigrateGvgTask{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpReportTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpReportTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpReportTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadObjectTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfsptask.GfSpUploadObjectTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &GfSpReportTaskRequest_UploadObjectTask{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicatePieceTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfsptask.GfSpReplicatePieceTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &GfSpReportTaskRequest_ReplicatePieceTask{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SealObjectTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfsptask.GfSpSealObjectTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &GfSpReportTaskRequest_SealObjectTask{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcObjectTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfsptask.GfSpGCObjectTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &GfSpReportTaskRequest_GcObjectTask{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcZombiePieceTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfsptask.GfSpGCZombiePieceTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &GfSpReportTaskRequest_GcZombiePieceTask{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcMetaTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfsptask.GfSpGCMetaTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &GfSpReportTaskRequest_GcMetaTask{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadObjectTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfsptask.GfSpDownloadObjectTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &GfSpReportTaskRequest_DownloadObjectTask{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengePieceTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfsptask.GfSpChallengePieceTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &GfSpReportTaskRequest_ChallengePieceTask{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivePieceTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfsptask.GfSpReceivePieceTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &GfSpReportTaskRequest_ReceivePieceTask{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResumableUploadObjectTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfsptask.GfSpResumableUploadObjectTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &GfSpReportTaskRequest_ResumableUploadObjectTask{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoverPieceTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfsptask.GfSpRecoverPieceTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &GfSpReportTaskRequest_RecoverPieceTask{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigrateGvgTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gfsptask.GfSpMigrateGVGTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &GfSpReportTaskRequest_MigrateGvgTask{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpReportTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpReportTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpReportTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &gfsperrors.GfSpError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpPickVirtualGroupFamilyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpPickVirtualGroupFamilyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpPickVirtualGroupFamilyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateBucketApprovalTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateBucketApprovalTask == nil {
				m.CreateBucketApprovalTask = &gfsptask.GfSpCreateBucketApprovalTask{}
			}
			if err := m.CreateBucketApprovalTask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpPickVirtualGroupFamilyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpPickVirtualGroupFamilyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpPickVirtualGroupFamilyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &gfsperrors.GfSpError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VgfId", wireType)
			}
			m.VgfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VgfId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpNotifyMigrateSwapOutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpNotifyMigrateSwapOutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpNotifyMigrateSwapOutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwapOut == nil {
				m.SwapOut = &types.MsgSwapOut{}
			}
			if err := m.SwapOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpNotifyMigrateSwapOutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpNotifyMigrateSwapOutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpNotifyMigrateSwapOutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &gfsperrors.GfSpError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpQuerySPByOperatorAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpQuerySPByOperatorAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpQuerySPByOperatorAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpQuerySPByOperatorAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpQuerySPByOperatorAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpQuerySPByOperatorAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &gfsperrors.GfSpError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageProvider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StorageProvider == nil {
				m.StorageProvider = &types1.StorageProvider{}
			}
			if err := m.StorageProvider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpQueryTasksStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpQueryTasksStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpQueryTasksStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpQueryTasksStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpQueryTasksStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpQueryTasksStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &TasksStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TasksStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TasksStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TasksStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadCount", wireType)
			}
			m.UploadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UploadCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicateCount", wireType)
			}
			m.ReplicateCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicateCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SealCount", wireType)
			}
			m.SealCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SealCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResumableUploadCount", wireType)
			}
			m.ResumableUploadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResumableUploadCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUploading", wireType)
			}
			m.MaxUploading = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUploading |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigrateGvgCount", wireType)
			}
			m.MigrateGvgCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigrateGvgCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipManage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowManage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthManage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupManage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthManage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthManage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowManage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupManage = fmt.Errorf("proto: unexpected end of group")
)
