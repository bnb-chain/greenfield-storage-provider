// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: base/types/gfspserver/rcmgr.proto

package gfspserver

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	gfsperrors "github.com/zkMeLabs/mechain-storage-provider/base/types/gfsperrors"
	gfsplimit "github.com/zkMeLabs/mechain-storage-provider/base/types/gfsplimit"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GfSpQueryResourceLimitRequest struct {
	Module []string `protobuf:"bytes,1,rep,name=module,proto3" json:"module,omitempty"`
}

func (m *GfSpQueryResourceLimitRequest) Reset()         { *m = GfSpQueryResourceLimitRequest{} }
func (m *GfSpQueryResourceLimitRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpQueryResourceLimitRequest) ProtoMessage()    {}
func (*GfSpQueryResourceLimitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12b3811ef695ee3f, []int{0}
}
func (m *GfSpQueryResourceLimitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpQueryResourceLimitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpQueryResourceLimitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpQueryResourceLimitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpQueryResourceLimitRequest.Merge(m, src)
}
func (m *GfSpQueryResourceLimitRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpQueryResourceLimitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpQueryResourceLimitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpQueryResourceLimitRequest proto.InternalMessageInfo

func (m *GfSpQueryResourceLimitRequest) GetModule() []string {
	if m != nil {
		return m.Module
	}
	return nil
}

type GfSpQueryResourceLimitResponse struct {
	Err    *gfsperrors.GfSpError           `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Limits map[string]*gfsplimit.GfSpLimit `protobuf:"bytes,2,rep,name=limits,proto3" json:"limits,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GfSpQueryResourceLimitResponse) Reset()         { *m = GfSpQueryResourceLimitResponse{} }
func (m *GfSpQueryResourceLimitResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpQueryResourceLimitResponse) ProtoMessage()    {}
func (*GfSpQueryResourceLimitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12b3811ef695ee3f, []int{1}
}
func (m *GfSpQueryResourceLimitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpQueryResourceLimitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpQueryResourceLimitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpQueryResourceLimitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpQueryResourceLimitResponse.Merge(m, src)
}
func (m *GfSpQueryResourceLimitResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpQueryResourceLimitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpQueryResourceLimitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpQueryResourceLimitResponse proto.InternalMessageInfo

func (m *GfSpQueryResourceLimitResponse) GetErr() *gfsperrors.GfSpError {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GfSpQueryResourceLimitResponse) GetLimits() map[string]*gfsplimit.GfSpLimit {
	if m != nil {
		return m.Limits
	}
	return nil
}

type GfSpSetResourceLimitRequest struct {
	Limits map[string]*gfsplimit.GfSpLimit `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GfSpSetResourceLimitRequest) Reset()         { *m = GfSpSetResourceLimitRequest{} }
func (m *GfSpSetResourceLimitRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpSetResourceLimitRequest) ProtoMessage()    {}
func (*GfSpSetResourceLimitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12b3811ef695ee3f, []int{2}
}
func (m *GfSpSetResourceLimitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpSetResourceLimitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpSetResourceLimitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpSetResourceLimitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpSetResourceLimitRequest.Merge(m, src)
}
func (m *GfSpSetResourceLimitRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpSetResourceLimitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpSetResourceLimitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpSetResourceLimitRequest proto.InternalMessageInfo

func (m *GfSpSetResourceLimitRequest) GetLimits() map[string]*gfsplimit.GfSpLimit {
	if m != nil {
		return m.Limits
	}
	return nil
}

type GfSpSetResourceLimitResponse struct {
	Err          *gfsperrors.GfSpError `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	SuccessLists []string              `protobuf:"bytes,2,rep,name=success_lists,json=successLists,proto3" json:"success_lists,omitempty"`
}

func (m *GfSpSetResourceLimitResponse) Reset()         { *m = GfSpSetResourceLimitResponse{} }
func (m *GfSpSetResourceLimitResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpSetResourceLimitResponse) ProtoMessage()    {}
func (*GfSpSetResourceLimitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12b3811ef695ee3f, []int{3}
}
func (m *GfSpSetResourceLimitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpSetResourceLimitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpSetResourceLimitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpSetResourceLimitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpSetResourceLimitResponse.Merge(m, src)
}
func (m *GfSpSetResourceLimitResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpSetResourceLimitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpSetResourceLimitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpSetResourceLimitResponse proto.InternalMessageInfo

func (m *GfSpSetResourceLimitResponse) GetErr() *gfsperrors.GfSpError {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GfSpSetResourceLimitResponse) GetSuccessLists() []string {
	if m != nil {
		return m.SuccessLists
	}
	return nil
}

func init() {
	proto.RegisterType((*GfSpQueryResourceLimitRequest)(nil), "base.types.gfspserver.GfSpQueryResourceLimitRequest")
	proto.RegisterType((*GfSpQueryResourceLimitResponse)(nil), "base.types.gfspserver.GfSpQueryResourceLimitResponse")
	proto.RegisterMapType((map[string]*gfsplimit.GfSpLimit)(nil), "base.types.gfspserver.GfSpQueryResourceLimitResponse.LimitsEntry")
	proto.RegisterType((*GfSpSetResourceLimitRequest)(nil), "base.types.gfspserver.GfSpSetResourceLimitRequest")
	proto.RegisterMapType((map[string]*gfsplimit.GfSpLimit)(nil), "base.types.gfspserver.GfSpSetResourceLimitRequest.LimitsEntry")
	proto.RegisterType((*GfSpSetResourceLimitResponse)(nil), "base.types.gfspserver.GfSpSetResourceLimitResponse")
}

func init() { proto.RegisterFile("base/types/gfspserver/rcmgr.proto", fileDescriptor_12b3811ef695ee3f) }

var fileDescriptor_12b3811ef695ee3f = []byte{
	// 462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0xce, 0xa4, 0x58, 0xe8, 0x54, 0x41, 0x46, 0x5d, 0x4a, 0xd5, 0x18, 0xe3, 0xa5, 0x97, 0x9d,
	0x40, 0xd6, 0x45, 0xf1, 0x20, 0xb8, 0xb0, 0x78, 0xa9, 0x07, 0x53, 0x10, 0x5c, 0x04, 0x49, 0xb3,
	0x6f, 0xbb, 0x61, 0x9b, 0x4e, 0x7c, 0x2f, 0xa9, 0xd4, 0x9b, 0x27, 0x0f, 0x5e, 0xfc, 0x1f, 0xfc,
	0x67, 0x3c, 0xae, 0x37, 0x8f, 0xd2, 0xfe, 0x23, 0x32, 0x33, 0xf5, 0x07, 0x21, 0x5b, 0xa8, 0x82,
	0x97, 0x64, 0xe6, 0xcd, 0xf7, 0xde, 0xf7, 0x7d, 0x6f, 0x1e, 0xc3, 0xef, 0x8e, 0x13, 0x82, 0xb0,
	0x5c, 0x14, 0x40, 0xe1, 0xe4, 0x84, 0x0a, 0x02, 0x9c, 0x03, 0x86, 0x98, 0xe6, 0x13, 0x94, 0x05,
	0xaa, 0x52, 0x89, 0x1b, 0x1a, 0x22, 0x0d, 0x44, 0xfe, 0x86, 0xf4, 0xeb, 0x99, 0x80, 0xa8, 0x90,
	0x42, 0xf3, 0xb3, 0x99, 0x7d, 0xbf, 0x06, 0x99, 0x66, 0x79, 0x56, 0x86, 0xe6, 0x6b, 0x11, 0xc1,
	0x03, 0x7e, 0xfb, 0xe9, 0xc9, 0xa8, 0x78, 0x5e, 0x01, 0x2e, 0x62, 0x20, 0x55, 0x61, 0x0a, 0x43,
	0x7d, 0x1e, 0xc3, 0x9b, 0x0a, 0xa8, 0x14, 0x3b, 0xbc, 0x9d, 0xab, 0xe3, 0x6a, 0x0a, 0x3d, 0xe6,
	0xb7, 0x06, 0x9d, 0x78, 0xbd, 0x0b, 0x3e, 0xba, 0xdc, 0xbb, 0x28, 0x93, 0x0a, 0x35, 0x23, 0x10,
	0x11, 0x6f, 0x01, 0x62, 0x8f, 0xf9, 0x6c, 0xd0, 0x8d, 0x7c, 0x59, 0x73, 0x61, 0xe5, 0x4a, 0x5d,
	0xe3, 0x50, 0x2f, 0x63, 0x0d, 0x16, 0x2f, 0x79, 0xdb, 0xc8, 0xa3, 0x9e, 0xeb, 0xb7, 0x06, 0xdd,
	0xe8, 0x89, 0x6c, 0x34, 0x2f, 0x37, 0x53, 0x4b, 0xb3, 0xa3, 0xc3, 0x59, 0x89, 0x8b, 0x78, 0x5d,
	0xb0, 0x7f, 0xc4, 0xbb, 0x7f, 0x84, 0xc5, 0x55, 0xde, 0x3a, 0x83, 0x85, 0x51, 0xd7, 0x89, 0xf5,
	0x52, 0xec, 0xf3, 0x4b, 0xf3, 0x64, 0x5a, 0x41, 0xcf, 0x35, 0x8a, 0xef, 0xd4, 0xa9, 0x6d, 0xdf,
	0x34, 0xb3, 0x25, 0xb3, 0xe8, 0x47, 0xee, 0x43, 0x16, 0x7c, 0x65, 0xfc, 0xa6, 0x3e, 0x18, 0x41,
	0xd9, 0xd8, 0xc5, 0x17, 0xbf, 0x6c, 0x31, 0x63, 0xeb, 0xf1, 0x06, 0x5b, 0x17, 0xd4, 0xf8, 0xef,
	0x9e, 0xde, 0xf2, 0x5b, 0xcd, 0x72, 0xfe, 0xe1, 0x7a, 0xef, 0xf1, 0x2b, 0x54, 0xa5, 0x29, 0x10,
	0xbd, 0x9e, 0x66, 0xb4, 0xbe, 0xe5, 0x4e, 0x7c, 0x79, 0x1d, 0x1c, 0xea, 0x58, 0xf4, 0xd9, 0xe5,
	0xd7, 0x74, 0xde, 0x4f, 0xda, 0x11, 0xe0, 0x3c, 0x4b, 0x41, 0xbc, 0x67, 0xfc, 0x7a, 0x93, 0x22,
	0x11, 0x6d, 0xdf, 0xcd, 0xfe, 0xde, 0x56, 0x39, 0xd6, 0x72, 0xe0, 0x88, 0x0f, 0x8c, 0xef, 0x34,
	0xcf, 0x9e, 0xb8, 0xbf, 0xe5, 0xa8, 0x5a, 0x1d, 0xfb, 0x7f, 0x35, 0xe0, 0x81, 0x73, 0xf0, 0xea,
	0xcb, 0xd2, 0x63, 0xe7, 0x4b, 0x8f, 0x7d, 0x5f, 0x7a, 0xec, 0xd3, 0xca, 0x73, 0xce, 0x57, 0x9e,
	0xf3, 0x6d, 0xe5, 0x39, 0x47, 0x07, 0x93, 0xac, 0x3c, 0xad, 0xc6, 0x32, 0x55, 0x79, 0xf8, 0xee,
	0xec, 0x19, 0x0c, 0x93, 0x31, 0x85, 0x39, 0xa4, 0xa7, 0x49, 0x36, 0xdb, 0xa5, 0x52, 0x61, 0x32,
	0x81, 0xdd, 0x02, 0xd5, 0x3c, 0x3b, 0x06, 0x0c, 0x1b, 0xdf, 0x9f, 0x71, 0xdb, 0x3c, 0x0f, 0x7b,
	0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x49, 0x36, 0xd2, 0xd6, 0x9f, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GfSpResourceServiceClient is the client API for GfSpResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GfSpResourceServiceClient interface {
	GfSpSetResourceLimit(ctx context.Context, in *GfSpSetResourceLimitRequest, opts ...grpc.CallOption) (*GfSpSetResourceLimitResponse, error)
	GfSpQueryResourceLimit(ctx context.Context, in *GfSpQueryResourceLimitRequest, opts ...grpc.CallOption) (*GfSpQueryResourceLimitResponse, error)
}

type gfSpResourceServiceClient struct {
	cc grpc1.ClientConn
}

func NewGfSpResourceServiceClient(cc grpc1.ClientConn) GfSpResourceServiceClient {
	return &gfSpResourceServiceClient{cc}
}

func (c *gfSpResourceServiceClient) GfSpSetResourceLimit(ctx context.Context, in *GfSpSetResourceLimitRequest, opts ...grpc.CallOption) (*GfSpSetResourceLimitResponse, error) {
	out := new(GfSpSetResourceLimitResponse)
	err := c.cc.Invoke(ctx, "/base.types.gfspserver.GfSpResourceService/GfSpSetResourceLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpResourceServiceClient) GfSpQueryResourceLimit(ctx context.Context, in *GfSpQueryResourceLimitRequest, opts ...grpc.CallOption) (*GfSpQueryResourceLimitResponse, error) {
	out := new(GfSpQueryResourceLimitResponse)
	err := c.cc.Invoke(ctx, "/base.types.gfspserver.GfSpResourceService/GfSpQueryResourceLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GfSpResourceServiceServer is the server API for GfSpResourceService service.
type GfSpResourceServiceServer interface {
	GfSpSetResourceLimit(context.Context, *GfSpSetResourceLimitRequest) (*GfSpSetResourceLimitResponse, error)
	GfSpQueryResourceLimit(context.Context, *GfSpQueryResourceLimitRequest) (*GfSpQueryResourceLimitResponse, error)
}

// UnimplementedGfSpResourceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGfSpResourceServiceServer struct {
}

func (*UnimplementedGfSpResourceServiceServer) GfSpSetResourceLimit(ctx context.Context, req *GfSpSetResourceLimitRequest) (*GfSpSetResourceLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpSetResourceLimit not implemented")
}
func (*UnimplementedGfSpResourceServiceServer) GfSpQueryResourceLimit(ctx context.Context, req *GfSpQueryResourceLimitRequest) (*GfSpQueryResourceLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpQueryResourceLimit not implemented")
}

func RegisterGfSpResourceServiceServer(s grpc1.Server, srv GfSpResourceServiceServer) {
	s.RegisterService(&_GfSpResourceService_serviceDesc, srv)
}

func _GfSpResourceService_GfSpSetResourceLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpSetResourceLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpResourceServiceServer).GfSpSetResourceLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.types.gfspserver.GfSpResourceService/GfSpSetResourceLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpResourceServiceServer).GfSpSetResourceLimit(ctx, req.(*GfSpSetResourceLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpResourceService_GfSpQueryResourceLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpQueryResourceLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpResourceServiceServer).GfSpQueryResourceLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.types.gfspserver.GfSpResourceService/GfSpQueryResourceLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpResourceServiceServer).GfSpQueryResourceLimit(ctx, req.(*GfSpQueryResourceLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GfSpResourceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "base.types.gfspserver.GfSpResourceService",
	HandlerType: (*GfSpResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GfSpSetResourceLimit",
			Handler:    _GfSpResourceService_GfSpSetResourceLimit_Handler,
		},
		{
			MethodName: "GfSpQueryResourceLimit",
			Handler:    _GfSpResourceService_GfSpQueryResourceLimit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base/types/gfspserver/rcmgr.proto",
}

func (m *GfSpQueryResourceLimitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpQueryResourceLimitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpQueryResourceLimitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Module) > 0 {
		for iNdEx := len(m.Module) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Module[iNdEx])
			copy(dAtA[i:], m.Module[iNdEx])
			i = encodeVarintRcmgr(dAtA, i, uint64(len(m.Module[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpQueryResourceLimitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpQueryResourceLimitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpQueryResourceLimitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Limits) > 0 {
		for k := range m.Limits {
			v := m.Limits[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRcmgr(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRcmgr(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRcmgr(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRcmgr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpSetResourceLimitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpSetResourceLimitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpSetResourceLimitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Limits) > 0 {
		for k := range m.Limits {
			v := m.Limits[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRcmgr(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRcmgr(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRcmgr(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GfSpSetResourceLimitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpSetResourceLimitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpSetResourceLimitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SuccessLists) > 0 {
		for iNdEx := len(m.SuccessLists) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SuccessLists[iNdEx])
			copy(dAtA[i:], m.SuccessLists[iNdEx])
			i = encodeVarintRcmgr(dAtA, i, uint64(len(m.SuccessLists[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRcmgr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRcmgr(dAtA []byte, offset int, v uint64) int {
	offset -= sovRcmgr(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GfSpQueryResourceLimitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Module) > 0 {
		for _, s := range m.Module {
			l = len(s)
			n += 1 + l + sovRcmgr(uint64(l))
		}
	}
	return n
}

func (m *GfSpQueryResourceLimitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovRcmgr(uint64(l))
	}
	if len(m.Limits) > 0 {
		for k, v := range m.Limits {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRcmgr(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRcmgr(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRcmgr(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GfSpSetResourceLimitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Limits) > 0 {
		for k, v := range m.Limits {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRcmgr(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRcmgr(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRcmgr(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GfSpSetResourceLimitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovRcmgr(uint64(l))
	}
	if len(m.SuccessLists) > 0 {
		for _, s := range m.SuccessLists {
			l = len(s)
			n += 1 + l + sovRcmgr(uint64(l))
		}
	}
	return n
}

func sovRcmgr(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRcmgr(x uint64) (n int) {
	return sovRcmgr(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GfSpQueryResourceLimitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRcmgr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpQueryResourceLimitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpQueryResourceLimitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRcmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRcmgr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRcmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = append(m.Module, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRcmgr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRcmgr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpQueryResourceLimitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRcmgr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpQueryResourceLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpQueryResourceLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRcmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRcmgr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRcmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &gfsperrors.GfSpError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRcmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRcmgr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRcmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Limits == nil {
				m.Limits = make(map[string]*gfsplimit.GfSpLimit)
			}
			var mapkey string
			var mapvalue *gfsplimit.GfSpLimit
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRcmgr
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRcmgr
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRcmgr
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRcmgr
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRcmgr
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRcmgr
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRcmgr
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &gfsplimit.GfSpLimit{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRcmgr(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRcmgr
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Limits[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRcmgr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRcmgr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpSetResourceLimitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRcmgr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpSetResourceLimitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpSetResourceLimitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRcmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRcmgr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRcmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Limits == nil {
				m.Limits = make(map[string]*gfsplimit.GfSpLimit)
			}
			var mapkey string
			var mapvalue *gfsplimit.GfSpLimit
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRcmgr
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRcmgr
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRcmgr
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRcmgr
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRcmgr
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRcmgr
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRcmgr
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &gfsplimit.GfSpLimit{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRcmgr(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRcmgr
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Limits[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRcmgr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRcmgr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpSetResourceLimitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRcmgr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpSetResourceLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpSetResourceLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRcmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRcmgr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRcmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &gfsperrors.GfSpError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessLists", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRcmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRcmgr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRcmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuccessLists = append(m.SuccessLists, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRcmgr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRcmgr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRcmgr(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRcmgr
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRcmgr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRcmgr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRcmgr
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRcmgr
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRcmgr
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRcmgr        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRcmgr          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRcmgr = fmt.Errorf("proto: unexpected end of group")
)
