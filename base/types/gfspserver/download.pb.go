// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: base/types/gfspserver/download.proto

package gfspserver

import (
	context "context"
	fmt "fmt"
	gfsperrors "github.com/bnb-chain/greenfield-storage-provider/base/types/gfsperrors"
	gfsptask "github.com/bnb-chain/greenfield-storage-provider/base/types/gfsptask"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GfSpDownloadObjectRequest struct {
	DownloadObjectTask *gfsptask.GfSpDownloadObjectTask `protobuf:"bytes,1,opt,name=download_object_task,json=downloadObjectTask,proto3" json:"download_object_task,omitempty"`
}

func (m *GfSpDownloadObjectRequest) Reset()         { *m = GfSpDownloadObjectRequest{} }
func (m *GfSpDownloadObjectRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpDownloadObjectRequest) ProtoMessage()    {}
func (*GfSpDownloadObjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e9c5d8fc8df4b20, []int{0}
}
func (m *GfSpDownloadObjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpDownloadObjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpDownloadObjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpDownloadObjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpDownloadObjectRequest.Merge(m, src)
}
func (m *GfSpDownloadObjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpDownloadObjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpDownloadObjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpDownloadObjectRequest proto.InternalMessageInfo

func (m *GfSpDownloadObjectRequest) GetDownloadObjectTask() *gfsptask.GfSpDownloadObjectTask {
	if m != nil {
		return m.DownloadObjectTask
	}
	return nil
}

type GfSpDownloadObjectResponse struct {
	Err  *gfsperrors.GfSpError `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Data []byte                `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *GfSpDownloadObjectResponse) Reset()         { *m = GfSpDownloadObjectResponse{} }
func (m *GfSpDownloadObjectResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpDownloadObjectResponse) ProtoMessage()    {}
func (*GfSpDownloadObjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e9c5d8fc8df4b20, []int{1}
}
func (m *GfSpDownloadObjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpDownloadObjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpDownloadObjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpDownloadObjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpDownloadObjectResponse.Merge(m, src)
}
func (m *GfSpDownloadObjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpDownloadObjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpDownloadObjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpDownloadObjectResponse proto.InternalMessageInfo

func (m *GfSpDownloadObjectResponse) GetErr() *gfsperrors.GfSpError {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GfSpDownloadObjectResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type GfSpDownloadPieceRequest struct {
	DownloadPieceTask *gfsptask.GfSpDownloadPieceTask `protobuf:"bytes,1,opt,name=download_piece_task,json=downloadPieceTask,proto3" json:"download_piece_task,omitempty"`
}

func (m *GfSpDownloadPieceRequest) Reset()         { *m = GfSpDownloadPieceRequest{} }
func (m *GfSpDownloadPieceRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpDownloadPieceRequest) ProtoMessage()    {}
func (*GfSpDownloadPieceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e9c5d8fc8df4b20, []int{2}
}
func (m *GfSpDownloadPieceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpDownloadPieceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpDownloadPieceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpDownloadPieceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpDownloadPieceRequest.Merge(m, src)
}
func (m *GfSpDownloadPieceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpDownloadPieceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpDownloadPieceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpDownloadPieceRequest proto.InternalMessageInfo

func (m *GfSpDownloadPieceRequest) GetDownloadPieceTask() *gfsptask.GfSpDownloadPieceTask {
	if m != nil {
		return m.DownloadPieceTask
	}
	return nil
}

type GfSpDownloadPieceResponse struct {
	Err  *gfsperrors.GfSpError `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Data []byte                `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *GfSpDownloadPieceResponse) Reset()         { *m = GfSpDownloadPieceResponse{} }
func (m *GfSpDownloadPieceResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpDownloadPieceResponse) ProtoMessage()    {}
func (*GfSpDownloadPieceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e9c5d8fc8df4b20, []int{3}
}
func (m *GfSpDownloadPieceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpDownloadPieceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpDownloadPieceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpDownloadPieceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpDownloadPieceResponse.Merge(m, src)
}
func (m *GfSpDownloadPieceResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpDownloadPieceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpDownloadPieceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpDownloadPieceResponse proto.InternalMessageInfo

func (m *GfSpDownloadPieceResponse) GetErr() *gfsperrors.GfSpError {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GfSpDownloadPieceResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type GfSpGetChallengeInfoRequest struct {
	ChallengePieceTask *gfsptask.GfSpChallengePieceTask `protobuf:"bytes,1,opt,name=challenge_piece_task,json=challengePieceTask,proto3" json:"challenge_piece_task,omitempty"`
}

func (m *GfSpGetChallengeInfoRequest) Reset()         { *m = GfSpGetChallengeInfoRequest{} }
func (m *GfSpGetChallengeInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpGetChallengeInfoRequest) ProtoMessage()    {}
func (*GfSpGetChallengeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e9c5d8fc8df4b20, []int{4}
}
func (m *GfSpGetChallengeInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetChallengeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetChallengeInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetChallengeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetChallengeInfoRequest.Merge(m, src)
}
func (m *GfSpGetChallengeInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetChallengeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetChallengeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetChallengeInfoRequest proto.InternalMessageInfo

func (m *GfSpGetChallengeInfoRequest) GetChallengePieceTask() *gfsptask.GfSpChallengePieceTask {
	if m != nil {
		return m.ChallengePieceTask
	}
	return nil
}

type GfSpGetChallengeInfoResponse struct {
	Err           *gfsperrors.GfSpError `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Data          []byte                `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	IntegrityHash []byte                `protobuf:"bytes,3,opt,name=integrity_hash,json=integrityHash,proto3" json:"integrity_hash,omitempty"`
	Checksums     [][]byte              `protobuf:"bytes,4,rep,name=checksums,proto3" json:"checksums,omitempty"`
}

func (m *GfSpGetChallengeInfoResponse) Reset()         { *m = GfSpGetChallengeInfoResponse{} }
func (m *GfSpGetChallengeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpGetChallengeInfoResponse) ProtoMessage()    {}
func (*GfSpGetChallengeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e9c5d8fc8df4b20, []int{5}
}
func (m *GfSpGetChallengeInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpGetChallengeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpGetChallengeInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpGetChallengeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpGetChallengeInfoResponse.Merge(m, src)
}
func (m *GfSpGetChallengeInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpGetChallengeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpGetChallengeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpGetChallengeInfoResponse proto.InternalMessageInfo

func (m *GfSpGetChallengeInfoResponse) GetErr() *gfsperrors.GfSpError {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GfSpGetChallengeInfoResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GfSpGetChallengeInfoResponse) GetIntegrityHash() []byte {
	if m != nil {
		return m.IntegrityHash
	}
	return nil
}

func (m *GfSpGetChallengeInfoResponse) GetChecksums() [][]byte {
	if m != nil {
		return m.Checksums
	}
	return nil
}

func init() {
	proto.RegisterType((*GfSpDownloadObjectRequest)(nil), "base.types.gfspserver.GfSpDownloadObjectRequest")
	proto.RegisterType((*GfSpDownloadObjectResponse)(nil), "base.types.gfspserver.GfSpDownloadObjectResponse")
	proto.RegisterType((*GfSpDownloadPieceRequest)(nil), "base.types.gfspserver.GfSpDownloadPieceRequest")
	proto.RegisterType((*GfSpDownloadPieceResponse)(nil), "base.types.gfspserver.GfSpDownloadPieceResponse")
	proto.RegisterType((*GfSpGetChallengeInfoRequest)(nil), "base.types.gfspserver.GfSpGetChallengeInfoRequest")
	proto.RegisterType((*GfSpGetChallengeInfoResponse)(nil), "base.types.gfspserver.GfSpGetChallengeInfoResponse")
}

func init() {
	proto.RegisterFile("base/types/gfspserver/download.proto", fileDescriptor_4e9c5d8fc8df4b20)
}

var fileDescriptor_4e9c5d8fc8df4b20 = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0x6e, 0xe8, 0x84, 0x84, 0x19, 0x48, 0xf3, 0x86, 0x14, 0xc2, 0x14, 0x95, 0x08, 0xa4, 0x0a,
	0xd4, 0x78, 0x74, 0x6f, 0xc0, 0xdf, 0xe0, 0x0a, 0x94, 0x71, 0x35, 0x09, 0x15, 0xc7, 0x39, 0x4d,
	0x42, 0x3b, 0x3b, 0xd8, 0x6e, 0x61, 0xc0, 0x0d, 0x6f, 0xb0, 0xf7, 0xe0, 0x45, 0xb8, 0xdc, 0x25,
	0x97, 0xa8, 0x7d, 0x11, 0x14, 0xf7, 0x2f, 0x24, 0x29, 0xdb, 0xa4, 0xdd, 0x24, 0xd6, 0x39, 0xe7,
	0xfb, 0x3e, 0x7f, 0x3e, 0xc7, 0x46, 0x0f, 0x42, 0xaa, 0x80, 0xe8, 0x93, 0x0c, 0x14, 0x89, 0xfb,
	0x2a, 0x53, 0x20, 0xc7, 0x20, 0x49, 0x24, 0x3e, 0xf3, 0xa1, 0xa0, 0x91, 0x9f, 0x49, 0xa1, 0x05,
	0xbe, 0x93, 0x57, 0xf9, 0xa6, 0xca, 0x5f, 0x55, 0x39, 0xf7, 0x4b, 0x60, 0x90, 0x52, 0x48, 0x45,
	0xcc, 0x6f, 0x86, 0x74, 0xdc, 0x52, 0x89, 0xa6, 0x6a, 0x40, 0xf2, 0xcf, 0x2c, 0xef, 0x7d, 0x45,
	0x77, 0x0f, 0xfa, 0x87, 0xd9, 0xf3, 0xb9, 0xde, 0x9b, 0xf0, 0x23, 0x30, 0x1d, 0xc0, 0xa7, 0x11,
	0x28, 0x8d, 0xdf, 0xa3, 0x9d, 0xc5, 0x46, 0x7a, 0xc2, 0x64, 0x7a, 0x39, 0xd4, 0xb6, 0x5a, 0x56,
	0xfb, 0x66, 0xf7, 0xb1, 0x5f, 0xda, 0x95, 0xa1, 0xad, 0xb2, 0xbd, 0xa3, 0x6a, 0x10, 0xe0, 0xa8,
	0x12, 0xf3, 0x22, 0xe4, 0xd4, 0x69, 0xab, 0x4c, 0x70, 0x05, 0xb8, 0x8b, 0x9a, 0x20, 0xe5, 0x5c,
	0xab, 0x55, 0xd6, 0x9a, 0x59, 0x35, 0x6a, 0x2f, 0xf2, 0x65, 0x90, 0x17, 0x63, 0x8c, 0x36, 0x22,
	0xaa, 0xa9, 0x7d, 0xad, 0x65, 0xb5, 0x37, 0x03, 0xb3, 0xf6, 0xc6, 0xc8, 0x2e, 0xaa, 0xbc, 0x4d,
	0x81, 0xc1, 0xc2, 0xe0, 0x11, 0xda, 0x5e, 0x1a, 0xcc, 0xf2, 0x44, 0xd1, 0xdf, 0xa3, 0x73, 0xfd,
	0x19, 0x2e, 0x63, 0x6f, 0x2b, 0x2a, 0x87, 0x3c, 0xf6, 0xef, 0xc9, 0xce, 0x75, 0xaf, 0xd8, 0xdc,
	0x77, 0x74, 0x2f, 0xaf, 0x3a, 0x00, 0xfd, 0x2c, 0xa1, 0xc3, 0x21, 0xf0, 0x18, 0x5e, 0xf3, 0xbe,
	0x28, 0x34, 0x90, 0x2d, 0xe2, 0x55, 0x83, 0xeb, 0x1b, 0xb8, 0x24, 0x5b, 0x39, 0xc4, 0xac, 0x12,
	0xf3, 0x7e, 0x5a, 0x68, 0xb7, 0x5e, 0xfe, 0x6a, 0x6d, 0xe2, 0x87, 0xe8, 0x76, 0xca, 0x35, 0xc4,
	0x32, 0xd5, 0x27, 0xbd, 0x84, 0xaa, 0xc4, 0x6e, 0x9a, 0xec, 0xad, 0x65, 0xf4, 0x15, 0x55, 0x09,
	0xde, 0x45, 0x37, 0x58, 0x02, 0x6c, 0xa0, 0x46, 0xc7, 0xca, 0xde, 0x68, 0x35, 0xdb, 0x9b, 0xc1,
	0x2a, 0xd0, 0x3d, 0x6d, 0xa2, 0xed, 0x62, 0x47, 0x0e, 0x41, 0x8e, 0x53, 0x06, 0xf8, 0x1b, 0xc2,
	0xd5, 0x31, 0xc4, 0x7b, 0x7e, 0xed, 0x9d, 0xf3, 0xd7, 0xde, 0x16, 0xe7, 0xc9, 0x25, 0x10, 0xb3,
	0xf3, 0xf1, 0x1a, 0xf8, 0x0b, 0xda, 0xaa, 0x4c, 0x09, 0x26, 0x17, 0x60, 0x2a, 0xce, 0xb1, 0xb3,
	0x77, 0x71, 0xc0, 0x52, 0xf9, 0x87, 0x85, 0x76, 0xea, 0x9a, 0x87, 0xbb, 0xff, 0x21, 0x5b, 0x33,
	0x68, 0xce, 0xfe, 0xa5, 0x30, 0x8b, 0x3d, 0x3c, 0xfd, 0xf0, 0x6b, 0xe2, 0x5a, 0x67, 0x13, 0xd7,
	0xfa, 0x33, 0x71, 0xad, 0xd3, 0xa9, 0xdb, 0x38, 0x9b, 0xba, 0x8d, 0xdf, 0x53, 0xb7, 0x71, 0xf4,
	0x32, 0x4e, 0x75, 0x32, 0x0a, 0x7d, 0x26, 0x8e, 0x49, 0xc8, 0xc3, 0x0e, 0x4b, 0x68, 0xca, 0x49,
	0x2c, 0x01, 0x78, 0x3f, 0x85, 0x61, 0xd4, 0x51, 0x5a, 0x48, 0x1a, 0x43, 0x27, 0x93, 0x62, 0x9c,
	0x46, 0x20, 0x49, 0xed, 0x43, 0x1a, 0x5e, 0x37, 0xcf, 0xdc, 0xfe, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x6f, 0xd6, 0xc1, 0x00, 0x68, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GfSpDownloadServiceClient is the client API for GfSpDownloadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GfSpDownloadServiceClient interface {
	GfSpDownloadObject(ctx context.Context, in *GfSpDownloadObjectRequest, opts ...grpc.CallOption) (*GfSpDownloadObjectResponse, error)
	GfSpDownloadPiece(ctx context.Context, in *GfSpDownloadPieceRequest, opts ...grpc.CallOption) (*GfSpDownloadPieceResponse, error)
	GfSpGetChallengeInfo(ctx context.Context, in *GfSpGetChallengeInfoRequest, opts ...grpc.CallOption) (*GfSpGetChallengeInfoResponse, error)
}

type gfSpDownloadServiceClient struct {
	cc grpc1.ClientConn
}

func NewGfSpDownloadServiceClient(cc grpc1.ClientConn) GfSpDownloadServiceClient {
	return &gfSpDownloadServiceClient{cc}
}

func (c *gfSpDownloadServiceClient) GfSpDownloadObject(ctx context.Context, in *GfSpDownloadObjectRequest, opts ...grpc.CallOption) (*GfSpDownloadObjectResponse, error) {
	out := new(GfSpDownloadObjectResponse)
	err := c.cc.Invoke(ctx, "/base.types.gfspserver.GfSpDownloadService/GfSpDownloadObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpDownloadServiceClient) GfSpDownloadPiece(ctx context.Context, in *GfSpDownloadPieceRequest, opts ...grpc.CallOption) (*GfSpDownloadPieceResponse, error) {
	out := new(GfSpDownloadPieceResponse)
	err := c.cc.Invoke(ctx, "/base.types.gfspserver.GfSpDownloadService/GfSpDownloadPiece", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpDownloadServiceClient) GfSpGetChallengeInfo(ctx context.Context, in *GfSpGetChallengeInfoRequest, opts ...grpc.CallOption) (*GfSpGetChallengeInfoResponse, error) {
	out := new(GfSpGetChallengeInfoResponse)
	err := c.cc.Invoke(ctx, "/base.types.gfspserver.GfSpDownloadService/GfSpGetChallengeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GfSpDownloadServiceServer is the server API for GfSpDownloadService service.
type GfSpDownloadServiceServer interface {
	GfSpDownloadObject(context.Context, *GfSpDownloadObjectRequest) (*GfSpDownloadObjectResponse, error)
	GfSpDownloadPiece(context.Context, *GfSpDownloadPieceRequest) (*GfSpDownloadPieceResponse, error)
	GfSpGetChallengeInfo(context.Context, *GfSpGetChallengeInfoRequest) (*GfSpGetChallengeInfoResponse, error)
}

// UnimplementedGfSpDownloadServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGfSpDownloadServiceServer struct {
}

func (*UnimplementedGfSpDownloadServiceServer) GfSpDownloadObject(ctx context.Context, req *GfSpDownloadObjectRequest) (*GfSpDownloadObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpDownloadObject not implemented")
}
func (*UnimplementedGfSpDownloadServiceServer) GfSpDownloadPiece(ctx context.Context, req *GfSpDownloadPieceRequest) (*GfSpDownloadPieceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpDownloadPiece not implemented")
}
func (*UnimplementedGfSpDownloadServiceServer) GfSpGetChallengeInfo(ctx context.Context, req *GfSpGetChallengeInfoRequest) (*GfSpGetChallengeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpGetChallengeInfo not implemented")
}

func RegisterGfSpDownloadServiceServer(s grpc1.Server, srv GfSpDownloadServiceServer) {
	s.RegisterService(&_GfSpDownloadService_serviceDesc, srv)
}

func _GfSpDownloadService_GfSpDownloadObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpDownloadObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpDownloadServiceServer).GfSpDownloadObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.types.gfspserver.GfSpDownloadService/GfSpDownloadObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpDownloadServiceServer).GfSpDownloadObject(ctx, req.(*GfSpDownloadObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpDownloadService_GfSpDownloadPiece_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpDownloadPieceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpDownloadServiceServer).GfSpDownloadPiece(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.types.gfspserver.GfSpDownloadService/GfSpDownloadPiece",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpDownloadServiceServer).GfSpDownloadPiece(ctx, req.(*GfSpDownloadPieceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpDownloadService_GfSpGetChallengeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpGetChallengeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpDownloadServiceServer).GfSpGetChallengeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.types.gfspserver.GfSpDownloadService/GfSpGetChallengeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpDownloadServiceServer).GfSpGetChallengeInfo(ctx, req.(*GfSpGetChallengeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GfSpDownloadService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "base.types.gfspserver.GfSpDownloadService",
	HandlerType: (*GfSpDownloadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GfSpDownloadObject",
			Handler:    _GfSpDownloadService_GfSpDownloadObject_Handler,
		},
		{
			MethodName: "GfSpDownloadPiece",
			Handler:    _GfSpDownloadService_GfSpDownloadPiece_Handler,
		},
		{
			MethodName: "GfSpGetChallengeInfo",
			Handler:    _GfSpDownloadService_GfSpGetChallengeInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base/types/gfspserver/download.proto",
}

func (m *GfSpDownloadObjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpDownloadObjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpDownloadObjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DownloadObjectTask != nil {
		{
			size, err := m.DownloadObjectTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownload(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpDownloadObjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpDownloadObjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpDownloadObjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintDownload(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownload(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpDownloadPieceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpDownloadPieceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpDownloadPieceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DownloadPieceTask != nil {
		{
			size, err := m.DownloadPieceTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownload(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpDownloadPieceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpDownloadPieceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpDownloadPieceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintDownload(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownload(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetChallengeInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetChallengeInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetChallengeInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengePieceTask != nil {
		{
			size, err := m.ChallengePieceTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownload(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpGetChallengeInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpGetChallengeInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpGetChallengeInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Checksums) > 0 {
		for iNdEx := len(m.Checksums) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Checksums[iNdEx])
			copy(dAtA[i:], m.Checksums[iNdEx])
			i = encodeVarintDownload(dAtA, i, uint64(len(m.Checksums[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.IntegrityHash) > 0 {
		i -= len(m.IntegrityHash)
		copy(dAtA[i:], m.IntegrityHash)
		i = encodeVarintDownload(dAtA, i, uint64(len(m.IntegrityHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintDownload(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownload(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDownload(dAtA []byte, offset int, v uint64) int {
	offset -= sovDownload(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GfSpDownloadObjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownloadObjectTask != nil {
		l = m.DownloadObjectTask.Size()
		n += 1 + l + sovDownload(uint64(l))
	}
	return n
}

func (m *GfSpDownloadObjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovDownload(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDownload(uint64(l))
	}
	return n
}

func (m *GfSpDownloadPieceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownloadPieceTask != nil {
		l = m.DownloadPieceTask.Size()
		n += 1 + l + sovDownload(uint64(l))
	}
	return n
}

func (m *GfSpDownloadPieceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovDownload(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDownload(uint64(l))
	}
	return n
}

func (m *GfSpGetChallengeInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengePieceTask != nil {
		l = m.ChallengePieceTask.Size()
		n += 1 + l + sovDownload(uint64(l))
	}
	return n
}

func (m *GfSpGetChallengeInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovDownload(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDownload(uint64(l))
	}
	l = len(m.IntegrityHash)
	if l > 0 {
		n += 1 + l + sovDownload(uint64(l))
	}
	if len(m.Checksums) > 0 {
		for _, b := range m.Checksums {
			l = len(b)
			n += 1 + l + sovDownload(uint64(l))
		}
	}
	return n
}

func sovDownload(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDownload(x uint64) (n int) {
	return sovDownload(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GfSpDownloadObjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpDownloadObjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpDownloadObjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadObjectTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownloadObjectTask == nil {
				m.DownloadObjectTask = &gfsptask.GfSpDownloadObjectTask{}
			}
			if err := m.DownloadObjectTask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDownload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpDownloadObjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpDownloadObjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpDownloadObjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &gfsperrors.GfSpError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDownload
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDownload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDownload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpDownloadPieceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpDownloadPieceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpDownloadPieceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadPieceTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownloadPieceTask == nil {
				m.DownloadPieceTask = &gfsptask.GfSpDownloadPieceTask{}
			}
			if err := m.DownloadPieceTask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDownload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpDownloadPieceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpDownloadPieceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpDownloadPieceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &gfsperrors.GfSpError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDownload
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDownload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDownload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetChallengeInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetChallengeInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetChallengeInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengePieceTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChallengePieceTask == nil {
				m.ChallengePieceTask = &gfsptask.GfSpChallengePieceTask{}
			}
			if err := m.ChallengePieceTask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDownload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpGetChallengeInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpGetChallengeInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpGetChallengeInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &gfsperrors.GfSpError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDownload
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDownload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntegrityHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDownload
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDownload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntegrityHash = append(m.IntegrityHash[:0], dAtA[iNdEx:postIndex]...)
			if m.IntegrityHash == nil {
				m.IntegrityHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksums", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDownload
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDownload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksums = append(m.Checksums, make([]byte, postIndex-iNdEx))
			copy(m.Checksums[len(m.Checksums)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDownload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDownload(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDownload
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDownload
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDownload
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDownload
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDownload        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDownload          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDownload = fmt.Errorf("proto: unexpected end of group")
)
