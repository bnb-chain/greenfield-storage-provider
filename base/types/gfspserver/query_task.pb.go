// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: base/types/gfspserver/query_task.proto

package gfspserver

import (
	context "context"
	fmt "fmt"
	gfsperrors "github.com/bnb-chain/greenfield-storage-provider/base/types/gfsperrors"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GfSpQueryTasksRequest struct {
	TaskSubKey string `protobuf:"bytes,1,opt,name=task_sub_key,json=taskSubKey,proto3" json:"task_sub_key,omitempty"`
}

func (m *GfSpQueryTasksRequest) Reset()         { *m = GfSpQueryTasksRequest{} }
func (m *GfSpQueryTasksRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpQueryTasksRequest) ProtoMessage()    {}
func (*GfSpQueryTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_35e509f6e3771557, []int{0}
}
func (m *GfSpQueryTasksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpQueryTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpQueryTasksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpQueryTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpQueryTasksRequest.Merge(m, src)
}
func (m *GfSpQueryTasksRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpQueryTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpQueryTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpQueryTasksRequest proto.InternalMessageInfo

func (m *GfSpQueryTasksRequest) GetTaskSubKey() string {
	if m != nil {
		return m.TaskSubKey
	}
	return ""
}

type GfSpQueryTasksResponse struct {
	Err      *gfsperrors.GfSpError `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	TaskInfo []string              `protobuf:"bytes,2,rep,name=task_info,json=taskInfo,proto3" json:"task_info,omitempty"`
}

func (m *GfSpQueryTasksResponse) Reset()         { *m = GfSpQueryTasksResponse{} }
func (m *GfSpQueryTasksResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpQueryTasksResponse) ProtoMessage()    {}
func (*GfSpQueryTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_35e509f6e3771557, []int{1}
}
func (m *GfSpQueryTasksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpQueryTasksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpQueryTasksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpQueryTasksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpQueryTasksResponse.Merge(m, src)
}
func (m *GfSpQueryTasksResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpQueryTasksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpQueryTasksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpQueryTasksResponse proto.InternalMessageInfo

func (m *GfSpQueryTasksResponse) GetErr() *gfsperrors.GfSpError {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GfSpQueryTasksResponse) GetTaskInfo() []string {
	if m != nil {
		return m.TaskInfo
	}
	return nil
}

type GfSpQueryBucketMigrateRequest struct {
}

func (m *GfSpQueryBucketMigrateRequest) Reset()         { *m = GfSpQueryBucketMigrateRequest{} }
func (m *GfSpQueryBucketMigrateRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpQueryBucketMigrateRequest) ProtoMessage()    {}
func (*GfSpQueryBucketMigrateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_35e509f6e3771557, []int{2}
}
func (m *GfSpQueryBucketMigrateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpQueryBucketMigrateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpQueryBucketMigrateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpQueryBucketMigrateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpQueryBucketMigrateRequest.Merge(m, src)
}
func (m *GfSpQueryBucketMigrateRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpQueryBucketMigrateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpQueryBucketMigrateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpQueryBucketMigrateRequest proto.InternalMessageInfo

type GfSpBucketMigrate struct {
	BucketName string            `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	BucketId   uint64            `protobuf:"varint,2,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	Finished   uint32            `protobuf:"varint,3,opt,name=finished,proto3" json:"finished,omitempty"`
	GvgTask    []*GfSpMigrateGVG `protobuf:"bytes,4,rep,name=gvg_task,json=gvgTask,proto3" json:"gvg_task,omitempty"`
}

func (m *GfSpBucketMigrate) Reset()         { *m = GfSpBucketMigrate{} }
func (m *GfSpBucketMigrate) String() string { return proto.CompactTextString(m) }
func (*GfSpBucketMigrate) ProtoMessage()    {}
func (*GfSpBucketMigrate) Descriptor() ([]byte, []int) {
	return fileDescriptor_35e509f6e3771557, []int{3}
}
func (m *GfSpBucketMigrate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpBucketMigrate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpBucketMigrate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpBucketMigrate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpBucketMigrate.Merge(m, src)
}
func (m *GfSpBucketMigrate) XXX_Size() int {
	return m.Size()
}
func (m *GfSpBucketMigrate) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpBucketMigrate.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpBucketMigrate proto.InternalMessageInfo

func (m *GfSpBucketMigrate) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *GfSpBucketMigrate) GetBucketId() uint64 {
	if m != nil {
		return m.BucketId
	}
	return 0
}

func (m *GfSpBucketMigrate) GetFinished() uint32 {
	if m != nil {
		return m.Finished
	}
	return 0
}

func (m *GfSpBucketMigrate) GetGvgTask() []*GfSpMigrateGVG {
	if m != nil {
		return m.GvgTask
	}
	return nil
}

type GfSpMigrateGVG struct {
	DestGvgId            uint32 `protobuf:"varint,1,opt,name=dest_gvg_id,json=destGvgId,proto3" json:"dest_gvg_id,omitempty"`
	SrcGvgId             uint32 `protobuf:"varint,2,opt,name=src_gvg_id,json=srcGvgId,proto3" json:"src_gvg_id,omitempty"`
	LastMigratedObjectId uint64 `protobuf:"varint,3,opt,name=last_migrated_object_id,json=lastMigratedObjectId,proto3" json:"last_migrated_object_id,omitempty"`
	Status               int32  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *GfSpMigrateGVG) Reset()         { *m = GfSpMigrateGVG{} }
func (m *GfSpMigrateGVG) String() string { return proto.CompactTextString(m) }
func (*GfSpMigrateGVG) ProtoMessage()    {}
func (*GfSpMigrateGVG) Descriptor() ([]byte, []int) {
	return fileDescriptor_35e509f6e3771557, []int{4}
}
func (m *GfSpMigrateGVG) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpMigrateGVG) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpMigrateGVG.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpMigrateGVG) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpMigrateGVG.Merge(m, src)
}
func (m *GfSpMigrateGVG) XXX_Size() int {
	return m.Size()
}
func (m *GfSpMigrateGVG) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpMigrateGVG.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpMigrateGVG proto.InternalMessageInfo

func (m *GfSpMigrateGVG) GetDestGvgId() uint32 {
	if m != nil {
		return m.DestGvgId
	}
	return 0
}

func (m *GfSpMigrateGVG) GetSrcGvgId() uint32 {
	if m != nil {
		return m.SrcGvgId
	}
	return 0
}

func (m *GfSpMigrateGVG) GetLastMigratedObjectId() uint64 {
	if m != nil {
		return m.LastMigratedObjectId
	}
	return 0
}

func (m *GfSpMigrateGVG) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type GfSpQueryBucketMigrateResponse struct {
	Err           *gfsperrors.GfSpError `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	BucketMigrate []*GfSpBucketMigrate  `protobuf:"bytes,2,rep,name=bucket_migrate,json=bucketMigrate,proto3" json:"bucket_migrate,omitempty"`
	SelfSpId      uint32                `protobuf:"varint,3,opt,name=self_sp_id,json=selfSpId,proto3" json:"self_sp_id,omitempty"`
}

func (m *GfSpQueryBucketMigrateResponse) Reset()         { *m = GfSpQueryBucketMigrateResponse{} }
func (m *GfSpQueryBucketMigrateResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpQueryBucketMigrateResponse) ProtoMessage()    {}
func (*GfSpQueryBucketMigrateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_35e509f6e3771557, []int{5}
}
func (m *GfSpQueryBucketMigrateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpQueryBucketMigrateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpQueryBucketMigrateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpQueryBucketMigrateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpQueryBucketMigrateResponse.Merge(m, src)
}
func (m *GfSpQueryBucketMigrateResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpQueryBucketMigrateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpQueryBucketMigrateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpQueryBucketMigrateResponse proto.InternalMessageInfo

func (m *GfSpQueryBucketMigrateResponse) GetErr() *gfsperrors.GfSpError {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GfSpQueryBucketMigrateResponse) GetBucketMigrate() []*GfSpBucketMigrate {
	if m != nil {
		return m.BucketMigrate
	}
	return nil
}

func (m *GfSpQueryBucketMigrateResponse) GetSelfSpId() uint32 {
	if m != nil {
		return m.SelfSpId
	}
	return 0
}

type GfSpQuerySpExitRequest struct {
}

func (m *GfSpQuerySpExitRequest) Reset()         { *m = GfSpQuerySpExitRequest{} }
func (m *GfSpQuerySpExitRequest) String() string { return proto.CompactTextString(m) }
func (*GfSpQuerySpExitRequest) ProtoMessage()    {}
func (*GfSpQuerySpExitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_35e509f6e3771557, []int{6}
}
func (m *GfSpQuerySpExitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpQuerySpExitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpQuerySpExitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpQuerySpExitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpQuerySpExitRequest.Merge(m, src)
}
func (m *GfSpQuerySpExitRequest) XXX_Size() int {
	return m.Size()
}
func (m *GfSpQuerySpExitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpQuerySpExitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpQuerySpExitRequest proto.InternalMessageInfo

type SwapOutUnit struct {
	SwapOutKey    string            `protobuf:"bytes,1,opt,name=swap_out_key,json=swapOutKey,proto3" json:"swap_out_key,omitempty"`
	Status        int32             `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	SuccessorSpId uint32            `protobuf:"varint,3,opt,name=successor_sp_id,json=successorSpId,proto3" json:"successor_sp_id,omitempty"`
	GvgTask       []*GfSpMigrateGVG `protobuf:"bytes,4,rep,name=gvg_task,json=gvgTask,proto3" json:"gvg_task,omitempty"`
}

func (m *SwapOutUnit) Reset()         { *m = SwapOutUnit{} }
func (m *SwapOutUnit) String() string { return proto.CompactTextString(m) }
func (*SwapOutUnit) ProtoMessage()    {}
func (*SwapOutUnit) Descriptor() ([]byte, []int) {
	return fileDescriptor_35e509f6e3771557, []int{7}
}
func (m *SwapOutUnit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapOutUnit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapOutUnit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapOutUnit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapOutUnit.Merge(m, src)
}
func (m *SwapOutUnit) XXX_Size() int {
	return m.Size()
}
func (m *SwapOutUnit) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapOutUnit.DiscardUnknown(m)
}

var xxx_messageInfo_SwapOutUnit proto.InternalMessageInfo

func (m *SwapOutUnit) GetSwapOutKey() string {
	if m != nil {
		return m.SwapOutKey
	}
	return ""
}

func (m *SwapOutUnit) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *SwapOutUnit) GetSuccessorSpId() uint32 {
	if m != nil {
		return m.SuccessorSpId
	}
	return 0
}

func (m *SwapOutUnit) GetGvgTask() []*GfSpMigrateGVG {
	if m != nil {
		return m.GvgTask
	}
	return nil
}

type GfSpQuerySpExitResponse struct {
	Err         *gfsperrors.GfSpError `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	SwapOutSrc  []*SwapOutUnit        `protobuf:"bytes,2,rep,name=swap_out_src,json=swapOutSrc,proto3" json:"swap_out_src,omitempty"`
	SwapOutDest []*SwapOutUnit        `protobuf:"bytes,3,rep,name=swap_out_dest,json=swapOutDest,proto3" json:"swap_out_dest,omitempty"`
	SelfSpId    uint32                `protobuf:"varint,4,opt,name=self_sp_id,json=selfSpId,proto3" json:"self_sp_id,omitempty"`
}

func (m *GfSpQuerySpExitResponse) Reset()         { *m = GfSpQuerySpExitResponse{} }
func (m *GfSpQuerySpExitResponse) String() string { return proto.CompactTextString(m) }
func (*GfSpQuerySpExitResponse) ProtoMessage()    {}
func (*GfSpQuerySpExitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_35e509f6e3771557, []int{8}
}
func (m *GfSpQuerySpExitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GfSpQuerySpExitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GfSpQuerySpExitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GfSpQuerySpExitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GfSpQuerySpExitResponse.Merge(m, src)
}
func (m *GfSpQuerySpExitResponse) XXX_Size() int {
	return m.Size()
}
func (m *GfSpQuerySpExitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GfSpQuerySpExitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GfSpQuerySpExitResponse proto.InternalMessageInfo

func (m *GfSpQuerySpExitResponse) GetErr() *gfsperrors.GfSpError {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GfSpQuerySpExitResponse) GetSwapOutSrc() []*SwapOutUnit {
	if m != nil {
		return m.SwapOutSrc
	}
	return nil
}

func (m *GfSpQuerySpExitResponse) GetSwapOutDest() []*SwapOutUnit {
	if m != nil {
		return m.SwapOutDest
	}
	return nil
}

func (m *GfSpQuerySpExitResponse) GetSelfSpId() uint32 {
	if m != nil {
		return m.SelfSpId
	}
	return 0
}

func init() {
	proto.RegisterType((*GfSpQueryTasksRequest)(nil), "base.types.gfspserver.GfSpQueryTasksRequest")
	proto.RegisterType((*GfSpQueryTasksResponse)(nil), "base.types.gfspserver.GfSpQueryTasksResponse")
	proto.RegisterType((*GfSpQueryBucketMigrateRequest)(nil), "base.types.gfspserver.GfSpQueryBucketMigrateRequest")
	proto.RegisterType((*GfSpBucketMigrate)(nil), "base.types.gfspserver.GfSpBucketMigrate")
	proto.RegisterType((*GfSpMigrateGVG)(nil), "base.types.gfspserver.GfSpMigrateGVG")
	proto.RegisterType((*GfSpQueryBucketMigrateResponse)(nil), "base.types.gfspserver.GfSpQueryBucketMigrateResponse")
	proto.RegisterType((*GfSpQuerySpExitRequest)(nil), "base.types.gfspserver.GfSpQuerySpExitRequest")
	proto.RegisterType((*SwapOutUnit)(nil), "base.types.gfspserver.SwapOutUnit")
	proto.RegisterType((*GfSpQuerySpExitResponse)(nil), "base.types.gfspserver.GfSpQuerySpExitResponse")
}

func init() {
	proto.RegisterFile("base/types/gfspserver/query_task.proto", fileDescriptor_35e509f6e3771557)
}

var fileDescriptor_35e509f6e3771557 = []byte{
	// 727 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcb, 0x6e, 0xd3, 0x5a,
	0x14, 0x8d, 0x93, 0xdc, 0xde, 0xe4, 0xe4, 0xa6, 0xd5, 0x3d, 0xea, 0xc3, 0x0a, 0xe0, 0x1a, 0x4b,
	0x54, 0x19, 0x10, 0x47, 0x0a, 0x74, 0xc0, 0x0c, 0x55, 0x6d, 0xa3, 0xa8, 0x82, 0x0a, 0x07, 0x18,
	0x30, 0x31, 0x7e, 0x6c, 0xbb, 0x26, 0x89, 0xed, 0x9e, 0x73, 0x9c, 0x92, 0x0f, 0x40, 0x4c, 0xf9,
	0x01, 0xbe, 0x01, 0xf1, 0x0d, 0x4c, 0x18, 0x76, 0xc8, 0x10, 0xb5, 0x5f, 0xc1, 0x0c, 0x1d, 0xdb,
	0x49, 0xed, 0xf4, 0x89, 0xca, 0x28, 0xf1, 0x7e, 0xae, 0xbd, 0xd6, 0xf6, 0x36, 0xda, 0x30, 0x0d,
	0x0a, 0x6d, 0x36, 0x09, 0x81, 0xb6, 0x5d, 0x87, 0x86, 0x14, 0xc8, 0x18, 0x48, 0xfb, 0x30, 0x02,
	0x32, 0xd1, 0x99, 0x41, 0x07, 0x6a, 0x48, 0x02, 0x16, 0xe0, 0x15, 0x1e, 0xa7, 0xc6, 0x71, 0xea,
	0x59, 0x5c, 0xe3, 0xfe, 0x5c, 0x3a, 0x10, 0x12, 0x10, 0xda, 0x8e, 0x7f, 0x92, 0x4c, 0xe5, 0x09,
	0x5a, 0xe9, 0x3a, 0xfd, 0xf0, 0x05, 0xaf, 0xf8, 0xd2, 0xa0, 0x03, 0xaa, 0xc1, 0x61, 0x04, 0x94,
	0x61, 0x19, 0xfd, 0xc7, 0x1b, 0xe8, 0x34, 0x32, 0xf5, 0x01, 0x4c, 0x44, 0x41, 0x16, 0x9a, 0x55,
	0x0d, 0x71, 0x5b, 0x3f, 0x32, 0xf7, 0x60, 0xa2, 0x78, 0x68, 0x75, 0x3e, 0x95, 0x86, 0x81, 0x4f,
	0x01, 0x77, 0x50, 0x09, 0x08, 0x89, 0x53, 0x6a, 0x1d, 0x59, 0x9d, 0x03, 0x97, 0xa0, 0x50, 0x79,
	0xee, 0x0e, 0xff, 0xab, 0xf1, 0x60, 0x7c, 0x07, 0x55, 0xe3, 0x7e, 0x9e, 0xef, 0x04, 0x62, 0x51,
	0x2e, 0x35, 0xab, 0x5a, 0x85, 0x1b, 0x7a, 0xbe, 0x13, 0x28, 0xeb, 0xe8, 0xde, 0xac, 0xd5, 0x56,
	0x64, 0x0d, 0x80, 0x3d, 0xf3, 0x5c, 0x62, 0x30, 0x48, 0xd1, 0x2a, 0x5f, 0x04, 0xf4, 0x3f, 0x8f,
	0xc8, 0x39, 0xf1, 0x3a, 0xaa, 0x99, 0xb1, 0x41, 0xf7, 0x8d, 0x11, 0x4c, 0x47, 0x48, 0x4c, 0xcf,
	0x8d, 0x11, 0xf0, 0xa6, 0x69, 0x80, 0x67, 0x8b, 0x45, 0x59, 0x68, 0x96, 0xb5, 0x4a, 0x62, 0xe8,
	0xd9, 0xb8, 0x81, 0x2a, 0x8e, 0xe7, 0x7b, 0xf4, 0x00, 0x6c, 0xb1, 0x24, 0x0b, 0xcd, 0xba, 0x36,
	0x7b, 0xc6, 0x4f, 0x51, 0xc5, 0x1d, 0xbb, 0xb1, 0x04, 0x62, 0x59, 0x2e, 0x35, 0x6b, 0x9d, 0x07,
	0xea, 0x85, 0x1a, 0xc4, 0x63, 0xa6, 0x78, 0xba, 0xaf, 0xbb, 0xda, 0xbf, 0xee, 0xd8, 0xe5, 0x64,
	0x29, 0x9f, 0x05, 0xb4, 0x98, 0xf7, 0x61, 0x09, 0xd5, 0x6c, 0xa0, 0x4c, 0xe7, 0x95, 0x3d, 0x3b,
	0x86, 0x5b, 0xd7, 0xaa, 0xdc, 0xd4, 0x1d, 0xbb, 0x3d, 0x1b, 0xdf, 0x45, 0x88, 0x12, 0x6b, 0xea,
	0x2e, 0x26, 0x90, 0x28, 0xb1, 0x12, 0xef, 0x26, 0x5a, 0x1b, 0x1a, 0x94, 0xe9, 0xa3, 0xa4, 0xa0,
	0xad, 0x07, 0xe6, 0x3b, 0xb0, 0xe2, 0xc9, 0x4a, 0xf1, 0x64, 0xcb, 0xdc, 0x9d, 0xb6, 0xb3, 0xf7,
	0x63, 0x67, 0xcf, 0xc6, 0xab, 0x68, 0x81, 0x32, 0x83, 0x45, 0x54, 0x2c, 0xcb, 0x42, 0xf3, 0x1f,
	0x2d, 0x7d, 0x52, 0xbe, 0x09, 0x48, 0xba, 0x8c, 0xf3, 0x5b, 0xc8, 0xbc, 0x8f, 0x16, 0x53, 0xc6,
	0x53, 0x9c, 0xb1, 0xd6, 0xb5, 0x4e, 0xf3, 0x0a, 0xfa, 0xf2, 0xdd, 0xeb, 0x66, 0x4e, 0x63, 0x4e,
	0x0a, 0x0c, 0x1d, 0x9d, 0x86, 0xd3, 0x49, 0x39, 0x29, 0x30, 0x74, 0xfa, 0x61, 0xcf, 0x56, 0xc4,
	0xcc, 0x8e, 0xf6, 0xc3, 0x9d, 0xf7, 0x1e, 0x9b, 0x6e, 0xcc, 0x57, 0x01, 0xd5, 0xfa, 0x47, 0x46,
	0xb8, 0x1f, 0xb1, 0x57, 0xbe, 0x17, 0xef, 0x3b, 0x3d, 0x32, 0x42, 0x3d, 0x88, 0x58, 0x76, 0xdf,
	0x69, 0x12, 0xb2, 0x07, 0x93, 0x0c, 0x53, 0xc5, 0x2c, 0x53, 0x78, 0x03, 0x2d, 0xd1, 0xc8, 0xb2,
	0x80, 0xd2, 0x80, 0xe4, 0x60, 0xd4, 0x67, 0x66, 0x8e, 0xe5, 0x2f, 0xec, 0xcc, 0x2f, 0x01, 0xad,
	0x9d, 0x1b, 0xe7, 0x16, 0x62, 0x6c, 0x67, 0x66, 0xa6, 0xc4, 0x4a, 0xa5, 0x50, 0x2e, 0x41, 0x95,
	0x61, 0x6b, 0xc6, 0x4b, 0x9f, 0x58, 0x78, 0x17, 0xd5, 0x67, 0x55, 0xf8, 0xb2, 0x8a, 0xa5, 0x1b,
	0x97, 0xa9, 0xa5, 0x65, 0xb6, 0xf9, 0xc5, 0xc9, 0x2b, 0x59, 0xce, 0x2b, 0xd9, 0xf9, 0x50, 0x42,
	0xcb, 0xb9, 0x73, 0xd3, 0x07, 0x32, 0xf6, 0x2c, 0xc0, 0x41, 0xf2, 0x1e, 0x9d, 0x9d, 0x21, 0xfc,
	0xf0, 0x0a, 0x5a, 0xcf, 0x1d, 0xba, 0x46, 0xeb, 0x86, 0xd1, 0x09, 0xcf, 0x4a, 0x01, 0x7f, 0x14,
	0x32, 0x4b, 0x95, 0x3f, 0x38, 0x8f, 0xaf, 0xab, 0x75, 0xd1, 0xf1, 0x6a, 0x6c, 0xfe, 0x61, 0xd6,
	0x0c, 0x09, 0x41, 0x4b, 0x73, 0xeb, 0x80, 0xaf, 0x9d, 0x26, 0xf7, 0x16, 0x34, 0xd4, 0x9b, 0x86,
	0x4f, 0x7b, 0x6e, 0xbd, 0xfd, 0x7e, 0x22, 0x09, 0xc7, 0x27, 0x92, 0xf0, 0xf3, 0x44, 0x12, 0x3e,
	0x9d, 0x4a, 0x85, 0xe3, 0x53, 0xa9, 0xf0, 0xe3, 0x54, 0x2a, 0xbc, 0xd9, 0x75, 0x3d, 0x76, 0x10,
	0x99, 0xaa, 0x15, 0x8c, 0xda, 0xa6, 0x6f, 0xb6, 0xac, 0x03, 0xc3, 0xf3, 0xdb, 0x2e, 0x01, 0xf0,
	0x1d, 0x0f, 0x86, 0x76, 0x8b, 0xb2, 0x80, 0x18, 0x2e, 0xb4, 0x42, 0x12, 0x8c, 0x3d, 0x1b, 0x48,
	0xfb, 0xc2, 0xaf, 0x9b, 0xb9, 0x10, 0x7f, 0x99, 0x1e, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x07,
	0xbe, 0xfd, 0xdd, 0xfd, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GfSpQueryTaskServiceClient is the client API for GfSpQueryTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GfSpQueryTaskServiceClient interface {
	GfSpQueryTasks(ctx context.Context, in *GfSpQueryTasksRequest, opts ...grpc.CallOption) (*GfSpQueryTasksResponse, error)
	GfSpQueryBucketMigrate(ctx context.Context, in *GfSpQueryBucketMigrateRequest, opts ...grpc.CallOption) (*GfSpQueryBucketMigrateResponse, error)
	GfSpQuerySpExit(ctx context.Context, in *GfSpQuerySpExitRequest, opts ...grpc.CallOption) (*GfSpQuerySpExitResponse, error)
}

type gfSpQueryTaskServiceClient struct {
	cc grpc1.ClientConn
}

func NewGfSpQueryTaskServiceClient(cc grpc1.ClientConn) GfSpQueryTaskServiceClient {
	return &gfSpQueryTaskServiceClient{cc}
}

func (c *gfSpQueryTaskServiceClient) GfSpQueryTasks(ctx context.Context, in *GfSpQueryTasksRequest, opts ...grpc.CallOption) (*GfSpQueryTasksResponse, error) {
	out := new(GfSpQueryTasksResponse)
	err := c.cc.Invoke(ctx, "/base.types.gfspserver.GfSpQueryTaskService/GfSpQueryTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpQueryTaskServiceClient) GfSpQueryBucketMigrate(ctx context.Context, in *GfSpQueryBucketMigrateRequest, opts ...grpc.CallOption) (*GfSpQueryBucketMigrateResponse, error) {
	out := new(GfSpQueryBucketMigrateResponse)
	err := c.cc.Invoke(ctx, "/base.types.gfspserver.GfSpQueryTaskService/GfSpQueryBucketMigrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gfSpQueryTaskServiceClient) GfSpQuerySpExit(ctx context.Context, in *GfSpQuerySpExitRequest, opts ...grpc.CallOption) (*GfSpQuerySpExitResponse, error) {
	out := new(GfSpQuerySpExitResponse)
	err := c.cc.Invoke(ctx, "/base.types.gfspserver.GfSpQueryTaskService/GfSpQuerySpExit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GfSpQueryTaskServiceServer is the server API for GfSpQueryTaskService service.
type GfSpQueryTaskServiceServer interface {
	GfSpQueryTasks(context.Context, *GfSpQueryTasksRequest) (*GfSpQueryTasksResponse, error)
	GfSpQueryBucketMigrate(context.Context, *GfSpQueryBucketMigrateRequest) (*GfSpQueryBucketMigrateResponse, error)
	GfSpQuerySpExit(context.Context, *GfSpQuerySpExitRequest) (*GfSpQuerySpExitResponse, error)
}

// UnimplementedGfSpQueryTaskServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGfSpQueryTaskServiceServer struct {
}

func (*UnimplementedGfSpQueryTaskServiceServer) GfSpQueryTasks(ctx context.Context, req *GfSpQueryTasksRequest) (*GfSpQueryTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpQueryTasks not implemented")
}
func (*UnimplementedGfSpQueryTaskServiceServer) GfSpQueryBucketMigrate(ctx context.Context, req *GfSpQueryBucketMigrateRequest) (*GfSpQueryBucketMigrateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpQueryBucketMigrate not implemented")
}
func (*UnimplementedGfSpQueryTaskServiceServer) GfSpQuerySpExit(ctx context.Context, req *GfSpQuerySpExitRequest) (*GfSpQuerySpExitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GfSpQuerySpExit not implemented")
}

func RegisterGfSpQueryTaskServiceServer(s grpc1.Server, srv GfSpQueryTaskServiceServer) {
	s.RegisterService(&_GfSpQueryTaskService_serviceDesc, srv)
}

func _GfSpQueryTaskService_GfSpQueryTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpQueryTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpQueryTaskServiceServer).GfSpQueryTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.types.gfspserver.GfSpQueryTaskService/GfSpQueryTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpQueryTaskServiceServer).GfSpQueryTasks(ctx, req.(*GfSpQueryTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpQueryTaskService_GfSpQueryBucketMigrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpQueryBucketMigrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpQueryTaskServiceServer).GfSpQueryBucketMigrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.types.gfspserver.GfSpQueryTaskService/GfSpQueryBucketMigrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpQueryTaskServiceServer).GfSpQueryBucketMigrate(ctx, req.(*GfSpQueryBucketMigrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GfSpQueryTaskService_GfSpQuerySpExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GfSpQuerySpExitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GfSpQueryTaskServiceServer).GfSpQuerySpExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.types.gfspserver.GfSpQueryTaskService/GfSpQuerySpExit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GfSpQueryTaskServiceServer).GfSpQuerySpExit(ctx, req.(*GfSpQuerySpExitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GfSpQueryTaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "base.types.gfspserver.GfSpQueryTaskService",
	HandlerType: (*GfSpQueryTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GfSpQueryTasks",
			Handler:    _GfSpQueryTaskService_GfSpQueryTasks_Handler,
		},
		{
			MethodName: "GfSpQueryBucketMigrate",
			Handler:    _GfSpQueryTaskService_GfSpQueryBucketMigrate_Handler,
		},
		{
			MethodName: "GfSpQuerySpExit",
			Handler:    _GfSpQueryTaskService_GfSpQuerySpExit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base/types/gfspserver/query_task.proto",
}

func (m *GfSpQueryTasksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpQueryTasksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpQueryTasksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaskSubKey) > 0 {
		i -= len(m.TaskSubKey)
		copy(dAtA[i:], m.TaskSubKey)
		i = encodeVarintQueryTask(dAtA, i, uint64(len(m.TaskSubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpQueryTasksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpQueryTasksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpQueryTasksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaskInfo) > 0 {
		for iNdEx := len(m.TaskInfo) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TaskInfo[iNdEx])
			copy(dAtA[i:], m.TaskInfo[iNdEx])
			i = encodeVarintQueryTask(dAtA, i, uint64(len(m.TaskInfo[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpQueryBucketMigrateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpQueryBucketMigrateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpQueryBucketMigrateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GfSpBucketMigrate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpBucketMigrate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpBucketMigrate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GvgTask) > 0 {
		for iNdEx := len(m.GvgTask) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GvgTask[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Finished != 0 {
		i = encodeVarintQueryTask(dAtA, i, uint64(m.Finished))
		i--
		dAtA[i] = 0x18
	}
	if m.BucketId != 0 {
		i = encodeVarintQueryTask(dAtA, i, uint64(m.BucketId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintQueryTask(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpMigrateGVG) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpMigrateGVG) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpMigrateGVG) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintQueryTask(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.LastMigratedObjectId != 0 {
		i = encodeVarintQueryTask(dAtA, i, uint64(m.LastMigratedObjectId))
		i--
		dAtA[i] = 0x18
	}
	if m.SrcGvgId != 0 {
		i = encodeVarintQueryTask(dAtA, i, uint64(m.SrcGvgId))
		i--
		dAtA[i] = 0x10
	}
	if m.DestGvgId != 0 {
		i = encodeVarintQueryTask(dAtA, i, uint64(m.DestGvgId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GfSpQueryBucketMigrateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpQueryBucketMigrateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpQueryBucketMigrateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SelfSpId != 0 {
		i = encodeVarintQueryTask(dAtA, i, uint64(m.SelfSpId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BucketMigrate) > 0 {
		for iNdEx := len(m.BucketMigrate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BucketMigrate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpQuerySpExitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpQuerySpExitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpQuerySpExitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SwapOutUnit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapOutUnit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapOutUnit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GvgTask) > 0 {
		for iNdEx := len(m.GvgTask) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GvgTask[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.SuccessorSpId != 0 {
		i = encodeVarintQueryTask(dAtA, i, uint64(m.SuccessorSpId))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintQueryTask(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SwapOutKey) > 0 {
		i -= len(m.SwapOutKey)
		copy(dAtA[i:], m.SwapOutKey)
		i = encodeVarintQueryTask(dAtA, i, uint64(len(m.SwapOutKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GfSpQuerySpExitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GfSpQuerySpExitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GfSpQuerySpExitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SelfSpId != 0 {
		i = encodeVarintQueryTask(dAtA, i, uint64(m.SelfSpId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SwapOutDest) > 0 {
		for iNdEx := len(m.SwapOutDest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SwapOutDest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SwapOutSrc) > 0 {
		for iNdEx := len(m.SwapOutSrc) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SwapOutSrc[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GfSpQueryTasksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskSubKey)
	if l > 0 {
		n += 1 + l + sovQueryTask(uint64(l))
	}
	return n
}

func (m *GfSpQueryTasksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovQueryTask(uint64(l))
	}
	if len(m.TaskInfo) > 0 {
		for _, s := range m.TaskInfo {
			l = len(s)
			n += 1 + l + sovQueryTask(uint64(l))
		}
	}
	return n
}

func (m *GfSpQueryBucketMigrateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GfSpBucketMigrate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovQueryTask(uint64(l))
	}
	if m.BucketId != 0 {
		n += 1 + sovQueryTask(uint64(m.BucketId))
	}
	if m.Finished != 0 {
		n += 1 + sovQueryTask(uint64(m.Finished))
	}
	if len(m.GvgTask) > 0 {
		for _, e := range m.GvgTask {
			l = e.Size()
			n += 1 + l + sovQueryTask(uint64(l))
		}
	}
	return n
}

func (m *GfSpMigrateGVG) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestGvgId != 0 {
		n += 1 + sovQueryTask(uint64(m.DestGvgId))
	}
	if m.SrcGvgId != 0 {
		n += 1 + sovQueryTask(uint64(m.SrcGvgId))
	}
	if m.LastMigratedObjectId != 0 {
		n += 1 + sovQueryTask(uint64(m.LastMigratedObjectId))
	}
	if m.Status != 0 {
		n += 1 + sovQueryTask(uint64(m.Status))
	}
	return n
}

func (m *GfSpQueryBucketMigrateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovQueryTask(uint64(l))
	}
	if len(m.BucketMigrate) > 0 {
		for _, e := range m.BucketMigrate {
			l = e.Size()
			n += 1 + l + sovQueryTask(uint64(l))
		}
	}
	if m.SelfSpId != 0 {
		n += 1 + sovQueryTask(uint64(m.SelfSpId))
	}
	return n
}

func (m *GfSpQuerySpExitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SwapOutUnit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SwapOutKey)
	if l > 0 {
		n += 1 + l + sovQueryTask(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovQueryTask(uint64(m.Status))
	}
	if m.SuccessorSpId != 0 {
		n += 1 + sovQueryTask(uint64(m.SuccessorSpId))
	}
	if len(m.GvgTask) > 0 {
		for _, e := range m.GvgTask {
			l = e.Size()
			n += 1 + l + sovQueryTask(uint64(l))
		}
	}
	return n
}

func (m *GfSpQuerySpExitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovQueryTask(uint64(l))
	}
	if len(m.SwapOutSrc) > 0 {
		for _, e := range m.SwapOutSrc {
			l = e.Size()
			n += 1 + l + sovQueryTask(uint64(l))
		}
	}
	if len(m.SwapOutDest) > 0 {
		for _, e := range m.SwapOutDest {
			l = e.Size()
			n += 1 + l + sovQueryTask(uint64(l))
		}
	}
	if m.SelfSpId != 0 {
		n += 1 + sovQueryTask(uint64(m.SelfSpId))
	}
	return n
}

func sovQueryTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryTask(x uint64) (n int) {
	return sovQueryTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GfSpQueryTasksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpQueryTasksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpQueryTasksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskSubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskSubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpQueryTasksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpQueryTasksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpQueryTasksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &gfsperrors.GfSpError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskInfo = append(m.TaskInfo, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpQueryBucketMigrateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpQueryBucketMigrateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpQueryBucketMigrateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpBucketMigrate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpBucketMigrate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpBucketMigrate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketId", wireType)
			}
			m.BucketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BucketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finished", wireType)
			}
			m.Finished = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Finished |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GvgTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GvgTask = append(m.GvgTask, &GfSpMigrateGVG{})
			if err := m.GvgTask[len(m.GvgTask)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpMigrateGVG) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpMigrateGVG: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpMigrateGVG: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestGvgId", wireType)
			}
			m.DestGvgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestGvgId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcGvgId", wireType)
			}
			m.SrcGvgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcGvgId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMigratedObjectId", wireType)
			}
			m.LastMigratedObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastMigratedObjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpQueryBucketMigrateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpQueryBucketMigrateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpQueryBucketMigrateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &gfsperrors.GfSpError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketMigrate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketMigrate = append(m.BucketMigrate, &GfSpBucketMigrate{})
			if err := m.BucketMigrate[len(m.BucketMigrate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfSpId", wireType)
			}
			m.SelfSpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfSpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpQuerySpExitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpQuerySpExitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpQuerySpExitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapOutUnit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapOutUnit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapOutUnit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapOutKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapOutKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessorSpId", wireType)
			}
			m.SuccessorSpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuccessorSpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GvgTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GvgTask = append(m.GvgTask, &GfSpMigrateGVG{})
			if err := m.GvgTask[len(m.GvgTask)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GfSpQuerySpExitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GfSpQuerySpExitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GfSpQuerySpExitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &gfsperrors.GfSpError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapOutSrc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapOutSrc = append(m.SwapOutSrc, &SwapOutUnit{})
			if err := m.SwapOutSrc[len(m.SwapOutSrc)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapOutDest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapOutDest = append(m.SwapOutDest, &SwapOutUnit{})
			if err := m.SwapOutDest[len(m.SwapOutDest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfSpId", wireType)
			}
			m.SelfSpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfSpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryTask = fmt.Errorf("proto: unexpected end of group")
)
