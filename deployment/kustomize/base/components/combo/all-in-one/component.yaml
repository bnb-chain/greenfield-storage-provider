apiVersion: apps/v1
kind: Deployment
metadata:
  name: sp-all-in-one
spec:
  replicas: 1 # because of singleton components, replicas has always to be 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: sp-all-in-one
  strategy:
    type: Recreate # if PV and pod are always in the same avaliability zone, change to RollingUpdate
  template:
    metadata:
      labels:
        app: sp-all-in-one
    spec:
      serviceAccountName: nodereal-default
      containers:
      - name: sp-all-in-one
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.3
        args: ["--log.std", "-c", "/config/config.toml", "-server", "approver,authenticator,downloader,taskexecutor,gateway,manager,p2p,receiver,signer,uploader"]
        env:
          - name: AWS_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: AWS_ACCESS_KEY
                name: default
          - name: AWS_SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: AWS_SECRET_KEY
                name: default
          - name: AWS_SESSION_TOKEN
            value: ""
          - name: BLOCK_SYNCER_DSN # only used by block-syncer
            valueFrom:
              secretKeyRef:
                key: BLOCK_SYNCER_DSN
                name: default
          - name: BLOCK_SYNCER_DSN_SWITCHED
            valueFrom:
              secretKeyRef:
                key: BLOCK_SYNCER_DSN_SWITCHED
                name: default
          - name: SP_DB_USER
            valueFrom:
              secretKeyRef:
                key: SP_DB_USER
                name: default
          - name: SP_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: SP_DB_PASSWORD
                name: default
          - name: SP_DB_ADDRESS
            valueFrom:
              secretKeyRef:
                key: SP_DB_ADDRESS
                name: default
          - name: BUCKET_URL
            valueFrom:
              secretKeyRef:
                key: BUCKET_URL
                name: default
          - name: SIGNER_OPERATOR_PRIV_KEY
            valueFrom:
              secretKeyRef:
                key: SIGNER_OPERATOR_PRIV_KEY
                name: default
          - name: SIGNER_FUNDING_PRIV_KEY
            valueFrom:
              secretKeyRef:
                key: SIGNER_FUNDING_PRIV_KEY
                name: default
          - name: SIGNER_APPROVAL_PRIV_KEY
            valueFrom:
              secretKeyRef:
                key: SIGNER_APPROVAL_PRIV_KEY
                name: default
          - name: SIGNER_SEAL_PRIV_KEY
            valueFrom:
              secretKeyRef:
                key: SIGNER_SEAL_PRIV_KEY
                name: default
          - name: SIGNER_GC_PRIV_KEY
            valueFrom:
              secretKeyRef:
                key: SIGNER_GC_PRIV_KEY
                name: default
          - name: BS_DB_USER
            valueFrom:
              secretKeyRef:
                key: BS_DB_USER
                name: default
          - name: BS_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: BS_DB_PASSWORD
                name: default
          - name: BS_DB_ADDRESS
            valueFrom:
              secretKeyRef:
                key: SP_DB_ADDRESS
                name: default
          - name: BS_DB_DATABASE
            valueFrom:
              secretKeyRef:
                key: BS_DB_DATABASE
                name: default
          - name: BS_DB_SWITCHED_USER
            valueFrom:
              secretKeyRef:
                key: BS_DB_SWITCHED_USER
                name: default
          - name: BS_DB_SWITCHED_PASSWORD
            valueFrom:
              secretKeyRef:
                key: BS_DB_SWITCHED_PASSWORD
                name: default
          - name: BS_DB_SWITCHED_ADDRESS
            valueFrom:
              secretKeyRef:
                key: BS_DB_SWITCHED_ADDRESS
                name: default
          - name: BS_DB_SWITCHED_DATABASE
            valueFrom:
              secretKeyRef:
                key: BS_DB_SWITCHED_DATABASE
                name: default
        resources:
          limits:
            cpu: "4"
            memory: 8Gi
          requests:
            cpu: "2"
            memory: 4Gi
        ports:
          - containerPort: 9333
            name: grpc
          - containerPort: 9033
            name: gateway
          - containerPort: 9933
            name: p2p-external
          - containerPort: 24367
            name: metrics
          - containerPort: 24368
            name: pprof
        volumeMounts:
        - mountPath: /config
          name: config
        - name: data
          mountPath: /app/data
      imagePullSecrets:
        - name: image-pull
      volumes:
        - name: config
          configMap:
            name: config
        - name: data
          persistentVolumeClaim:
            claimName: p2p-data
      securityContext:
        fsGroup: 1000 # uid=1000(sp) gid=1000(sp) groups=5(tty),1000(sp)
---
apiVersion: v1
kind: Service
metadata:
  name: gateway
spec:
  ports:
  - port: 9033
    targetPort: 9033
    name: gateway
  selector:
    app: sp-all-in-one
---
apiVersion: v1
kind: Service
metadata:
  name: grpc
spec:
  ports:
  - port: 9333
    targetPort: 9333
    name: grpc
  selector:
    app: sp-all-in-one
---
apiVersion: v1
kind: Service
metadata:
  name: metrics
spec:
  ports:
  - port: 24367
    targetPort: 24367
    name: metrics
  selector:
    app: sp-all-in-one
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: p2p-data
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: ebs-sc # Patch this accordingly or remove it to use default SC in the cluster.
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-subnets: null # this service needs to public for other p2p node to reach, so better to put the nlb under public subnet
    service.beta.kubernetes.io/aws-load-balancer-type: external
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
  name: p2p-external
spec:
  type: LoadBalancer # p2p requries the loadblancer can reach to pod ip directly, so use nlb instead of alb.
  ports:
  - port: 9933
    targetPort: 9933
    name: p2p-external
  selector:
    app: sp-all-in-one
