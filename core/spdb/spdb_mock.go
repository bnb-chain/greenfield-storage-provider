// Code generated by MockGen. DO NOT EDIT.
// Source: core/spdb/spdb.go

// Package spdb is a generated GoMock package.
package spdb

import (
	reflect "reflect"
	time "time"

	task "github.com/bnb-chain/greenfield-storage-provider/core/task"
	types "github.com/bnb-chain/greenfield-storage-provider/store/types"
	types0 "github.com/bnb-chain/greenfield/x/sp/types"
	types1 "github.com/bnb-chain/greenfield/x/storage/types"
	gomock "github.com/golang/mock/gomock"
)

// MockJobDB is a mock of JobDB interface.
type MockJobDB struct {
	ctrl     *gomock.Controller
	recorder *MockJobDBMockRecorder
}

// MockJobDBMockRecorder is the mock recorder for MockJobDB.
type MockJobDBMockRecorder struct {
	mock *MockJobDB
}

// NewMockJobDB creates a new mock instance.
func NewMockJobDB(ctrl *gomock.Controller) *MockJobDB {
	mock := &MockJobDB{ctrl: ctrl}
	mock.recorder = &MockJobDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobDB) EXPECT() *MockJobDBMockRecorder {
	return m.recorder
}

// CreateUploadJob mocks base method.
func (m *MockJobDB) CreateUploadJob(objectInfo *types1.ObjectInfo) (*types.JobContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUploadJob", objectInfo)
	ret0, _ := ret[0].(*types.JobContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUploadJob indicates an expected call of CreateUploadJob.
func (mr *MockJobDBMockRecorder) CreateUploadJob(objectInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUploadJob", reflect.TypeOf((*MockJobDB)(nil).CreateUploadJob), objectInfo)
}

// GetJobByID mocks base method.
func (m *MockJobDB) GetJobByID(jobID uint64) (*types.JobContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobByID", jobID)
	ret0, _ := ret[0].(*types.JobContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobByID indicates an expected call of GetJobByID.
func (mr *MockJobDBMockRecorder) GetJobByID(jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobByID", reflect.TypeOf((*MockJobDB)(nil).GetJobByID), jobID)
}

// GetJobByObjectID mocks base method.
func (m *MockJobDB) GetJobByObjectID(objectID uint64) (*types.JobContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobByObjectID", objectID)
	ret0, _ := ret[0].(*types.JobContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobByObjectID indicates an expected call of GetJobByObjectID.
func (mr *MockJobDBMockRecorder) GetJobByObjectID(objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobByObjectID", reflect.TypeOf((*MockJobDB)(nil).GetJobByObjectID), objectID)
}

// UpdateJobState mocks base method.
func (m *MockJobDB) UpdateJobState(objectID uint64, state types.JobState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobState", objectID, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobState indicates an expected call of UpdateJobState.
func (mr *MockJobDBMockRecorder) UpdateJobState(objectID, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobState", reflect.TypeOf((*MockJobDB)(nil).UpdateJobState), objectID, state)
}

// MockObjectDB is a mock of ObjectDB interface.
type MockObjectDB struct {
	ctrl     *gomock.Controller
	recorder *MockObjectDBMockRecorder
}

// MockObjectDBMockRecorder is the mock recorder for MockObjectDB.
type MockObjectDBMockRecorder struct {
	mock *MockObjectDB
}

// NewMockObjectDB creates a new mock instance.
func NewMockObjectDB(ctrl *gomock.Controller) *MockObjectDB {
	mock := &MockObjectDB{ctrl: ctrl}
	mock.recorder = &MockObjectDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectDB) EXPECT() *MockObjectDBMockRecorder {
	return m.recorder
}

// GetObjectInfo mocks base method.
func (m *MockObjectDB) GetObjectInfo(objectID uint64) (*types1.ObjectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectInfo", objectID)
	ret0, _ := ret[0].(*types1.ObjectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectInfo indicates an expected call of GetObjectInfo.
func (mr *MockObjectDBMockRecorder) GetObjectInfo(objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectInfo", reflect.TypeOf((*MockObjectDB)(nil).GetObjectInfo), objectID)
}

// SetObjectInfo mocks base method.
func (m *MockObjectDB) SetObjectInfo(objectID uint64, objectInfo *types1.ObjectInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetObjectInfo", objectID, objectInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetObjectInfo indicates an expected call of SetObjectInfo.
func (mr *MockObjectDBMockRecorder) SetObjectInfo(objectID, objectInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetObjectInfo", reflect.TypeOf((*MockObjectDB)(nil).SetObjectInfo), objectID, objectInfo)
}

// MockObjectIntegrityDB is a mock of ObjectIntegrityDB interface.
type MockObjectIntegrityDB struct {
	ctrl     *gomock.Controller
	recorder *MockObjectIntegrityDBMockRecorder
}

// MockObjectIntegrityDBMockRecorder is the mock recorder for MockObjectIntegrityDB.
type MockObjectIntegrityDBMockRecorder struct {
	mock *MockObjectIntegrityDB
}

// NewMockObjectIntegrityDB creates a new mock instance.
func NewMockObjectIntegrityDB(ctrl *gomock.Controller) *MockObjectIntegrityDB {
	mock := &MockObjectIntegrityDB{ctrl: ctrl}
	mock.recorder = &MockObjectIntegrityDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectIntegrityDB) EXPECT() *MockObjectIntegrityDBMockRecorder {
	return m.recorder
}

// DeleteAllReplicatePieceChecksum mocks base method.
func (m *MockObjectIntegrityDB) DeleteAllReplicatePieceChecksum(objectID uint64, replicateIdx, pieceCount uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllReplicatePieceChecksum", objectID, replicateIdx, pieceCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllReplicatePieceChecksum indicates an expected call of DeleteAllReplicatePieceChecksum.
func (mr *MockObjectIntegrityDBMockRecorder) DeleteAllReplicatePieceChecksum(objectID, replicateIdx, pieceCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllReplicatePieceChecksum", reflect.TypeOf((*MockObjectIntegrityDB)(nil).DeleteAllReplicatePieceChecksum), objectID, replicateIdx, pieceCount)
}

// DeleteObjectIntegrity mocks base method.
func (m *MockObjectIntegrityDB) DeleteObjectIntegrity(objectID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectIntegrity", objectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObjectIntegrity indicates an expected call of DeleteObjectIntegrity.
func (mr *MockObjectIntegrityDBMockRecorder) DeleteObjectIntegrity(objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectIntegrity", reflect.TypeOf((*MockObjectIntegrityDB)(nil).DeleteObjectIntegrity), objectID)
}

// DeleteReplicatePieceChecksum mocks base method.
func (m *MockObjectIntegrityDB) DeleteReplicatePieceChecksum(objectID uint64, replicateIdx, pieceIdx uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplicatePieceChecksum", objectID, replicateIdx, pieceIdx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReplicatePieceChecksum indicates an expected call of DeleteReplicatePieceChecksum.
func (mr *MockObjectIntegrityDBMockRecorder) DeleteReplicatePieceChecksum(objectID, replicateIdx, pieceIdx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicatePieceChecksum", reflect.TypeOf((*MockObjectIntegrityDB)(nil).DeleteReplicatePieceChecksum), objectID, replicateIdx, pieceIdx)
}

// GetAllReplicatePieceChecksum mocks base method.
func (m *MockObjectIntegrityDB) GetAllReplicatePieceChecksum(objectID uint64, replicateIdx, pieceCount uint32) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllReplicatePieceChecksum", objectID, replicateIdx, pieceCount)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllReplicatePieceChecksum indicates an expected call of GetAllReplicatePieceChecksum.
func (mr *MockObjectIntegrityDBMockRecorder) GetAllReplicatePieceChecksum(objectID, replicateIdx, pieceCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllReplicatePieceChecksum", reflect.TypeOf((*MockObjectIntegrityDB)(nil).GetAllReplicatePieceChecksum), objectID, replicateIdx, pieceCount)
}

// GetObjectIntegrity mocks base method.
func (m *MockObjectIntegrityDB) GetObjectIntegrity(objectID uint64) (*IntegrityMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectIntegrity", objectID)
	ret0, _ := ret[0].(*IntegrityMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectIntegrity indicates an expected call of GetObjectIntegrity.
func (mr *MockObjectIntegrityDBMockRecorder) GetObjectIntegrity(objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectIntegrity", reflect.TypeOf((*MockObjectIntegrityDB)(nil).GetObjectIntegrity), objectID)
}

// GetReplicatePieceChecksum mocks base method.
func (m *MockObjectIntegrityDB) GetReplicatePieceChecksum(objectID uint64, replicateIdx, pieceIdx uint32) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicatePieceChecksum", objectID, replicateIdx, pieceIdx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicatePieceChecksum indicates an expected call of GetReplicatePieceChecksum.
func (mr *MockObjectIntegrityDBMockRecorder) GetReplicatePieceChecksum(objectID, replicateIdx, pieceIdx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicatePieceChecksum", reflect.TypeOf((*MockObjectIntegrityDB)(nil).GetReplicatePieceChecksum), objectID, replicateIdx, pieceIdx)
}

// SetAllReplicatePieceChecksum mocks base method.
func (m *MockObjectIntegrityDB) SetAllReplicatePieceChecksum(objectID uint64, replicateIdx, pieceCount uint32, checksum [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAllReplicatePieceChecksum", objectID, replicateIdx, pieceCount, checksum)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAllReplicatePieceChecksum indicates an expected call of SetAllReplicatePieceChecksum.
func (mr *MockObjectIntegrityDBMockRecorder) SetAllReplicatePieceChecksum(objectID, replicateIdx, pieceCount, checksum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAllReplicatePieceChecksum", reflect.TypeOf((*MockObjectIntegrityDB)(nil).SetAllReplicatePieceChecksum), objectID, replicateIdx, pieceCount, checksum)
}

// SetObjectIntegrity mocks base method.
func (m *MockObjectIntegrityDB) SetObjectIntegrity(integrity *IntegrityMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetObjectIntegrity", integrity)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetObjectIntegrity indicates an expected call of SetObjectIntegrity.
func (mr *MockObjectIntegrityDBMockRecorder) SetObjectIntegrity(integrity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetObjectIntegrity", reflect.TypeOf((*MockObjectIntegrityDB)(nil).SetObjectIntegrity), integrity)
}

// SetReplicatePieceChecksum mocks base method.
func (m *MockObjectIntegrityDB) SetReplicatePieceChecksum(objectID uint64, replicateIdx, pieceIdx uint32, checksum []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReplicatePieceChecksum", objectID, replicateIdx, pieceIdx, checksum)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReplicatePieceChecksum indicates an expected call of SetReplicatePieceChecksum.
func (mr *MockObjectIntegrityDBMockRecorder) SetReplicatePieceChecksum(objectID, replicateIdx, pieceIdx, checksum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReplicatePieceChecksum", reflect.TypeOf((*MockObjectIntegrityDB)(nil).SetReplicatePieceChecksum), objectID, replicateIdx, pieceIdx, checksum)
}

// MockTrafficDB is a mock of TrafficDB interface.
type MockTrafficDB struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficDBMockRecorder
}

// MockTrafficDBMockRecorder is the mock recorder for MockTrafficDB.
type MockTrafficDBMockRecorder struct {
	mock *MockTrafficDB
}

// NewMockTrafficDB creates a new mock instance.
func NewMockTrafficDB(ctrl *gomock.Controller) *MockTrafficDB {
	mock := &MockTrafficDB{ctrl: ctrl}
	mock.recorder = &MockTrafficDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficDB) EXPECT() *MockTrafficDBMockRecorder {
	return m.recorder
}

// CheckQuotaAndAddReadRecord mocks base method.
func (m *MockTrafficDB) CheckQuotaAndAddReadRecord(record *ReadRecord, quota *BucketQuota) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckQuotaAndAddReadRecord", record, quota)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckQuotaAndAddReadRecord indicates an expected call of CheckQuotaAndAddReadRecord.
func (mr *MockTrafficDBMockRecorder) CheckQuotaAndAddReadRecord(record, quota interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckQuotaAndAddReadRecord", reflect.TypeOf((*MockTrafficDB)(nil).CheckQuotaAndAddReadRecord), record, quota)
}

// GetBucketReadRecord mocks base method.
func (m *MockTrafficDB) GetBucketReadRecord(bucketID uint64, timeRange *TrafficTimeRange) ([]*ReadRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketReadRecord", bucketID, timeRange)
	ret0, _ := ret[0].([]*ReadRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketReadRecord indicates an expected call of GetBucketReadRecord.
func (mr *MockTrafficDBMockRecorder) GetBucketReadRecord(bucketID, timeRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketReadRecord", reflect.TypeOf((*MockTrafficDB)(nil).GetBucketReadRecord), bucketID, timeRange)
}

// GetBucketTraffic mocks base method.
func (m *MockTrafficDB) GetBucketTraffic(bucketID uint64, yearMonth string) (*BucketTraffic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketTraffic", bucketID, yearMonth)
	ret0, _ := ret[0].(*BucketTraffic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketTraffic indicates an expected call of GetBucketTraffic.
func (mr *MockTrafficDBMockRecorder) GetBucketTraffic(bucketID, yearMonth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketTraffic", reflect.TypeOf((*MockTrafficDB)(nil).GetBucketTraffic), bucketID, yearMonth)
}

// GetObjectReadRecord mocks base method.
func (m *MockTrafficDB) GetObjectReadRecord(objectID uint64, timeRange *TrafficTimeRange) ([]*ReadRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectReadRecord", objectID, timeRange)
	ret0, _ := ret[0].([]*ReadRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectReadRecord indicates an expected call of GetObjectReadRecord.
func (mr *MockTrafficDBMockRecorder) GetObjectReadRecord(objectID, timeRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectReadRecord", reflect.TypeOf((*MockTrafficDB)(nil).GetObjectReadRecord), objectID, timeRange)
}

// GetReadRecord mocks base method.
func (m *MockTrafficDB) GetReadRecord(timeRange *TrafficTimeRange) ([]*ReadRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadRecord", timeRange)
	ret0, _ := ret[0].([]*ReadRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadRecord indicates an expected call of GetReadRecord.
func (mr *MockTrafficDBMockRecorder) GetReadRecord(timeRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadRecord", reflect.TypeOf((*MockTrafficDB)(nil).GetReadRecord), timeRange)
}

// GetUserReadRecord mocks base method.
func (m *MockTrafficDB) GetUserReadRecord(userAddress string, timeRange *TrafficTimeRange) ([]*ReadRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserReadRecord", userAddress, timeRange)
	ret0, _ := ret[0].([]*ReadRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserReadRecord indicates an expected call of GetUserReadRecord.
func (mr *MockTrafficDBMockRecorder) GetUserReadRecord(userAddress, timeRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReadRecord", reflect.TypeOf((*MockTrafficDB)(nil).GetUserReadRecord), userAddress, timeRange)
}

// MockSPInfoDB is a mock of SPInfoDB interface.
type MockSPInfoDB struct {
	ctrl     *gomock.Controller
	recorder *MockSPInfoDBMockRecorder
}

// MockSPInfoDBMockRecorder is the mock recorder for MockSPInfoDB.
type MockSPInfoDBMockRecorder struct {
	mock *MockSPInfoDB
}

// NewMockSPInfoDB creates a new mock instance.
func NewMockSPInfoDB(ctrl *gomock.Controller) *MockSPInfoDB {
	mock := &MockSPInfoDB{ctrl: ctrl}
	mock.recorder = &MockSPInfoDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSPInfoDB) EXPECT() *MockSPInfoDBMockRecorder {
	return m.recorder
}

// FetchAllSp mocks base method.
func (m *MockSPInfoDB) FetchAllSp(status ...types0.Status) ([]*types0.StorageProvider, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range status {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchAllSp", varargs...)
	ret0, _ := ret[0].([]*types0.StorageProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllSp indicates an expected call of FetchAllSp.
func (mr *MockSPInfoDBMockRecorder) FetchAllSp(status ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllSp", reflect.TypeOf((*MockSPInfoDB)(nil).FetchAllSp), status...)
}

// FetchAllSpWithoutOwnSp mocks base method.
func (m *MockSPInfoDB) FetchAllSpWithoutOwnSp(status ...types0.Status) ([]*types0.StorageProvider, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range status {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchAllSpWithoutOwnSp", varargs...)
	ret0, _ := ret[0].([]*types0.StorageProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllSpWithoutOwnSp indicates an expected call of FetchAllSpWithoutOwnSp.
func (mr *MockSPInfoDBMockRecorder) FetchAllSpWithoutOwnSp(status ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllSpWithoutOwnSp", reflect.TypeOf((*MockSPInfoDB)(nil).FetchAllSpWithoutOwnSp), status...)
}

// GetOwnSpInfo mocks base method.
func (m *MockSPInfoDB) GetOwnSpInfo() (*types0.StorageProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnSpInfo")
	ret0, _ := ret[0].(*types0.StorageProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnSpInfo indicates an expected call of GetOwnSpInfo.
func (mr *MockSPInfoDBMockRecorder) GetOwnSpInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnSpInfo", reflect.TypeOf((*MockSPInfoDB)(nil).GetOwnSpInfo))
}

// GetSpByAddress mocks base method.
func (m *MockSPInfoDB) GetSpByAddress(address string, addressType SpAddressType) (*types0.StorageProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpByAddress", address, addressType)
	ret0, _ := ret[0].(*types0.StorageProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpByAddress indicates an expected call of GetSpByAddress.
func (mr *MockSPInfoDBMockRecorder) GetSpByAddress(address, addressType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpByAddress", reflect.TypeOf((*MockSPInfoDB)(nil).GetSpByAddress), address, addressType)
}

// GetSpByEndpoint mocks base method.
func (m *MockSPInfoDB) GetSpByEndpoint(endpoint string) (*types0.StorageProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpByEndpoint", endpoint)
	ret0, _ := ret[0].(*types0.StorageProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpByEndpoint indicates an expected call of GetSpByEndpoint.
func (mr *MockSPInfoDBMockRecorder) GetSpByEndpoint(endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpByEndpoint", reflect.TypeOf((*MockSPInfoDB)(nil).GetSpByEndpoint), endpoint)
}

// SetOwnSpInfo mocks base method.
func (m *MockSPInfoDB) SetOwnSpInfo(sp *types0.StorageProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOwnSpInfo", sp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOwnSpInfo indicates an expected call of SetOwnSpInfo.
func (mr *MockSPInfoDBMockRecorder) SetOwnSpInfo(sp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOwnSpInfo", reflect.TypeOf((*MockSPInfoDB)(nil).SetOwnSpInfo), sp)
}

// UpdateAllSp mocks base method.
func (m *MockSPInfoDB) UpdateAllSp(spList []*types0.StorageProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSp", spList)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAllSp indicates an expected call of UpdateAllSp.
func (mr *MockSPInfoDBMockRecorder) UpdateAllSp(spList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSp", reflect.TypeOf((*MockSPInfoDB)(nil).UpdateAllSp), spList)
}

// MockGCObjectInfoDB is a mock of GCObjectInfoDB interface.
type MockGCObjectInfoDB struct {
	ctrl     *gomock.Controller
	recorder *MockGCObjectInfoDBMockRecorder
}

// MockGCObjectInfoDBMockRecorder is the mock recorder for MockGCObjectInfoDB.
type MockGCObjectInfoDBMockRecorder struct {
	mock *MockGCObjectInfoDB
}

// NewMockGCObjectInfoDB creates a new mock instance.
func NewMockGCObjectInfoDB(ctrl *gomock.Controller) *MockGCObjectInfoDB {
	mock := &MockGCObjectInfoDB{ctrl: ctrl}
	mock.recorder = &MockGCObjectInfoDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGCObjectInfoDB) EXPECT() *MockGCObjectInfoDBMockRecorder {
	return m.recorder
}

// DeleteGCObjectProgress mocks base method.
func (m *MockGCObjectInfoDB) DeleteGCObjectProgress(taskKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGCObjectProgress", taskKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGCObjectProgress indicates an expected call of DeleteGCObjectProgress.
func (mr *MockGCObjectInfoDBMockRecorder) DeleteGCObjectProgress(taskKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGCObjectProgress", reflect.TypeOf((*MockGCObjectInfoDB)(nil).DeleteGCObjectProgress), taskKey)
}

// GetAllGCObjectTask mocks base method.
func (m *MockGCObjectInfoDB) GetAllGCObjectTask(taskKey string) []task.GCObjectTask {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGCObjectTask", taskKey)
	ret0, _ := ret[0].([]task.GCObjectTask)
	return ret0
}

// GetAllGCObjectTask indicates an expected call of GetAllGCObjectTask.
func (mr *MockGCObjectInfoDBMockRecorder) GetAllGCObjectTask(taskKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGCObjectTask", reflect.TypeOf((*MockGCObjectInfoDB)(nil).GetAllGCObjectTask), taskKey)
}

// SetGCObjectProgress mocks base method.
func (m *MockGCObjectInfoDB) SetGCObjectProgress(taskKey string, deletingBlockID, deletedObjectID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGCObjectProgress", taskKey, deletingBlockID, deletedObjectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGCObjectProgress indicates an expected call of SetGCObjectProgress.
func (mr *MockGCObjectInfoDBMockRecorder) SetGCObjectProgress(taskKey, deletingBlockID, deletedObjectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGCObjectProgress", reflect.TypeOf((*MockGCObjectInfoDB)(nil).SetGCObjectProgress), taskKey, deletingBlockID, deletedObjectID)
}

// MockStorageParamDB is a mock of StorageParamDB interface.
type MockStorageParamDB struct {
	ctrl     *gomock.Controller
	recorder *MockStorageParamDBMockRecorder
}

// MockStorageParamDBMockRecorder is the mock recorder for MockStorageParamDB.
type MockStorageParamDBMockRecorder struct {
	mock *MockStorageParamDB
}

// NewMockStorageParamDB creates a new mock instance.
func NewMockStorageParamDB(ctrl *gomock.Controller) *MockStorageParamDB {
	mock := &MockStorageParamDB{ctrl: ctrl}
	mock.recorder = &MockStorageParamDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageParamDB) EXPECT() *MockStorageParamDBMockRecorder {
	return m.recorder
}

// GetStorageParams mocks base method.
func (m *MockStorageParamDB) GetStorageParams() (*types1.Params, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageParams")
	ret0, _ := ret[0].(*types1.Params)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageParams indicates an expected call of GetStorageParams.
func (mr *MockStorageParamDBMockRecorder) GetStorageParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageParams", reflect.TypeOf((*MockStorageParamDB)(nil).GetStorageParams))
}

// SetStorageParams mocks base method.
func (m *MockStorageParamDB) SetStorageParams(params *types1.Params) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStorageParams", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStorageParams indicates an expected call of SetStorageParams.
func (mr *MockStorageParamDBMockRecorder) SetStorageParams(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStorageParams", reflect.TypeOf((*MockStorageParamDB)(nil).SetStorageParams), params)
}

// MockOffChainAuthKeyDB is a mock of OffChainAuthKeyDB interface.
type MockOffChainAuthKeyDB struct {
	ctrl     *gomock.Controller
	recorder *MockOffChainAuthKeyDBMockRecorder
}

// MockOffChainAuthKeyDBMockRecorder is the mock recorder for MockOffChainAuthKeyDB.
type MockOffChainAuthKeyDBMockRecorder struct {
	mock *MockOffChainAuthKeyDB
}

// NewMockOffChainAuthKeyDB creates a new mock instance.
func NewMockOffChainAuthKeyDB(ctrl *gomock.Controller) *MockOffChainAuthKeyDB {
	mock := &MockOffChainAuthKeyDB{ctrl: ctrl}
	mock.recorder = &MockOffChainAuthKeyDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOffChainAuthKeyDB) EXPECT() *MockOffChainAuthKeyDBMockRecorder {
	return m.recorder
}

// GetAuthKey mocks base method.
func (m *MockOffChainAuthKeyDB) GetAuthKey(userAddress, domain string) (*OffChainAuthKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthKey", userAddress, domain)
	ret0, _ := ret[0].(*OffChainAuthKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthKey indicates an expected call of GetAuthKey.
func (mr *MockOffChainAuthKeyDBMockRecorder) GetAuthKey(userAddress, domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthKey", reflect.TypeOf((*MockOffChainAuthKeyDB)(nil).GetAuthKey), userAddress, domain)
}

// InsertAuthKey mocks base method.
func (m *MockOffChainAuthKeyDB) InsertAuthKey(newRecord *OffChainAuthKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAuthKey", newRecord)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAuthKey indicates an expected call of InsertAuthKey.
func (mr *MockOffChainAuthKeyDBMockRecorder) InsertAuthKey(newRecord interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAuthKey", reflect.TypeOf((*MockOffChainAuthKeyDB)(nil).InsertAuthKey), newRecord)
}

// UpdateAuthKey mocks base method.
func (m *MockOffChainAuthKeyDB) UpdateAuthKey(userAddress, domain string, oldNonce, newNonce int32, newPublicKey string, newExpiryDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthKey", userAddress, domain, oldNonce, newNonce, newPublicKey, newExpiryDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthKey indicates an expected call of UpdateAuthKey.
func (mr *MockOffChainAuthKeyDBMockRecorder) UpdateAuthKey(userAddress, domain, oldNonce, newNonce, newPublicKey, newExpiryDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthKey", reflect.TypeOf((*MockOffChainAuthKeyDB)(nil).UpdateAuthKey), userAddress, domain, oldNonce, newNonce, newPublicKey, newExpiryDate)
}

// MockSPDB is a mock of SPDB interface.
type MockSPDB struct {
	ctrl     *gomock.Controller
	recorder *MockSPDBMockRecorder
}

// MockSPDBMockRecorder is the mock recorder for MockSPDB.
type MockSPDBMockRecorder struct {
	mock *MockSPDB
}

// NewMockSPDB creates a new mock instance.
func NewMockSPDB(ctrl *gomock.Controller) *MockSPDB {
	mock := &MockSPDB{ctrl: ctrl}
	mock.recorder = &MockSPDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSPDB) EXPECT() *MockSPDBMockRecorder {
	return m.recorder
}

// CheckQuotaAndAddReadRecord mocks base method.
func (m *MockSPDB) CheckQuotaAndAddReadRecord(record *ReadRecord, quota *BucketQuota) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckQuotaAndAddReadRecord", record, quota)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckQuotaAndAddReadRecord indicates an expected call of CheckQuotaAndAddReadRecord.
func (mr *MockSPDBMockRecorder) CheckQuotaAndAddReadRecord(record, quota interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckQuotaAndAddReadRecord", reflect.TypeOf((*MockSPDB)(nil).CheckQuotaAndAddReadRecord), record, quota)
}

// CreateUploadJob mocks base method.
func (m *MockSPDB) CreateUploadJob(objectInfo *types1.ObjectInfo) (*types.JobContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUploadJob", objectInfo)
	ret0, _ := ret[0].(*types.JobContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUploadJob indicates an expected call of CreateUploadJob.
func (mr *MockSPDBMockRecorder) CreateUploadJob(objectInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUploadJob", reflect.TypeOf((*MockSPDB)(nil).CreateUploadJob), objectInfo)
}

// DeleteAllReplicatePieceChecksum mocks base method.
func (m *MockSPDB) DeleteAllReplicatePieceChecksum(objectID uint64, replicateIdx, pieceCount uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllReplicatePieceChecksum", objectID, replicateIdx, pieceCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllReplicatePieceChecksum indicates an expected call of DeleteAllReplicatePieceChecksum.
func (mr *MockSPDBMockRecorder) DeleteAllReplicatePieceChecksum(objectID, replicateIdx, pieceCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllReplicatePieceChecksum", reflect.TypeOf((*MockSPDB)(nil).DeleteAllReplicatePieceChecksum), objectID, replicateIdx, pieceCount)
}

// DeleteGCObjectProgress mocks base method.
func (m *MockSPDB) DeleteGCObjectProgress(taskKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGCObjectProgress", taskKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGCObjectProgress indicates an expected call of DeleteGCObjectProgress.
func (mr *MockSPDBMockRecorder) DeleteGCObjectProgress(taskKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGCObjectProgress", reflect.TypeOf((*MockSPDB)(nil).DeleteGCObjectProgress), taskKey)
}

// DeleteObjectIntegrity mocks base method.
func (m *MockSPDB) DeleteObjectIntegrity(objectID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectIntegrity", objectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObjectIntegrity indicates an expected call of DeleteObjectIntegrity.
func (mr *MockSPDBMockRecorder) DeleteObjectIntegrity(objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectIntegrity", reflect.TypeOf((*MockSPDB)(nil).DeleteObjectIntegrity), objectID)
}

// DeleteReplicatePieceChecksum mocks base method.
func (m *MockSPDB) DeleteReplicatePieceChecksum(objectID uint64, replicateIdx, pieceIdx uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplicatePieceChecksum", objectID, replicateIdx, pieceIdx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReplicatePieceChecksum indicates an expected call of DeleteReplicatePieceChecksum.
func (mr *MockSPDBMockRecorder) DeleteReplicatePieceChecksum(objectID, replicateIdx, pieceIdx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicatePieceChecksum", reflect.TypeOf((*MockSPDB)(nil).DeleteReplicatePieceChecksum), objectID, replicateIdx, pieceIdx)
}

// FetchAllSp mocks base method.
func (m *MockSPDB) FetchAllSp(status ...types0.Status) ([]*types0.StorageProvider, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range status {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchAllSp", varargs...)
	ret0, _ := ret[0].([]*types0.StorageProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllSp indicates an expected call of FetchAllSp.
func (mr *MockSPDBMockRecorder) FetchAllSp(status ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllSp", reflect.TypeOf((*MockSPDB)(nil).FetchAllSp), status...)
}

// FetchAllSpWithoutOwnSp mocks base method.
func (m *MockSPDB) FetchAllSpWithoutOwnSp(status ...types0.Status) ([]*types0.StorageProvider, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range status {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchAllSpWithoutOwnSp", varargs...)
	ret0, _ := ret[0].([]*types0.StorageProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllSpWithoutOwnSp indicates an expected call of FetchAllSpWithoutOwnSp.
func (mr *MockSPDBMockRecorder) FetchAllSpWithoutOwnSp(status ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllSpWithoutOwnSp", reflect.TypeOf((*MockSPDB)(nil).FetchAllSpWithoutOwnSp), status...)
}

// GetAllGCObjectTask mocks base method.
func (m *MockSPDB) GetAllGCObjectTask(taskKey string) []task.GCObjectTask {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGCObjectTask", taskKey)
	ret0, _ := ret[0].([]task.GCObjectTask)
	return ret0
}

// GetAllGCObjectTask indicates an expected call of GetAllGCObjectTask.
func (mr *MockSPDBMockRecorder) GetAllGCObjectTask(taskKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGCObjectTask", reflect.TypeOf((*MockSPDB)(nil).GetAllGCObjectTask), taskKey)
}

// GetAllReplicatePieceChecksum mocks base method.
func (m *MockSPDB) GetAllReplicatePieceChecksum(objectID uint64, replicateIdx, pieceCount uint32) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllReplicatePieceChecksum", objectID, replicateIdx, pieceCount)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllReplicatePieceChecksum indicates an expected call of GetAllReplicatePieceChecksum.
func (mr *MockSPDBMockRecorder) GetAllReplicatePieceChecksum(objectID, replicateIdx, pieceCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllReplicatePieceChecksum", reflect.TypeOf((*MockSPDB)(nil).GetAllReplicatePieceChecksum), objectID, replicateIdx, pieceCount)
}

// GetAuthKey mocks base method.
func (m *MockSPDB) GetAuthKey(userAddress, domain string) (*OffChainAuthKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthKey", userAddress, domain)
	ret0, _ := ret[0].(*OffChainAuthKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthKey indicates an expected call of GetAuthKey.
func (mr *MockSPDBMockRecorder) GetAuthKey(userAddress, domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthKey", reflect.TypeOf((*MockSPDB)(nil).GetAuthKey), userAddress, domain)
}

// GetBucketReadRecord mocks base method.
func (m *MockSPDB) GetBucketReadRecord(bucketID uint64, timeRange *TrafficTimeRange) ([]*ReadRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketReadRecord", bucketID, timeRange)
	ret0, _ := ret[0].([]*ReadRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketReadRecord indicates an expected call of GetBucketReadRecord.
func (mr *MockSPDBMockRecorder) GetBucketReadRecord(bucketID, timeRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketReadRecord", reflect.TypeOf((*MockSPDB)(nil).GetBucketReadRecord), bucketID, timeRange)
}

// GetBucketTraffic mocks base method.
func (m *MockSPDB) GetBucketTraffic(bucketID uint64, yearMonth string) (*BucketTraffic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketTraffic", bucketID, yearMonth)
	ret0, _ := ret[0].(*BucketTraffic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketTraffic indicates an expected call of GetBucketTraffic.
func (mr *MockSPDBMockRecorder) GetBucketTraffic(bucketID, yearMonth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketTraffic", reflect.TypeOf((*MockSPDB)(nil).GetBucketTraffic), bucketID, yearMonth)
}

// GetJobByID mocks base method.
func (m *MockSPDB) GetJobByID(jobID uint64) (*types.JobContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobByID", jobID)
	ret0, _ := ret[0].(*types.JobContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobByID indicates an expected call of GetJobByID.
func (mr *MockSPDBMockRecorder) GetJobByID(jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobByID", reflect.TypeOf((*MockSPDB)(nil).GetJobByID), jobID)
}

// GetJobByObjectID mocks base method.
func (m *MockSPDB) GetJobByObjectID(objectID uint64) (*types.JobContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobByObjectID", objectID)
	ret0, _ := ret[0].(*types.JobContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobByObjectID indicates an expected call of GetJobByObjectID.
func (mr *MockSPDBMockRecorder) GetJobByObjectID(objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobByObjectID", reflect.TypeOf((*MockSPDB)(nil).GetJobByObjectID), objectID)
}

// GetObjectInfo mocks base method.
func (m *MockSPDB) GetObjectInfo(objectID uint64) (*types1.ObjectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectInfo", objectID)
	ret0, _ := ret[0].(*types1.ObjectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectInfo indicates an expected call of GetObjectInfo.
func (mr *MockSPDBMockRecorder) GetObjectInfo(objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectInfo", reflect.TypeOf((*MockSPDB)(nil).GetObjectInfo), objectID)
}

// GetObjectIntegrity mocks base method.
func (m *MockSPDB) GetObjectIntegrity(objectID uint64) (*IntegrityMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectIntegrity", objectID)
	ret0, _ := ret[0].(*IntegrityMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectIntegrity indicates an expected call of GetObjectIntegrity.
func (mr *MockSPDBMockRecorder) GetObjectIntegrity(objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectIntegrity", reflect.TypeOf((*MockSPDB)(nil).GetObjectIntegrity), objectID)
}

// GetObjectReadRecord mocks base method.
func (m *MockSPDB) GetObjectReadRecord(objectID uint64, timeRange *TrafficTimeRange) ([]*ReadRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectReadRecord", objectID, timeRange)
	ret0, _ := ret[0].([]*ReadRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectReadRecord indicates an expected call of GetObjectReadRecord.
func (mr *MockSPDBMockRecorder) GetObjectReadRecord(objectID, timeRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectReadRecord", reflect.TypeOf((*MockSPDB)(nil).GetObjectReadRecord), objectID, timeRange)
}

// GetOwnSpInfo mocks base method.
func (m *MockSPDB) GetOwnSpInfo() (*types0.StorageProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnSpInfo")
	ret0, _ := ret[0].(*types0.StorageProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnSpInfo indicates an expected call of GetOwnSpInfo.
func (mr *MockSPDBMockRecorder) GetOwnSpInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnSpInfo", reflect.TypeOf((*MockSPDB)(nil).GetOwnSpInfo))
}

// GetReadRecord mocks base method.
func (m *MockSPDB) GetReadRecord(timeRange *TrafficTimeRange) ([]*ReadRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadRecord", timeRange)
	ret0, _ := ret[0].([]*ReadRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadRecord indicates an expected call of GetReadRecord.
func (mr *MockSPDBMockRecorder) GetReadRecord(timeRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadRecord", reflect.TypeOf((*MockSPDB)(nil).GetReadRecord), timeRange)
}

// GetReplicatePieceChecksum mocks base method.
func (m *MockSPDB) GetReplicatePieceChecksum(objectID uint64, replicateIdx, pieceIdx uint32) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicatePieceChecksum", objectID, replicateIdx, pieceIdx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicatePieceChecksum indicates an expected call of GetReplicatePieceChecksum.
func (mr *MockSPDBMockRecorder) GetReplicatePieceChecksum(objectID, replicateIdx, pieceIdx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicatePieceChecksum", reflect.TypeOf((*MockSPDB)(nil).GetReplicatePieceChecksum), objectID, replicateIdx, pieceIdx)
}

// GetSpByAddress mocks base method.
func (m *MockSPDB) GetSpByAddress(address string, addressType SpAddressType) (*types0.StorageProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpByAddress", address, addressType)
	ret0, _ := ret[0].(*types0.StorageProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpByAddress indicates an expected call of GetSpByAddress.
func (mr *MockSPDBMockRecorder) GetSpByAddress(address, addressType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpByAddress", reflect.TypeOf((*MockSPDB)(nil).GetSpByAddress), address, addressType)
}

// GetSpByEndpoint mocks base method.
func (m *MockSPDB) GetSpByEndpoint(endpoint string) (*types0.StorageProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpByEndpoint", endpoint)
	ret0, _ := ret[0].(*types0.StorageProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpByEndpoint indicates an expected call of GetSpByEndpoint.
func (mr *MockSPDBMockRecorder) GetSpByEndpoint(endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpByEndpoint", reflect.TypeOf((*MockSPDB)(nil).GetSpByEndpoint), endpoint)
}

// GetStorageParams mocks base method.
func (m *MockSPDB) GetStorageParams() (*types1.Params, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageParams")
	ret0, _ := ret[0].(*types1.Params)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageParams indicates an expected call of GetStorageParams.
func (mr *MockSPDBMockRecorder) GetStorageParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageParams", reflect.TypeOf((*MockSPDB)(nil).GetStorageParams))
}

// GetUserReadRecord mocks base method.
func (m *MockSPDB) GetUserReadRecord(userAddress string, timeRange *TrafficTimeRange) ([]*ReadRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserReadRecord", userAddress, timeRange)
	ret0, _ := ret[0].([]*ReadRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserReadRecord indicates an expected call of GetUserReadRecord.
func (mr *MockSPDBMockRecorder) GetUserReadRecord(userAddress, timeRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReadRecord", reflect.TypeOf((*MockSPDB)(nil).GetUserReadRecord), userAddress, timeRange)
}

// InsertAuthKey mocks base method.
func (m *MockSPDB) InsertAuthKey(newRecord *OffChainAuthKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAuthKey", newRecord)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAuthKey indicates an expected call of InsertAuthKey.
func (mr *MockSPDBMockRecorder) InsertAuthKey(newRecord interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAuthKey", reflect.TypeOf((*MockSPDB)(nil).InsertAuthKey), newRecord)
}

// SetAllReplicatePieceChecksum mocks base method.
func (m *MockSPDB) SetAllReplicatePieceChecksum(objectID uint64, replicateIdx, pieceCount uint32, checksum [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAllReplicatePieceChecksum", objectID, replicateIdx, pieceCount, checksum)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAllReplicatePieceChecksum indicates an expected call of SetAllReplicatePieceChecksum.
func (mr *MockSPDBMockRecorder) SetAllReplicatePieceChecksum(objectID, replicateIdx, pieceCount, checksum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAllReplicatePieceChecksum", reflect.TypeOf((*MockSPDB)(nil).SetAllReplicatePieceChecksum), objectID, replicateIdx, pieceCount, checksum)
}

// SetGCObjectProgress mocks base method.
func (m *MockSPDB) SetGCObjectProgress(taskKey string, deletingBlockID, deletedObjectID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGCObjectProgress", taskKey, deletingBlockID, deletedObjectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGCObjectProgress indicates an expected call of SetGCObjectProgress.
func (mr *MockSPDBMockRecorder) SetGCObjectProgress(taskKey, deletingBlockID, deletedObjectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGCObjectProgress", reflect.TypeOf((*MockSPDB)(nil).SetGCObjectProgress), taskKey, deletingBlockID, deletedObjectID)
}

// SetObjectInfo mocks base method.
func (m *MockSPDB) SetObjectInfo(objectID uint64, objectInfo *types1.ObjectInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetObjectInfo", objectID, objectInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetObjectInfo indicates an expected call of SetObjectInfo.
func (mr *MockSPDBMockRecorder) SetObjectInfo(objectID, objectInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetObjectInfo", reflect.TypeOf((*MockSPDB)(nil).SetObjectInfo), objectID, objectInfo)
}

// SetObjectIntegrity mocks base method.
func (m *MockSPDB) SetObjectIntegrity(integrity *IntegrityMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetObjectIntegrity", integrity)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetObjectIntegrity indicates an expected call of SetObjectIntegrity.
func (mr *MockSPDBMockRecorder) SetObjectIntegrity(integrity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetObjectIntegrity", reflect.TypeOf((*MockSPDB)(nil).SetObjectIntegrity), integrity)
}

// SetOwnSpInfo mocks base method.
func (m *MockSPDB) SetOwnSpInfo(sp *types0.StorageProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOwnSpInfo", sp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOwnSpInfo indicates an expected call of SetOwnSpInfo.
func (mr *MockSPDBMockRecorder) SetOwnSpInfo(sp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOwnSpInfo", reflect.TypeOf((*MockSPDB)(nil).SetOwnSpInfo), sp)
}

// SetReplicatePieceChecksum mocks base method.
func (m *MockSPDB) SetReplicatePieceChecksum(objectID uint64, replicateIdx, pieceIdx uint32, checksum []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReplicatePieceChecksum", objectID, replicateIdx, pieceIdx, checksum)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReplicatePieceChecksum indicates an expected call of SetReplicatePieceChecksum.
func (mr *MockSPDBMockRecorder) SetReplicatePieceChecksum(objectID, replicateIdx, pieceIdx, checksum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReplicatePieceChecksum", reflect.TypeOf((*MockSPDB)(nil).SetReplicatePieceChecksum), objectID, replicateIdx, pieceIdx, checksum)
}

// SetStorageParams mocks base method.
func (m *MockSPDB) SetStorageParams(params *types1.Params) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStorageParams", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStorageParams indicates an expected call of SetStorageParams.
func (mr *MockSPDBMockRecorder) SetStorageParams(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStorageParams", reflect.TypeOf((*MockSPDB)(nil).SetStorageParams), params)
}

// UpdateAllSp mocks base method.
func (m *MockSPDB) UpdateAllSp(spList []*types0.StorageProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSp", spList)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAllSp indicates an expected call of UpdateAllSp.
func (mr *MockSPDBMockRecorder) UpdateAllSp(spList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSp", reflect.TypeOf((*MockSPDB)(nil).UpdateAllSp), spList)
}

// UpdateAuthKey mocks base method.
func (m *MockSPDB) UpdateAuthKey(userAddress, domain string, oldNonce, newNonce int32, newPublicKey string, newExpiryDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthKey", userAddress, domain, oldNonce, newNonce, newPublicKey, newExpiryDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthKey indicates an expected call of UpdateAuthKey.
func (mr *MockSPDBMockRecorder) UpdateAuthKey(userAddress, domain, oldNonce, newNonce, newPublicKey, newExpiryDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthKey", reflect.TypeOf((*MockSPDB)(nil).UpdateAuthKey), userAddress, domain, oldNonce, newNonce, newPublicKey, newExpiryDate)
}

// UpdateJobState mocks base method.
func (m *MockSPDB) UpdateJobState(objectID uint64, state types.JobState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobState", objectID, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobState indicates an expected call of UpdateJobState.
func (mr *MockSPDBMockRecorder) UpdateJobState(objectID, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobState", reflect.TypeOf((*MockSPDB)(nil).UpdateJobState), objectID, state)
}
