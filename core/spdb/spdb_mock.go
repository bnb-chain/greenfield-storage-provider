// Code generated by MockGen. DO NOT EDIT.
// Source: core/spdb/spdb.go

// Package spdb is a generated GoMock package.
package spdb

import (
	reflect "reflect"
	time "time"

	types "github.com/bnb-chain/greenfield-storage-provider/store/types"
	types0 "github.com/bnb-chain/greenfield/x/sp/types"
	gomock "github.com/golang/mock/gomock"
)

// MockUploadObjectProgressDB is a mock of UploadObjectProgressDB interface.
type MockUploadObjectProgressDB struct {
	ctrl     *gomock.Controller
	recorder *MockUploadObjectProgressDBMockRecorder
}

// MockUploadObjectProgressDBMockRecorder is the mock recorder for MockUploadObjectProgressDB.
type MockUploadObjectProgressDBMockRecorder struct {
	mock *MockUploadObjectProgressDB
}

// NewMockUploadObjectProgressDB creates a new mock instance.
func NewMockUploadObjectProgressDB(ctrl *gomock.Controller) *MockUploadObjectProgressDB {
	mock := &MockUploadObjectProgressDB{ctrl: ctrl}
	mock.recorder = &MockUploadObjectProgressDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploadObjectProgressDB) EXPECT() *MockUploadObjectProgressDBMockRecorder {
	return m.recorder
}

// DeleteUploadProgress mocks base method.
func (m *MockUploadObjectProgressDB) DeleteUploadProgress(objectID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUploadProgress", objectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUploadProgress indicates an expected call of DeleteUploadProgress.
func (mr *MockUploadObjectProgressDBMockRecorder) DeleteUploadProgress(objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUploadProgress", reflect.TypeOf((*MockUploadObjectProgressDB)(nil).DeleteUploadProgress), objectID)
}

// GetUploadMetasToReplicate mocks base method.
func (m *MockUploadObjectProgressDB) GetUploadMetasToReplicate(limit int) ([]*UploadObjectMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadMetasToReplicate", limit)
	ret0, _ := ret[0].([]*UploadObjectMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadMetasToReplicate indicates an expected call of GetUploadMetasToReplicate.
func (mr *MockUploadObjectProgressDBMockRecorder) GetUploadMetasToReplicate(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadMetasToReplicate", reflect.TypeOf((*MockUploadObjectProgressDB)(nil).GetUploadMetasToReplicate), limit)
}

// GetUploadMetasToSeal mocks base method.
func (m *MockUploadObjectProgressDB) GetUploadMetasToSeal(limit int) ([]*UploadObjectMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadMetasToSeal", limit)
	ret0, _ := ret[0].([]*UploadObjectMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadMetasToSeal indicates an expected call of GetUploadMetasToSeal.
func (mr *MockUploadObjectProgressDBMockRecorder) GetUploadMetasToSeal(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadMetasToSeal", reflect.TypeOf((*MockUploadObjectProgressDB)(nil).GetUploadMetasToSeal), limit)
}

// GetUploadState mocks base method.
func (m *MockUploadObjectProgressDB) GetUploadState(objectID uint64) (types.TaskState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadState", objectID)
	ret0, _ := ret[0].(types.TaskState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadState indicates an expected call of GetUploadState.
func (mr *MockUploadObjectProgressDBMockRecorder) GetUploadState(objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadState", reflect.TypeOf((*MockUploadObjectProgressDB)(nil).GetUploadState), objectID)
}

// InsertUploadProgress mocks base method.
func (m *MockUploadObjectProgressDB) InsertUploadProgress(objectID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUploadProgress", objectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUploadProgress indicates an expected call of InsertUploadProgress.
func (mr *MockUploadObjectProgressDBMockRecorder) InsertUploadProgress(objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUploadProgress", reflect.TypeOf((*MockUploadObjectProgressDB)(nil).InsertUploadProgress), objectID)
}

// UpdateUploadProgress mocks base method.
func (m *MockUploadObjectProgressDB) UpdateUploadProgress(uploadMeta *UploadObjectMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUploadProgress", uploadMeta)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUploadProgress indicates an expected call of UpdateUploadProgress.
func (mr *MockUploadObjectProgressDBMockRecorder) UpdateUploadProgress(uploadMeta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUploadProgress", reflect.TypeOf((*MockUploadObjectProgressDB)(nil).UpdateUploadProgress), uploadMeta)
}

// MockGCObjectProgressDB is a mock of GCObjectProgressDB interface.
type MockGCObjectProgressDB struct {
	ctrl     *gomock.Controller
	recorder *MockGCObjectProgressDBMockRecorder
}

// MockGCObjectProgressDBMockRecorder is the mock recorder for MockGCObjectProgressDB.
type MockGCObjectProgressDBMockRecorder struct {
	mock *MockGCObjectProgressDB
}

// NewMockGCObjectProgressDB creates a new mock instance.
func NewMockGCObjectProgressDB(ctrl *gomock.Controller) *MockGCObjectProgressDB {
	mock := &MockGCObjectProgressDB{ctrl: ctrl}
	mock.recorder = &MockGCObjectProgressDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGCObjectProgressDB) EXPECT() *MockGCObjectProgressDBMockRecorder {
	return m.recorder
}

// DeleteGCObjectProgress mocks base method.
func (m *MockGCObjectProgressDB) DeleteGCObjectProgress(taskKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGCObjectProgress", taskKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGCObjectProgress indicates an expected call of DeleteGCObjectProgress.
func (mr *MockGCObjectProgressDBMockRecorder) DeleteGCObjectProgress(taskKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGCObjectProgress", reflect.TypeOf((*MockGCObjectProgressDB)(nil).DeleteGCObjectProgress), taskKey)
}

// GetGCMetasToGC mocks base method.
func (m *MockGCObjectProgressDB) GetGCMetasToGC(limit int) ([]*GCObjectMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGCMetasToGC", limit)
	ret0, _ := ret[0].([]*GCObjectMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGCMetasToGC indicates an expected call of GetGCMetasToGC.
func (mr *MockGCObjectProgressDBMockRecorder) GetGCMetasToGC(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGCMetasToGC", reflect.TypeOf((*MockGCObjectProgressDB)(nil).GetGCMetasToGC), limit)
}

// InsertGCObjectProgress mocks base method.
func (m *MockGCObjectProgressDB) InsertGCObjectProgress(taskKey string, gcMeta *GCObjectMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertGCObjectProgress", taskKey, gcMeta)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertGCObjectProgress indicates an expected call of InsertGCObjectProgress.
func (mr *MockGCObjectProgressDBMockRecorder) InsertGCObjectProgress(taskKey, gcMeta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertGCObjectProgress", reflect.TypeOf((*MockGCObjectProgressDB)(nil).InsertGCObjectProgress), taskKey, gcMeta)
}

// UpdateGCObjectProgress mocks base method.
func (m *MockGCObjectProgressDB) UpdateGCObjectProgress(gcMeta *GCObjectMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGCObjectProgress", gcMeta)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGCObjectProgress indicates an expected call of UpdateGCObjectProgress.
func (mr *MockGCObjectProgressDBMockRecorder) UpdateGCObjectProgress(gcMeta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGCObjectProgress", reflect.TypeOf((*MockGCObjectProgressDB)(nil).UpdateGCObjectProgress), gcMeta)
}

// MockSignatureDB is a mock of SignatureDB interface.
type MockSignatureDB struct {
	ctrl     *gomock.Controller
	recorder *MockSignatureDBMockRecorder
}

// MockSignatureDBMockRecorder is the mock recorder for MockSignatureDB.
type MockSignatureDBMockRecorder struct {
	mock *MockSignatureDB
}

// NewMockSignatureDB creates a new mock instance.
func NewMockSignatureDB(ctrl *gomock.Controller) *MockSignatureDB {
	mock := &MockSignatureDB{ctrl: ctrl}
	mock.recorder = &MockSignatureDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignatureDB) EXPECT() *MockSignatureDBMockRecorder {
	return m.recorder
}

// DeleteAllReplicatePieceChecksum mocks base method.
func (m *MockSignatureDB) DeleteAllReplicatePieceChecksum(objectID uint64, replicateIdx, pieceCount uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllReplicatePieceChecksum", objectID, replicateIdx, pieceCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllReplicatePieceChecksum indicates an expected call of DeleteAllReplicatePieceChecksum.
func (mr *MockSignatureDBMockRecorder) DeleteAllReplicatePieceChecksum(objectID, replicateIdx, pieceCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllReplicatePieceChecksum", reflect.TypeOf((*MockSignatureDB)(nil).DeleteAllReplicatePieceChecksum), objectID, replicateIdx, pieceCount)
}

// DeleteObjectIntegrity mocks base method.
func (m *MockSignatureDB) DeleteObjectIntegrity(objectID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectIntegrity", objectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObjectIntegrity indicates an expected call of DeleteObjectIntegrity.
func (mr *MockSignatureDBMockRecorder) DeleteObjectIntegrity(objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectIntegrity", reflect.TypeOf((*MockSignatureDB)(nil).DeleteObjectIntegrity), objectID)
}

// GetAllReplicatePieceChecksum mocks base method.
func (m *MockSignatureDB) GetAllReplicatePieceChecksum(objectID uint64, replicateIdx, pieceCount uint32) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllReplicatePieceChecksum", objectID, replicateIdx, pieceCount)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllReplicatePieceChecksum indicates an expected call of GetAllReplicatePieceChecksum.
func (mr *MockSignatureDBMockRecorder) GetAllReplicatePieceChecksum(objectID, replicateIdx, pieceCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllReplicatePieceChecksum", reflect.TypeOf((*MockSignatureDB)(nil).GetAllReplicatePieceChecksum), objectID, replicateIdx, pieceCount)
}

// GetObjectIntegrity mocks base method.
func (m *MockSignatureDB) GetObjectIntegrity(objectID uint64) (*IntegrityMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectIntegrity", objectID)
	ret0, _ := ret[0].(*IntegrityMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectIntegrity indicates an expected call of GetObjectIntegrity.
func (mr *MockSignatureDBMockRecorder) GetObjectIntegrity(objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectIntegrity", reflect.TypeOf((*MockSignatureDB)(nil).GetObjectIntegrity), objectID)
}

// SetObjectIntegrity mocks base method.
func (m *MockSignatureDB) SetObjectIntegrity(integrity *IntegrityMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetObjectIntegrity", integrity)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetObjectIntegrity indicates an expected call of SetObjectIntegrity.
func (mr *MockSignatureDBMockRecorder) SetObjectIntegrity(integrity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetObjectIntegrity", reflect.TypeOf((*MockSignatureDB)(nil).SetObjectIntegrity), integrity)
}

// SetReplicatePieceChecksum mocks base method.
func (m *MockSignatureDB) SetReplicatePieceChecksum(objectID uint64, replicateIdx, pieceIdx uint32, checksum []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReplicatePieceChecksum", objectID, replicateIdx, pieceIdx, checksum)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReplicatePieceChecksum indicates an expected call of SetReplicatePieceChecksum.
func (mr *MockSignatureDBMockRecorder) SetReplicatePieceChecksum(objectID, replicateIdx, pieceIdx, checksum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReplicatePieceChecksum", reflect.TypeOf((*MockSignatureDB)(nil).SetReplicatePieceChecksum), objectID, replicateIdx, pieceIdx, checksum)
}

// MockTrafficDB is a mock of TrafficDB interface.
type MockTrafficDB struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficDBMockRecorder
}

// MockTrafficDBMockRecorder is the mock recorder for MockTrafficDB.
type MockTrafficDBMockRecorder struct {
	mock *MockTrafficDB
}

// NewMockTrafficDB creates a new mock instance.
func NewMockTrafficDB(ctrl *gomock.Controller) *MockTrafficDB {
	mock := &MockTrafficDB{ctrl: ctrl}
	mock.recorder = &MockTrafficDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficDB) EXPECT() *MockTrafficDBMockRecorder {
	return m.recorder
}

// CheckQuotaAndAddReadRecord mocks base method.
func (m *MockTrafficDB) CheckQuotaAndAddReadRecord(record *ReadRecord, quota *BucketQuota) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckQuotaAndAddReadRecord", record, quota)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckQuotaAndAddReadRecord indicates an expected call of CheckQuotaAndAddReadRecord.
func (mr *MockTrafficDBMockRecorder) CheckQuotaAndAddReadRecord(record, quota interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckQuotaAndAddReadRecord", reflect.TypeOf((*MockTrafficDB)(nil).CheckQuotaAndAddReadRecord), record, quota)
}

// GetBucketReadRecord mocks base method.
func (m *MockTrafficDB) GetBucketReadRecord(bucketID uint64, timeRange *TrafficTimeRange) ([]*ReadRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketReadRecord", bucketID, timeRange)
	ret0, _ := ret[0].([]*ReadRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketReadRecord indicates an expected call of GetBucketReadRecord.
func (mr *MockTrafficDBMockRecorder) GetBucketReadRecord(bucketID, timeRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketReadRecord", reflect.TypeOf((*MockTrafficDB)(nil).GetBucketReadRecord), bucketID, timeRange)
}

// GetBucketTraffic mocks base method.
func (m *MockTrafficDB) GetBucketTraffic(bucketID uint64, yearMonth string) (*BucketTraffic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketTraffic", bucketID, yearMonth)
	ret0, _ := ret[0].(*BucketTraffic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketTraffic indicates an expected call of GetBucketTraffic.
func (mr *MockTrafficDBMockRecorder) GetBucketTraffic(bucketID, yearMonth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketTraffic", reflect.TypeOf((*MockTrafficDB)(nil).GetBucketTraffic), bucketID, yearMonth)
}

// GetObjectReadRecord mocks base method.
func (m *MockTrafficDB) GetObjectReadRecord(objectID uint64, timeRange *TrafficTimeRange) ([]*ReadRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectReadRecord", objectID, timeRange)
	ret0, _ := ret[0].([]*ReadRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectReadRecord indicates an expected call of GetObjectReadRecord.
func (mr *MockTrafficDBMockRecorder) GetObjectReadRecord(objectID, timeRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectReadRecord", reflect.TypeOf((*MockTrafficDB)(nil).GetObjectReadRecord), objectID, timeRange)
}

// GetReadRecord mocks base method.
func (m *MockTrafficDB) GetReadRecord(timeRange *TrafficTimeRange) ([]*ReadRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadRecord", timeRange)
	ret0, _ := ret[0].([]*ReadRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadRecord indicates an expected call of GetReadRecord.
func (mr *MockTrafficDBMockRecorder) GetReadRecord(timeRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadRecord", reflect.TypeOf((*MockTrafficDB)(nil).GetReadRecord), timeRange)
}

// GetUserReadRecord mocks base method.
func (m *MockTrafficDB) GetUserReadRecord(userAddress string, timeRange *TrafficTimeRange) ([]*ReadRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserReadRecord", userAddress, timeRange)
	ret0, _ := ret[0].([]*ReadRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserReadRecord indicates an expected call of GetUserReadRecord.
func (mr *MockTrafficDBMockRecorder) GetUserReadRecord(userAddress, timeRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReadRecord", reflect.TypeOf((*MockTrafficDB)(nil).GetUserReadRecord), userAddress, timeRange)
}

// MockSPInfoDB is a mock of SPInfoDB interface.
type MockSPInfoDB struct {
	ctrl     *gomock.Controller
	recorder *MockSPInfoDBMockRecorder
}

// MockSPInfoDBMockRecorder is the mock recorder for MockSPInfoDB.
type MockSPInfoDBMockRecorder struct {
	mock *MockSPInfoDB
}

// NewMockSPInfoDB creates a new mock instance.
func NewMockSPInfoDB(ctrl *gomock.Controller) *MockSPInfoDB {
	mock := &MockSPInfoDB{ctrl: ctrl}
	mock.recorder = &MockSPInfoDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSPInfoDB) EXPECT() *MockSPInfoDBMockRecorder {
	return m.recorder
}

// FetchAllSp mocks base method.
func (m *MockSPInfoDB) FetchAllSp(status ...types0.Status) ([]*types0.StorageProvider, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range status {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchAllSp", varargs...)
	ret0, _ := ret[0].([]*types0.StorageProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllSp indicates an expected call of FetchAllSp.
func (mr *MockSPInfoDBMockRecorder) FetchAllSp(status ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllSp", reflect.TypeOf((*MockSPInfoDB)(nil).FetchAllSp), status...)
}

// FetchAllSpWithoutOwnSp mocks base method.
func (m *MockSPInfoDB) FetchAllSpWithoutOwnSp(status ...types0.Status) ([]*types0.StorageProvider, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range status {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchAllSpWithoutOwnSp", varargs...)
	ret0, _ := ret[0].([]*types0.StorageProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllSpWithoutOwnSp indicates an expected call of FetchAllSpWithoutOwnSp.
func (mr *MockSPInfoDBMockRecorder) FetchAllSpWithoutOwnSp(status ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllSpWithoutOwnSp", reflect.TypeOf((*MockSPInfoDB)(nil).FetchAllSpWithoutOwnSp), status...)
}

// GetOwnSpInfo mocks base method.
func (m *MockSPInfoDB) GetOwnSpInfo() (*types0.StorageProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnSpInfo")
	ret0, _ := ret[0].(*types0.StorageProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnSpInfo indicates an expected call of GetOwnSpInfo.
func (mr *MockSPInfoDBMockRecorder) GetOwnSpInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnSpInfo", reflect.TypeOf((*MockSPInfoDB)(nil).GetOwnSpInfo))
}

// GetSpByAddress mocks base method.
func (m *MockSPInfoDB) GetSpByAddress(address string, addressType SpAddressType) (*types0.StorageProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpByAddress", address, addressType)
	ret0, _ := ret[0].(*types0.StorageProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpByAddress indicates an expected call of GetSpByAddress.
func (mr *MockSPInfoDBMockRecorder) GetSpByAddress(address, addressType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpByAddress", reflect.TypeOf((*MockSPInfoDB)(nil).GetSpByAddress), address, addressType)
}

// GetSpByEndpoint mocks base method.
func (m *MockSPInfoDB) GetSpByEndpoint(endpoint string) (*types0.StorageProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpByEndpoint", endpoint)
	ret0, _ := ret[0].(*types0.StorageProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpByEndpoint indicates an expected call of GetSpByEndpoint.
func (mr *MockSPInfoDBMockRecorder) GetSpByEndpoint(endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpByEndpoint", reflect.TypeOf((*MockSPInfoDB)(nil).GetSpByEndpoint), endpoint)
}

// SetOwnSpInfo mocks base method.
func (m *MockSPInfoDB) SetOwnSpInfo(sp *types0.StorageProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOwnSpInfo", sp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOwnSpInfo indicates an expected call of SetOwnSpInfo.
func (mr *MockSPInfoDBMockRecorder) SetOwnSpInfo(sp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOwnSpInfo", reflect.TypeOf((*MockSPInfoDB)(nil).SetOwnSpInfo), sp)
}

// UpdateAllSp mocks base method.
func (m *MockSPInfoDB) UpdateAllSp(spList []*types0.StorageProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSp", spList)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAllSp indicates an expected call of UpdateAllSp.
func (mr *MockSPInfoDBMockRecorder) UpdateAllSp(spList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSp", reflect.TypeOf((*MockSPInfoDB)(nil).UpdateAllSp), spList)
}

// MockOffChainAuthKeyDB is a mock of OffChainAuthKeyDB interface.
type MockOffChainAuthKeyDB struct {
	ctrl     *gomock.Controller
	recorder *MockOffChainAuthKeyDBMockRecorder
}

// MockOffChainAuthKeyDBMockRecorder is the mock recorder for MockOffChainAuthKeyDB.
type MockOffChainAuthKeyDBMockRecorder struct {
	mock *MockOffChainAuthKeyDB
}

// NewMockOffChainAuthKeyDB creates a new mock instance.
func NewMockOffChainAuthKeyDB(ctrl *gomock.Controller) *MockOffChainAuthKeyDB {
	mock := &MockOffChainAuthKeyDB{ctrl: ctrl}
	mock.recorder = &MockOffChainAuthKeyDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOffChainAuthKeyDB) EXPECT() *MockOffChainAuthKeyDBMockRecorder {
	return m.recorder
}

// GetAuthKey mocks base method.
func (m *MockOffChainAuthKeyDB) GetAuthKey(userAddress, domain string) (*OffChainAuthKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthKey", userAddress, domain)
	ret0, _ := ret[0].(*OffChainAuthKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthKey indicates an expected call of GetAuthKey.
func (mr *MockOffChainAuthKeyDBMockRecorder) GetAuthKey(userAddress, domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthKey", reflect.TypeOf((*MockOffChainAuthKeyDB)(nil).GetAuthKey), userAddress, domain)
}

// InsertAuthKey mocks base method.
func (m *MockOffChainAuthKeyDB) InsertAuthKey(newRecord *OffChainAuthKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAuthKey", newRecord)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAuthKey indicates an expected call of InsertAuthKey.
func (mr *MockOffChainAuthKeyDBMockRecorder) InsertAuthKey(newRecord interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAuthKey", reflect.TypeOf((*MockOffChainAuthKeyDB)(nil).InsertAuthKey), newRecord)
}

// UpdateAuthKey mocks base method.
func (m *MockOffChainAuthKeyDB) UpdateAuthKey(userAddress, domain string, oldNonce, newNonce int32, newPublicKey string, newExpiryDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthKey", userAddress, domain, oldNonce, newNonce, newPublicKey, newExpiryDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthKey indicates an expected call of UpdateAuthKey.
func (mr *MockOffChainAuthKeyDBMockRecorder) UpdateAuthKey(userAddress, domain, oldNonce, newNonce, newPublicKey, newExpiryDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthKey", reflect.TypeOf((*MockOffChainAuthKeyDB)(nil).UpdateAuthKey), userAddress, domain, oldNonce, newNonce, newPublicKey, newExpiryDate)
}

// MockSPDB is a mock of SPDB interface.
type MockSPDB struct {
	ctrl     *gomock.Controller
	recorder *MockSPDBMockRecorder
}

// MockSPDBMockRecorder is the mock recorder for MockSPDB.
type MockSPDBMockRecorder struct {
	mock *MockSPDB
}

// NewMockSPDB creates a new mock instance.
func NewMockSPDB(ctrl *gomock.Controller) *MockSPDB {
	mock := &MockSPDB{ctrl: ctrl}
	mock.recorder = &MockSPDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSPDB) EXPECT() *MockSPDBMockRecorder {
	return m.recorder
}

// CheckQuotaAndAddReadRecord mocks base method.
func (m *MockSPDB) CheckQuotaAndAddReadRecord(record *ReadRecord, quota *BucketQuota) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckQuotaAndAddReadRecord", record, quota)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckQuotaAndAddReadRecord indicates an expected call of CheckQuotaAndAddReadRecord.
func (mr *MockSPDBMockRecorder) CheckQuotaAndAddReadRecord(record, quota interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckQuotaAndAddReadRecord", reflect.TypeOf((*MockSPDB)(nil).CheckQuotaAndAddReadRecord), record, quota)
}

// DeleteAllReplicatePieceChecksum mocks base method.
func (m *MockSPDB) DeleteAllReplicatePieceChecksum(objectID uint64, replicateIdx, pieceCount uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllReplicatePieceChecksum", objectID, replicateIdx, pieceCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllReplicatePieceChecksum indicates an expected call of DeleteAllReplicatePieceChecksum.
func (mr *MockSPDBMockRecorder) DeleteAllReplicatePieceChecksum(objectID, replicateIdx, pieceCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllReplicatePieceChecksum", reflect.TypeOf((*MockSPDB)(nil).DeleteAllReplicatePieceChecksum), objectID, replicateIdx, pieceCount)
}

// DeleteGCObjectProgress mocks base method.
func (m *MockSPDB) DeleteGCObjectProgress(taskKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGCObjectProgress", taskKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGCObjectProgress indicates an expected call of DeleteGCObjectProgress.
func (mr *MockSPDBMockRecorder) DeleteGCObjectProgress(taskKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGCObjectProgress", reflect.TypeOf((*MockSPDB)(nil).DeleteGCObjectProgress), taskKey)
}

// DeleteObjectIntegrity mocks base method.
func (m *MockSPDB) DeleteObjectIntegrity(objectID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectIntegrity", objectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObjectIntegrity indicates an expected call of DeleteObjectIntegrity.
func (mr *MockSPDBMockRecorder) DeleteObjectIntegrity(objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectIntegrity", reflect.TypeOf((*MockSPDB)(nil).DeleteObjectIntegrity), objectID)
}

// DeleteUploadProgress mocks base method.
func (m *MockSPDB) DeleteUploadProgress(objectID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUploadProgress", objectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUploadProgress indicates an expected call of DeleteUploadProgress.
func (mr *MockSPDBMockRecorder) DeleteUploadProgress(objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUploadProgress", reflect.TypeOf((*MockSPDB)(nil).DeleteUploadProgress), objectID)
}

// FetchAllSp mocks base method.
func (m *MockSPDB) FetchAllSp(status ...types0.Status) ([]*types0.StorageProvider, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range status {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchAllSp", varargs...)
	ret0, _ := ret[0].([]*types0.StorageProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllSp indicates an expected call of FetchAllSp.
func (mr *MockSPDBMockRecorder) FetchAllSp(status ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllSp", reflect.TypeOf((*MockSPDB)(nil).FetchAllSp), status...)
}

// FetchAllSpWithoutOwnSp mocks base method.
func (m *MockSPDB) FetchAllSpWithoutOwnSp(status ...types0.Status) ([]*types0.StorageProvider, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range status {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchAllSpWithoutOwnSp", varargs...)
	ret0, _ := ret[0].([]*types0.StorageProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllSpWithoutOwnSp indicates an expected call of FetchAllSpWithoutOwnSp.
func (mr *MockSPDBMockRecorder) FetchAllSpWithoutOwnSp(status ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllSpWithoutOwnSp", reflect.TypeOf((*MockSPDB)(nil).FetchAllSpWithoutOwnSp), status...)
}

// GetAllReplicatePieceChecksum mocks base method.
func (m *MockSPDB) GetAllReplicatePieceChecksum(objectID uint64, replicateIdx, pieceCount uint32) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllReplicatePieceChecksum", objectID, replicateIdx, pieceCount)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllReplicatePieceChecksum indicates an expected call of GetAllReplicatePieceChecksum.
func (mr *MockSPDBMockRecorder) GetAllReplicatePieceChecksum(objectID, replicateIdx, pieceCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllReplicatePieceChecksum", reflect.TypeOf((*MockSPDB)(nil).GetAllReplicatePieceChecksum), objectID, replicateIdx, pieceCount)
}

// GetAuthKey mocks base method.
func (m *MockSPDB) GetAuthKey(userAddress, domain string) (*OffChainAuthKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthKey", userAddress, domain)
	ret0, _ := ret[0].(*OffChainAuthKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthKey indicates an expected call of GetAuthKey.
func (mr *MockSPDBMockRecorder) GetAuthKey(userAddress, domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthKey", reflect.TypeOf((*MockSPDB)(nil).GetAuthKey), userAddress, domain)
}

// GetBucketReadRecord mocks base method.
func (m *MockSPDB) GetBucketReadRecord(bucketID uint64, timeRange *TrafficTimeRange) ([]*ReadRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketReadRecord", bucketID, timeRange)
	ret0, _ := ret[0].([]*ReadRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketReadRecord indicates an expected call of GetBucketReadRecord.
func (mr *MockSPDBMockRecorder) GetBucketReadRecord(bucketID, timeRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketReadRecord", reflect.TypeOf((*MockSPDB)(nil).GetBucketReadRecord), bucketID, timeRange)
}

// GetBucketTraffic mocks base method.
func (m *MockSPDB) GetBucketTraffic(bucketID uint64, yearMonth string) (*BucketTraffic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketTraffic", bucketID, yearMonth)
	ret0, _ := ret[0].(*BucketTraffic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketTraffic indicates an expected call of GetBucketTraffic.
func (mr *MockSPDBMockRecorder) GetBucketTraffic(bucketID, yearMonth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketTraffic", reflect.TypeOf((*MockSPDB)(nil).GetBucketTraffic), bucketID, yearMonth)
}

// GetGCMetasToGC mocks base method.
func (m *MockSPDB) GetGCMetasToGC(limit int) ([]*GCObjectMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGCMetasToGC", limit)
	ret0, _ := ret[0].([]*GCObjectMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGCMetasToGC indicates an expected call of GetGCMetasToGC.
func (mr *MockSPDBMockRecorder) GetGCMetasToGC(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGCMetasToGC", reflect.TypeOf((*MockSPDB)(nil).GetGCMetasToGC), limit)
}

// GetObjectIntegrity mocks base method.
func (m *MockSPDB) GetObjectIntegrity(objectID uint64) (*IntegrityMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectIntegrity", objectID)
	ret0, _ := ret[0].(*IntegrityMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectIntegrity indicates an expected call of GetObjectIntegrity.
func (mr *MockSPDBMockRecorder) GetObjectIntegrity(objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectIntegrity", reflect.TypeOf((*MockSPDB)(nil).GetObjectIntegrity), objectID)
}

// GetObjectReadRecord mocks base method.
func (m *MockSPDB) GetObjectReadRecord(objectID uint64, timeRange *TrafficTimeRange) ([]*ReadRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectReadRecord", objectID, timeRange)
	ret0, _ := ret[0].([]*ReadRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectReadRecord indicates an expected call of GetObjectReadRecord.
func (mr *MockSPDBMockRecorder) GetObjectReadRecord(objectID, timeRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectReadRecord", reflect.TypeOf((*MockSPDB)(nil).GetObjectReadRecord), objectID, timeRange)
}

// GetOwnSpInfo mocks base method.
func (m *MockSPDB) GetOwnSpInfo() (*types0.StorageProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnSpInfo")
	ret0, _ := ret[0].(*types0.StorageProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnSpInfo indicates an expected call of GetOwnSpInfo.
func (mr *MockSPDBMockRecorder) GetOwnSpInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnSpInfo", reflect.TypeOf((*MockSPDB)(nil).GetOwnSpInfo))
}

// GetReadRecord mocks base method.
func (m *MockSPDB) GetReadRecord(timeRange *TrafficTimeRange) ([]*ReadRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadRecord", timeRange)
	ret0, _ := ret[0].([]*ReadRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadRecord indicates an expected call of GetReadRecord.
func (mr *MockSPDBMockRecorder) GetReadRecord(timeRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadRecord", reflect.TypeOf((*MockSPDB)(nil).GetReadRecord), timeRange)
}

// GetSpByAddress mocks base method.
func (m *MockSPDB) GetSpByAddress(address string, addressType SpAddressType) (*types0.StorageProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpByAddress", address, addressType)
	ret0, _ := ret[0].(*types0.StorageProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpByAddress indicates an expected call of GetSpByAddress.
func (mr *MockSPDBMockRecorder) GetSpByAddress(address, addressType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpByAddress", reflect.TypeOf((*MockSPDB)(nil).GetSpByAddress), address, addressType)
}

// GetSpByEndpoint mocks base method.
func (m *MockSPDB) GetSpByEndpoint(endpoint string) (*types0.StorageProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpByEndpoint", endpoint)
	ret0, _ := ret[0].(*types0.StorageProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpByEndpoint indicates an expected call of GetSpByEndpoint.
func (mr *MockSPDBMockRecorder) GetSpByEndpoint(endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpByEndpoint", reflect.TypeOf((*MockSPDB)(nil).GetSpByEndpoint), endpoint)
}

// GetUploadMetasToReplicate mocks base method.
func (m *MockSPDB) GetUploadMetasToReplicate(limit int) ([]*UploadObjectMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadMetasToReplicate", limit)
	ret0, _ := ret[0].([]*UploadObjectMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadMetasToReplicate indicates an expected call of GetUploadMetasToReplicate.
func (mr *MockSPDBMockRecorder) GetUploadMetasToReplicate(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadMetasToReplicate", reflect.TypeOf((*MockSPDB)(nil).GetUploadMetasToReplicate), limit)
}

// GetUploadMetasToSeal mocks base method.
func (m *MockSPDB) GetUploadMetasToSeal(limit int) ([]*UploadObjectMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadMetasToSeal", limit)
	ret0, _ := ret[0].([]*UploadObjectMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadMetasToSeal indicates an expected call of GetUploadMetasToSeal.
func (mr *MockSPDBMockRecorder) GetUploadMetasToSeal(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadMetasToSeal", reflect.TypeOf((*MockSPDB)(nil).GetUploadMetasToSeal), limit)
}

// GetUploadState mocks base method.
func (m *MockSPDB) GetUploadState(objectID uint64) (types.TaskState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadState", objectID)
	ret0, _ := ret[0].(types.TaskState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadState indicates an expected call of GetUploadState.
func (mr *MockSPDBMockRecorder) GetUploadState(objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadState", reflect.TypeOf((*MockSPDB)(nil).GetUploadState), objectID)
}

// GetUserReadRecord mocks base method.
func (m *MockSPDB) GetUserReadRecord(userAddress string, timeRange *TrafficTimeRange) ([]*ReadRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserReadRecord", userAddress, timeRange)
	ret0, _ := ret[0].([]*ReadRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserReadRecord indicates an expected call of GetUserReadRecord.
func (mr *MockSPDBMockRecorder) GetUserReadRecord(userAddress, timeRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReadRecord", reflect.TypeOf((*MockSPDB)(nil).GetUserReadRecord), userAddress, timeRange)
}

// InsertAuthKey mocks base method.
func (m *MockSPDB) InsertAuthKey(newRecord *OffChainAuthKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAuthKey", newRecord)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAuthKey indicates an expected call of InsertAuthKey.
func (mr *MockSPDBMockRecorder) InsertAuthKey(newRecord interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAuthKey", reflect.TypeOf((*MockSPDB)(nil).InsertAuthKey), newRecord)
}

// InsertGCObjectProgress mocks base method.
func (m *MockSPDB) InsertGCObjectProgress(taskKey string, gcMeta *GCObjectMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertGCObjectProgress", taskKey, gcMeta)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertGCObjectProgress indicates an expected call of InsertGCObjectProgress.
func (mr *MockSPDBMockRecorder) InsertGCObjectProgress(taskKey, gcMeta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertGCObjectProgress", reflect.TypeOf((*MockSPDB)(nil).InsertGCObjectProgress), taskKey, gcMeta)
}

// InsertUploadProgress mocks base method.
func (m *MockSPDB) InsertUploadProgress(objectID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUploadProgress", objectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUploadProgress indicates an expected call of InsertUploadProgress.
func (mr *MockSPDBMockRecorder) InsertUploadProgress(objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUploadProgress", reflect.TypeOf((*MockSPDB)(nil).InsertUploadProgress), objectID)
}

// SetObjectIntegrity mocks base method.
func (m *MockSPDB) SetObjectIntegrity(integrity *IntegrityMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetObjectIntegrity", integrity)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetObjectIntegrity indicates an expected call of SetObjectIntegrity.
func (mr *MockSPDBMockRecorder) SetObjectIntegrity(integrity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetObjectIntegrity", reflect.TypeOf((*MockSPDB)(nil).SetObjectIntegrity), integrity)
}

// SetOwnSpInfo mocks base method.
func (m *MockSPDB) SetOwnSpInfo(sp *types0.StorageProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOwnSpInfo", sp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOwnSpInfo indicates an expected call of SetOwnSpInfo.
func (mr *MockSPDBMockRecorder) SetOwnSpInfo(sp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOwnSpInfo", reflect.TypeOf((*MockSPDB)(nil).SetOwnSpInfo), sp)
}

// SetReplicatePieceChecksum mocks base method.
func (m *MockSPDB) SetReplicatePieceChecksum(objectID uint64, replicateIdx, pieceIdx uint32, checksum []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReplicatePieceChecksum", objectID, replicateIdx, pieceIdx, checksum)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReplicatePieceChecksum indicates an expected call of SetReplicatePieceChecksum.
func (mr *MockSPDBMockRecorder) SetReplicatePieceChecksum(objectID, replicateIdx, pieceIdx, checksum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReplicatePieceChecksum", reflect.TypeOf((*MockSPDB)(nil).SetReplicatePieceChecksum), objectID, replicateIdx, pieceIdx, checksum)
}

// UpdateAllSp mocks base method.
func (m *MockSPDB) UpdateAllSp(spList []*types0.StorageProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSp", spList)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAllSp indicates an expected call of UpdateAllSp.
func (mr *MockSPDBMockRecorder) UpdateAllSp(spList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSp", reflect.TypeOf((*MockSPDB)(nil).UpdateAllSp), spList)
}

// UpdateAuthKey mocks base method.
func (m *MockSPDB) UpdateAuthKey(userAddress, domain string, oldNonce, newNonce int32, newPublicKey string, newExpiryDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthKey", userAddress, domain, oldNonce, newNonce, newPublicKey, newExpiryDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthKey indicates an expected call of UpdateAuthKey.
func (mr *MockSPDBMockRecorder) UpdateAuthKey(userAddress, domain, oldNonce, newNonce, newPublicKey, newExpiryDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthKey", reflect.TypeOf((*MockSPDB)(nil).UpdateAuthKey), userAddress, domain, oldNonce, newNonce, newPublicKey, newExpiryDate)
}

// UpdateGCObjectProgress mocks base method.
func (m *MockSPDB) UpdateGCObjectProgress(gcMeta *GCObjectMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGCObjectProgress", gcMeta)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGCObjectProgress indicates an expected call of UpdateGCObjectProgress.
func (mr *MockSPDBMockRecorder) UpdateGCObjectProgress(gcMeta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGCObjectProgress", reflect.TypeOf((*MockSPDB)(nil).UpdateGCObjectProgress), gcMeta)
}

// UpdateUploadProgress mocks base method.
func (m *MockSPDB) UpdateUploadProgress(uploadMeta *UploadObjectMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUploadProgress", uploadMeta)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUploadProgress indicates an expected call of UpdateUploadProgress.
func (mr *MockSPDBMockRecorder) UpdateUploadProgress(uploadMeta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUploadProgress", reflect.TypeOf((*MockSPDB)(nil).UpdateUploadProgress), uploadMeta)
}
