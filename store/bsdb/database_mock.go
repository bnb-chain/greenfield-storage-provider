// Code generated by MockGen. DO NOT EDIT.
// Source: store/bsdb/database.go

// Package bsdb is a generated GoMock package.
package bsdb

import (
	reflect "reflect"

	common "github.com/forbole/juno/v4/common"
	gomock "github.com/golang/mock/gomock"
)

// MockMetadata is a mock of Metadata interface.
type MockMetadata struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataMockRecorder
}

// MockMetadataMockRecorder is the mock recorder for MockMetadata.
type MockMetadataMockRecorder struct {
	mock *MockMetadata
}

// NewMockMetadata creates a new mock instance.
func NewMockMetadata(ctrl *gomock.Controller) *MockMetadata {
	mock := &MockMetadata{ctrl: ctrl}
	mock.recorder = &MockMetadataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadata) EXPECT() *MockMetadataMockRecorder {
	return m.recorder
}

// GetBucketByID mocks base method.
func (m *MockMetadata) GetBucketByID(bucketID int64, includePrivate bool) (*Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketByID", bucketID, includePrivate)
	ret0, _ := ret[0].(*Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketByID indicates an expected call of GetBucketByID.
func (mr *MockMetadataMockRecorder) GetBucketByID(bucketID, includePrivate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketByID", reflect.TypeOf((*MockMetadata)(nil).GetBucketByID), bucketID, includePrivate)
}

// GetBucketByName mocks base method.
func (m *MockMetadata) GetBucketByName(bucketName string, includePrivate bool) (*Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketByName", bucketName, includePrivate)
	ret0, _ := ret[0].(*Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketByName indicates an expected call of GetBucketByName.
func (mr *MockMetadataMockRecorder) GetBucketByName(bucketName, includePrivate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketByName", reflect.TypeOf((*MockMetadata)(nil).GetBucketByName), bucketName, includePrivate)
}

// GetBucketMetaByName mocks base method.
func (m *MockMetadata) GetBucketMetaByName(bucketName string, includePrivate bool) (*BucketFullMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketMetaByName", bucketName, includePrivate)
	ret0, _ := ret[0].(*BucketFullMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketMetaByName indicates an expected call of GetBucketMetaByName.
func (mr *MockMetadataMockRecorder) GetBucketMetaByName(bucketName, includePrivate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketMetaByName", reflect.TypeOf((*MockMetadata)(nil).GetBucketMetaByName), bucketName, includePrivate)
}

// GetGlobalVirtualGroupByGvgID mocks base method.
func (m *MockMetadata) GetGlobalVirtualGroupByGvgID(gvgID uint32) (*GlobalVirtualGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalVirtualGroupByGvgID", gvgID)
	ret0, _ := ret[0].(*GlobalVirtualGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalVirtualGroupByGvgID indicates an expected call of GetGlobalVirtualGroupByGvgID.
func (mr *MockMetadataMockRecorder) GetGlobalVirtualGroupByGvgID(gvgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalVirtualGroupByGvgID", reflect.TypeOf((*MockMetadata)(nil).GetGlobalVirtualGroupByGvgID), gvgID)
}

// GetGroupsByGroupIDAndAccount mocks base method.
func (m *MockMetadata) GetGroupsByGroupIDAndAccount(groupIDList []common.Hash, account common.Address, includeRemoved bool) ([]*Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsByGroupIDAndAccount", groupIDList, account, includeRemoved)
	ret0, _ := ret[0].([]*Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsByGroupIDAndAccount indicates an expected call of GetGroupsByGroupIDAndAccount.
func (mr *MockMetadataMockRecorder) GetGroupsByGroupIDAndAccount(groupIDList, account, includeRemoved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsByGroupIDAndAccount", reflect.TypeOf((*MockMetadata)(nil).GetGroupsByGroupIDAndAccount), groupIDList, account, includeRemoved)
}

// GetGvgByBucketAndLvgID mocks base method.
func (m *MockMetadata) GetGvgByBucketAndLvgID(bucketID common.Hash, lvgID uint32) (*GlobalVirtualGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGvgByBucketAndLvgID", bucketID, lvgID)
	ret0, _ := ret[0].(*GlobalVirtualGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGvgByBucketAndLvgID indicates an expected call of GetGvgByBucketAndLvgID.
func (mr *MockMetadataMockRecorder) GetGvgByBucketAndLvgID(bucketID, lvgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGvgByBucketAndLvgID", reflect.TypeOf((*MockMetadata)(nil).GetGvgByBucketAndLvgID), bucketID, lvgID)
}

// GetLatestBlockNumber mocks base method.
func (m *MockMetadata) GetLatestBlockNumber() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBlockNumber")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBlockNumber indicates an expected call of GetLatestBlockNumber.
func (mr *MockMetadataMockRecorder) GetLatestBlockNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlockNumber", reflect.TypeOf((*MockMetadata)(nil).GetLatestBlockNumber))
}

// GetLvgByBucketAndLvgID mocks base method.
func (m *MockMetadata) GetLvgByBucketAndLvgID(bucketID common.Hash, lvgID uint32) (*LocalVirtualGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLvgByBucketAndLvgID", bucketID, lvgID)
	ret0, _ := ret[0].(*LocalVirtualGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLvgByBucketAndLvgID indicates an expected call of GetLvgByBucketAndLvgID.
func (mr *MockMetadataMockRecorder) GetLvgByBucketAndLvgID(bucketID, lvgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLvgByBucketAndLvgID", reflect.TypeOf((*MockMetadata)(nil).GetLvgByBucketAndLvgID), bucketID, lvgID)
}

// GetObjectByName mocks base method.
func (m *MockMetadata) GetObjectByName(objectName, bucketName string, includePrivate bool) (*Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectByName", objectName, bucketName, includePrivate)
	ret0, _ := ret[0].(*Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectByName indicates an expected call of GetObjectByName.
func (mr *MockMetadataMockRecorder) GetObjectByName(objectName, bucketName, includePrivate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectByName", reflect.TypeOf((*MockMetadata)(nil).GetObjectByName), objectName, bucketName, includePrivate)
}

// GetPaymentByBucketID mocks base method.
func (m *MockMetadata) GetPaymentByBucketID(bucketID int64, includePrivate bool) (*StreamRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentByBucketID", bucketID, includePrivate)
	ret0, _ := ret[0].(*StreamRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentByBucketID indicates an expected call of GetPaymentByBucketID.
func (mr *MockMetadataMockRecorder) GetPaymentByBucketID(bucketID, includePrivate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentByBucketID", reflect.TypeOf((*MockMetadata)(nil).GetPaymentByBucketID), bucketID, includePrivate)
}

// GetPaymentByBucketName mocks base method.
func (m *MockMetadata) GetPaymentByBucketName(bucketName string, includePrivate bool) (*StreamRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentByBucketName", bucketName, includePrivate)
	ret0, _ := ret[0].(*StreamRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentByBucketName indicates an expected call of GetPaymentByBucketName.
func (mr *MockMetadataMockRecorder) GetPaymentByBucketName(bucketName, includePrivate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentByBucketName", reflect.TypeOf((*MockMetadata)(nil).GetPaymentByBucketName), bucketName, includePrivate)
}

// GetPaymentByPaymentAddress mocks base method.
func (m *MockMetadata) GetPaymentByPaymentAddress(address common.Address) (*StreamRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentByPaymentAddress", address)
	ret0, _ := ret[0].(*StreamRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentByPaymentAddress indicates an expected call of GetPaymentByPaymentAddress.
func (mr *MockMetadataMockRecorder) GetPaymentByPaymentAddress(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentByPaymentAddress", reflect.TypeOf((*MockMetadata)(nil).GetPaymentByPaymentAddress), address)
}

// GetPermissionByResourceAndPrincipal mocks base method.
func (m *MockMetadata) GetPermissionByResourceAndPrincipal(resourceType, principalType, principalValue string, resourceID common.Hash) (*Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionByResourceAndPrincipal", resourceType, principalType, principalValue, resourceID)
	ret0, _ := ret[0].(*Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionByResourceAndPrincipal indicates an expected call of GetPermissionByResourceAndPrincipal.
func (mr *MockMetadataMockRecorder) GetPermissionByResourceAndPrincipal(resourceType, principalType, principalValue, resourceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionByResourceAndPrincipal", reflect.TypeOf((*MockMetadata)(nil).GetPermissionByResourceAndPrincipal), resourceType, principalType, principalValue, resourceID)
}

// GetPermissionsByResourceAndPrincipleType mocks base method.
func (m *MockMetadata) GetPermissionsByResourceAndPrincipleType(resourceType, principalType string, resourceID common.Hash, includeRemoved bool) ([]*Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionsByResourceAndPrincipleType", resourceType, principalType, resourceID, includeRemoved)
	ret0, _ := ret[0].([]*Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionsByResourceAndPrincipleType indicates an expected call of GetPermissionsByResourceAndPrincipleType.
func (mr *MockMetadataMockRecorder) GetPermissionsByResourceAndPrincipleType(resourceType, principalType, resourceID, includeRemoved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionsByResourceAndPrincipleType", reflect.TypeOf((*MockMetadata)(nil).GetPermissionsByResourceAndPrincipleType), resourceType, principalType, resourceID, includeRemoved)
}

// GetStatementsByPolicyID mocks base method.
func (m *MockMetadata) GetStatementsByPolicyID(policyIDList []common.Hash, includeRemoved bool) ([]*Statement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatementsByPolicyID", policyIDList, includeRemoved)
	ret0, _ := ret[0].([]*Statement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatementsByPolicyID indicates an expected call of GetStatementsByPolicyID.
func (mr *MockMetadataMockRecorder) GetStatementsByPolicyID(policyIDList, includeRemoved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatementsByPolicyID", reflect.TypeOf((*MockMetadata)(nil).GetStatementsByPolicyID), policyIDList, includeRemoved)
}

// GetSwitchDBSignal mocks base method.
func (m *MockMetadata) GetSwitchDBSignal() (*MasterDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwitchDBSignal")
	ret0, _ := ret[0].(*MasterDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwitchDBSignal indicates an expected call of GetSwitchDBSignal.
func (mr *MockMetadataMockRecorder) GetSwitchDBSignal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwitchDBSignal", reflect.TypeOf((*MockMetadata)(nil).GetSwitchDBSignal))
}

// GetUserBuckets mocks base method.
func (m *MockMetadata) GetUserBuckets(accountID common.Address, includeRemoved bool) ([]*Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBuckets", accountID, includeRemoved)
	ret0, _ := ret[0].([]*Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBuckets indicates an expected call of GetUserBuckets.
func (mr *MockMetadataMockRecorder) GetUserBuckets(accountID, includeRemoved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBuckets", reflect.TypeOf((*MockMetadata)(nil).GetUserBuckets), accountID, includeRemoved)
}

// GetUserBucketsCount mocks base method.
func (m *MockMetadata) GetUserBucketsCount(accountID common.Address, includeRemoved bool) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBucketsCount", accountID, includeRemoved)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBucketsCount indicates an expected call of GetUserBucketsCount.
func (mr *MockMetadataMockRecorder) GetUserBucketsCount(accountID, includeRemoved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBucketsCount", reflect.TypeOf((*MockMetadata)(nil).GetUserBucketsCount), accountID, includeRemoved)
}

// GetVirtualGroupFamiliesByVgfID mocks base method.
func (m *MockMetadata) GetVirtualGroupFamiliesByVgfID(vgfID uint32) (*GlobalVirtualGroupFamily, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualGroupFamiliesByVgfID", vgfID)
	ret0, _ := ret[0].(*GlobalVirtualGroupFamily)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualGroupFamiliesByVgfID indicates an expected call of GetVirtualGroupFamiliesByVgfID.
func (mr *MockMetadataMockRecorder) GetVirtualGroupFamiliesByVgfID(vgfID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualGroupFamiliesByVgfID", reflect.TypeOf((*MockMetadata)(nil).GetVirtualGroupFamiliesByVgfID), vgfID)
}

// ListBucketsBindingOnPrimarySP mocks base method.
func (m *MockMetadata) ListBucketsBindingOnPrimarySP(spID uint32, startAfter common.Hash, limit int) ([]*Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBucketsBindingOnPrimarySP", spID, startAfter, limit)
	ret0, _ := ret[0].([]*Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBucketsBindingOnPrimarySP indicates an expected call of ListBucketsBindingOnPrimarySP.
func (mr *MockMetadataMockRecorder) ListBucketsBindingOnPrimarySP(spID, startAfter, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBucketsBindingOnPrimarySP", reflect.TypeOf((*MockMetadata)(nil).ListBucketsBindingOnPrimarySP), spID, startAfter, limit)
}

// ListBucketsBindingOnSecondarySP mocks base method.
func (m *MockMetadata) ListBucketsBindingOnSecondarySP(spID uint32, startAfter common.Hash, limit int) ([]*Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBucketsBindingOnSecondarySP", spID, startAfter, limit)
	ret0, _ := ret[0].([]*Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBucketsBindingOnSecondarySP indicates an expected call of ListBucketsBindingOnSecondarySP.
func (mr *MockMetadataMockRecorder) ListBucketsBindingOnSecondarySP(spID, startAfter, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBucketsBindingOnSecondarySP", reflect.TypeOf((*MockMetadata)(nil).ListBucketsBindingOnSecondarySP), spID, startAfter, limit)
}

// ListBucketsByBucketID mocks base method.
func (m *MockMetadata) ListBucketsByBucketID(ids []common.Hash, includeRemoved bool) ([]*Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBucketsByBucketID", ids, includeRemoved)
	ret0, _ := ret[0].([]*Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBucketsByBucketID indicates an expected call of ListBucketsByBucketID.
func (mr *MockMetadataMockRecorder) ListBucketsByBucketID(ids, includeRemoved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBucketsByBucketID", reflect.TypeOf((*MockMetadata)(nil).ListBucketsByBucketID), ids, includeRemoved)
}

// ListBucketsByVgfID mocks base method.
func (m *MockMetadata) ListBucketsByVgfID(vgfIDs []uint32, startAfter common.Hash, limit int) ([]*Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBucketsByVgfID", vgfIDs, startAfter, limit)
	ret0, _ := ret[0].([]*Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBucketsByVgfID indicates an expected call of ListBucketsByVgfID.
func (mr *MockMetadataMockRecorder) ListBucketsByVgfID(vgfIDs, startAfter, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBucketsByVgfID", reflect.TypeOf((*MockMetadata)(nil).ListBucketsByVgfID), vgfIDs, startAfter, limit)
}

// ListDeletedObjectsByBlockNumberRange mocks base method.
func (m *MockMetadata) ListDeletedObjectsByBlockNumberRange(startBlockNumber, endBlockNumber int64, includePrivate bool) ([]*Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeletedObjectsByBlockNumberRange", startBlockNumber, endBlockNumber, includePrivate)
	ret0, _ := ret[0].([]*Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeletedObjectsByBlockNumberRange indicates an expected call of ListDeletedObjectsByBlockNumberRange.
func (mr *MockMetadataMockRecorder) ListDeletedObjectsByBlockNumberRange(startBlockNumber, endBlockNumber, includePrivate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeletedObjectsByBlockNumberRange", reflect.TypeOf((*MockMetadata)(nil).ListDeletedObjectsByBlockNumberRange), startBlockNumber, endBlockNumber, includePrivate)
}

// ListExpiredBucketsBySp mocks base method.
func (m *MockMetadata) ListExpiredBucketsBySp(createAt int64, primarySpID uint32, limit int64) ([]*Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExpiredBucketsBySp", createAt, primarySpID, limit)
	ret0, _ := ret[0].([]*Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExpiredBucketsBySp indicates an expected call of ListExpiredBucketsBySp.
func (mr *MockMetadataMockRecorder) ListExpiredBucketsBySp(createAt, primarySpID, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExpiredBucketsBySp", reflect.TypeOf((*MockMetadata)(nil).ListExpiredBucketsBySp), createAt, primarySpID, limit)
}

// ListGroupsByNameAndSourceType mocks base method.
func (m *MockMetadata) ListGroupsByNameAndSourceType(name, prefix, sourceType string, limit, offset int, includeRemoved bool) ([]*Group, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupsByNameAndSourceType", name, prefix, sourceType, limit, offset, includeRemoved)
	ret0, _ := ret[0].([]*Group)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupsByNameAndSourceType indicates an expected call of ListGroupsByNameAndSourceType.
func (mr *MockMetadataMockRecorder) ListGroupsByNameAndSourceType(name, prefix, sourceType, limit, offset, includeRemoved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsByNameAndSourceType", reflect.TypeOf((*MockMetadata)(nil).ListGroupsByNameAndSourceType), name, prefix, sourceType, limit, offset, includeRemoved)
}

// ListGvgByBucketID mocks base method.
func (m *MockMetadata) ListGvgByBucketID(bucketID common.Hash) ([]*GlobalVirtualGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGvgByBucketID", bucketID)
	ret0, _ := ret[0].([]*GlobalVirtualGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGvgByBucketID indicates an expected call of ListGvgByBucketID.
func (mr *MockMetadataMockRecorder) ListGvgByBucketID(bucketID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGvgByBucketID", reflect.TypeOf((*MockMetadata)(nil).ListGvgByBucketID), bucketID)
}

// ListGvgByPrimarySpID mocks base method.
func (m *MockMetadata) ListGvgByPrimarySpID(spID uint32) ([]*GlobalVirtualGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGvgByPrimarySpID", spID)
	ret0, _ := ret[0].([]*GlobalVirtualGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGvgByPrimarySpID indicates an expected call of ListGvgByPrimarySpID.
func (mr *MockMetadataMockRecorder) ListGvgByPrimarySpID(spID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGvgByPrimarySpID", reflect.TypeOf((*MockMetadata)(nil).ListGvgByPrimarySpID), spID)
}

// ListGvgBySecondarySpID mocks base method.
func (m *MockMetadata) ListGvgBySecondarySpID(spID uint32) ([]*GlobalVirtualGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGvgBySecondarySpID", spID)
	ret0, _ := ret[0].([]*GlobalVirtualGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGvgBySecondarySpID indicates an expected call of ListGvgBySecondarySpID.
func (mr *MockMetadataMockRecorder) ListGvgBySecondarySpID(spID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGvgBySecondarySpID", reflect.TypeOf((*MockMetadata)(nil).ListGvgBySecondarySpID), spID)
}

// ListLvgByGvgAndBucketID mocks base method.
func (m *MockMetadata) ListLvgByGvgAndBucketID(bucketID common.Hash, gvgIDs []uint32) ([]*LocalVirtualGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLvgByGvgAndBucketID", bucketID, gvgIDs)
	ret0, _ := ret[0].([]*LocalVirtualGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLvgByGvgAndBucketID indicates an expected call of ListLvgByGvgAndBucketID.
func (mr *MockMetadataMockRecorder) ListLvgByGvgAndBucketID(bucketID, gvgIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLvgByGvgAndBucketID", reflect.TypeOf((*MockMetadata)(nil).ListLvgByGvgAndBucketID), bucketID, gvgIDs)
}

// ListLvgByGvgID mocks base method.
func (m *MockMetadata) ListLvgByGvgID(gvgIDs []uint32) ([]*LocalVirtualGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLvgByGvgID", gvgIDs)
	ret0, _ := ret[0].([]*LocalVirtualGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLvgByGvgID indicates an expected call of ListLvgByGvgID.
func (mr *MockMetadataMockRecorder) ListLvgByGvgID(gvgIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLvgByGvgID", reflect.TypeOf((*MockMetadata)(nil).ListLvgByGvgID), gvgIDs)
}

// ListMigrateBucketEvents mocks base method.
func (m *MockMetadata) ListMigrateBucketEvents(blockID uint64, spID uint32) ([]*EventMigrationBucket, []*EventCompleteMigrationBucket, []*EventCancelMigrationBucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMigrateBucketEvents", blockID, spID)
	ret0, _ := ret[0].([]*EventMigrationBucket)
	ret1, _ := ret[1].([]*EventCompleteMigrationBucket)
	ret2, _ := ret[2].([]*EventCancelMigrationBucket)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListMigrateBucketEvents indicates an expected call of ListMigrateBucketEvents.
func (mr *MockMetadataMockRecorder) ListMigrateBucketEvents(blockID, spID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMigrateBucketEvents", reflect.TypeOf((*MockMetadata)(nil).ListMigrateBucketEvents), blockID, spID)
}

// ListObjectsByBucketName mocks base method.
func (m *MockMetadata) ListObjectsByBucketName(bucketName, continuationToken, prefix, delimiter string, maxKeys int, includeRemoved bool) ([]*ListObjectsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectsByBucketName", bucketName, continuationToken, prefix, delimiter, maxKeys, includeRemoved)
	ret0, _ := ret[0].([]*ListObjectsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectsByBucketName indicates an expected call of ListObjectsByBucketName.
func (mr *MockMetadataMockRecorder) ListObjectsByBucketName(bucketName, continuationToken, prefix, delimiter, maxKeys, includeRemoved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectsByBucketName", reflect.TypeOf((*MockMetadata)(nil).ListObjectsByBucketName), bucketName, continuationToken, prefix, delimiter, maxKeys, includeRemoved)
}

// ListObjectsByLVGID mocks base method.
func (m *MockMetadata) ListObjectsByLVGID(lvgIDs []uint32, bucketID, startAfter common.Hash, limit int) ([]*Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectsByLVGID", lvgIDs, bucketID, startAfter, limit)
	ret0, _ := ret[0].([]*Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectsByLVGID indicates an expected call of ListObjectsByLVGID.
func (mr *MockMetadataMockRecorder) ListObjectsByLVGID(lvgIDs, bucketID, startAfter, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectsByLVGID", reflect.TypeOf((*MockMetadata)(nil).ListObjectsByLVGID), lvgIDs, bucketID, startAfter, limit)
}

// ListObjectsByObjectID mocks base method.
func (m *MockMetadata) ListObjectsByObjectID(ids []common.Hash, includeRemoved bool) ([]*Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectsByObjectID", ids, includeRemoved)
	ret0, _ := ret[0].([]*Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectsByObjectID indicates an expected call of ListObjectsByObjectID.
func (mr *MockMetadataMockRecorder) ListObjectsByObjectID(ids, includeRemoved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectsByObjectID", reflect.TypeOf((*MockMetadata)(nil).ListObjectsByObjectID), ids, includeRemoved)
}

// ListObjectsInGVG mocks base method.
func (m *MockMetadata) ListObjectsInGVG(gvgID uint32, startAfter common.Hash, limit int) ([]*Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectsInGVG", gvgID, startAfter, limit)
	ret0, _ := ret[0].([]*Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectsInGVG indicates an expected call of ListObjectsInGVG.
func (mr *MockMetadataMockRecorder) ListObjectsInGVG(gvgID, startAfter, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectsInGVG", reflect.TypeOf((*MockMetadata)(nil).ListObjectsInGVG), gvgID, startAfter, limit)
}

// ListObjectsInGVGAndBucket mocks base method.
func (m *MockMetadata) ListObjectsInGVGAndBucket(bucketID common.Hash, gvgID uint32, startAfter common.Hash, limit int) ([]*Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectsInGVGAndBucket", bucketID, gvgID, startAfter, limit)
	ret0, _ := ret[0].([]*Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectsInGVGAndBucket indicates an expected call of ListObjectsInGVGAndBucket.
func (mr *MockMetadataMockRecorder) ListObjectsInGVGAndBucket(bucketID, gvgID, startAfter, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectsInGVGAndBucket", reflect.TypeOf((*MockMetadata)(nil).ListObjectsInGVGAndBucket), bucketID, gvgID, startAfter, limit)
}

// ListPrimaryObjects mocks base method.
func (m *MockMetadata) ListPrimaryObjects(spID uint32, bucketID, startAfter common.Hash, limit int) ([]*Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrimaryObjects", spID, bucketID, startAfter, limit)
	ret0, _ := ret[0].([]*Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrimaryObjects indicates an expected call of ListPrimaryObjects.
func (mr *MockMetadataMockRecorder) ListPrimaryObjects(spID, bucketID, startAfter, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrimaryObjects", reflect.TypeOf((*MockMetadata)(nil).ListPrimaryObjects), spID, bucketID, startAfter, limit)
}

// ListSecondaryObjects mocks base method.
func (m *MockMetadata) ListSecondaryObjects(spID uint32, bucketID, startAfter common.Hash, limit int) ([]*Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecondaryObjects", spID, bucketID, startAfter, limit)
	ret0, _ := ret[0].([]*Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecondaryObjects indicates an expected call of ListSecondaryObjects.
func (mr *MockMetadataMockRecorder) ListSecondaryObjects(spID, bucketID, startAfter, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecondaryObjects", reflect.TypeOf((*MockMetadata)(nil).ListSecondaryObjects), spID, bucketID, startAfter, limit)
}

// ListSpExitEvents mocks base method.
func (m *MockMetadata) ListSpExitEvents(blockID uint64, operatorAddress common.Address) (*EventStorageProviderExit, *EventCompleteStorageProviderExit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpExitEvents", blockID, operatorAddress)
	ret0, _ := ret[0].(*EventStorageProviderExit)
	ret1, _ := ret[1].(*EventCompleteStorageProviderExit)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSpExitEvents indicates an expected call of ListSpExitEvents.
func (mr *MockMetadataMockRecorder) ListSpExitEvents(blockID, operatorAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpExitEvents", reflect.TypeOf((*MockMetadata)(nil).ListSpExitEvents), blockID, operatorAddress)
}

// ListSwapOutEvents mocks base method.
func (m *MockMetadata) ListSwapOutEvents(blockID uint64, spID uint32) ([]*EventSwapOut, []*EventCompleteSwapOut, []*EventCancelSwapOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSwapOutEvents", blockID, spID)
	ret0, _ := ret[0].([]*EventSwapOut)
	ret1, _ := ret[1].([]*EventCompleteSwapOut)
	ret2, _ := ret[2].([]*EventCancelSwapOut)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListSwapOutEvents indicates an expected call of ListSwapOutEvents.
func (mr *MockMetadataMockRecorder) ListSwapOutEvents(blockID, spID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSwapOutEvents", reflect.TypeOf((*MockMetadata)(nil).ListSwapOutEvents), blockID, spID)
}

// ListVgfByGvgID mocks base method.
func (m *MockMetadata) ListVgfByGvgID(gvgIDs []uint32) ([]*GlobalVirtualGroupFamily, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVgfByGvgID", gvgIDs)
	ret0, _ := ret[0].([]*GlobalVirtualGroupFamily)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVgfByGvgID indicates an expected call of ListVgfByGvgID.
func (mr *MockMetadataMockRecorder) ListVgfByGvgID(gvgIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVgfByGvgID", reflect.TypeOf((*MockMetadata)(nil).ListVgfByGvgID), gvgIDs)
}

// ListVirtualGroupFamiliesBySpID mocks base method.
func (m *MockMetadata) ListVirtualGroupFamiliesBySpID(spID uint32) ([]*GlobalVirtualGroupFamily, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualGroupFamiliesBySpID", spID)
	ret0, _ := ret[0].([]*GlobalVirtualGroupFamily)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualGroupFamiliesBySpID indicates an expected call of ListVirtualGroupFamiliesBySpID.
func (mr *MockMetadataMockRecorder) ListVirtualGroupFamiliesBySpID(spID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualGroupFamiliesBySpID", reflect.TypeOf((*MockMetadata)(nil).ListVirtualGroupFamiliesBySpID), spID)
}

// MockBSDB is a mock of BSDB interface.
type MockBSDB struct {
	ctrl     *gomock.Controller
	recorder *MockBSDBMockRecorder
}

// MockBSDBMockRecorder is the mock recorder for MockBSDB.
type MockBSDBMockRecorder struct {
	mock *MockBSDB
}

// NewMockBSDB creates a new mock instance.
func NewMockBSDB(ctrl *gomock.Controller) *MockBSDB {
	mock := &MockBSDB{ctrl: ctrl}
	mock.recorder = &MockBSDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBSDB) EXPECT() *MockBSDBMockRecorder {
	return m.recorder
}

// GetBucketByID mocks base method.
func (m *MockBSDB) GetBucketByID(bucketID int64, includePrivate bool) (*Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketByID", bucketID, includePrivate)
	ret0, _ := ret[0].(*Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketByID indicates an expected call of GetBucketByID.
func (mr *MockBSDBMockRecorder) GetBucketByID(bucketID, includePrivate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketByID", reflect.TypeOf((*MockBSDB)(nil).GetBucketByID), bucketID, includePrivate)
}

// GetBucketByName mocks base method.
func (m *MockBSDB) GetBucketByName(bucketName string, includePrivate bool) (*Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketByName", bucketName, includePrivate)
	ret0, _ := ret[0].(*Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketByName indicates an expected call of GetBucketByName.
func (mr *MockBSDBMockRecorder) GetBucketByName(bucketName, includePrivate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketByName", reflect.TypeOf((*MockBSDB)(nil).GetBucketByName), bucketName, includePrivate)
}

// GetBucketMetaByName mocks base method.
func (m *MockBSDB) GetBucketMetaByName(bucketName string, includePrivate bool) (*BucketFullMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketMetaByName", bucketName, includePrivate)
	ret0, _ := ret[0].(*BucketFullMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketMetaByName indicates an expected call of GetBucketMetaByName.
func (mr *MockBSDBMockRecorder) GetBucketMetaByName(bucketName, includePrivate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketMetaByName", reflect.TypeOf((*MockBSDB)(nil).GetBucketMetaByName), bucketName, includePrivate)
}

// GetGlobalVirtualGroupByGvgID mocks base method.
func (m *MockBSDB) GetGlobalVirtualGroupByGvgID(gvgID uint32) (*GlobalVirtualGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalVirtualGroupByGvgID", gvgID)
	ret0, _ := ret[0].(*GlobalVirtualGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalVirtualGroupByGvgID indicates an expected call of GetGlobalVirtualGroupByGvgID.
func (mr *MockBSDBMockRecorder) GetGlobalVirtualGroupByGvgID(gvgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalVirtualGroupByGvgID", reflect.TypeOf((*MockBSDB)(nil).GetGlobalVirtualGroupByGvgID), gvgID)
}

// GetGroupsByGroupIDAndAccount mocks base method.
func (m *MockBSDB) GetGroupsByGroupIDAndAccount(groupIDList []common.Hash, account common.Address, includeRemoved bool) ([]*Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsByGroupIDAndAccount", groupIDList, account, includeRemoved)
	ret0, _ := ret[0].([]*Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsByGroupIDAndAccount indicates an expected call of GetGroupsByGroupIDAndAccount.
func (mr *MockBSDBMockRecorder) GetGroupsByGroupIDAndAccount(groupIDList, account, includeRemoved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsByGroupIDAndAccount", reflect.TypeOf((*MockBSDB)(nil).GetGroupsByGroupIDAndAccount), groupIDList, account, includeRemoved)
}

// GetGvgByBucketAndLvgID mocks base method.
func (m *MockBSDB) GetGvgByBucketAndLvgID(bucketID common.Hash, lvgID uint32) (*GlobalVirtualGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGvgByBucketAndLvgID", bucketID, lvgID)
	ret0, _ := ret[0].(*GlobalVirtualGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGvgByBucketAndLvgID indicates an expected call of GetGvgByBucketAndLvgID.
func (mr *MockBSDBMockRecorder) GetGvgByBucketAndLvgID(bucketID, lvgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGvgByBucketAndLvgID", reflect.TypeOf((*MockBSDB)(nil).GetGvgByBucketAndLvgID), bucketID, lvgID)
}

// GetLatestBlockNumber mocks base method.
func (m *MockBSDB) GetLatestBlockNumber() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBlockNumber")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBlockNumber indicates an expected call of GetLatestBlockNumber.
func (mr *MockBSDBMockRecorder) GetLatestBlockNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlockNumber", reflect.TypeOf((*MockBSDB)(nil).GetLatestBlockNumber))
}

// GetLvgByBucketAndLvgID mocks base method.
func (m *MockBSDB) GetLvgByBucketAndLvgID(bucketID common.Hash, lvgID uint32) (*LocalVirtualGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLvgByBucketAndLvgID", bucketID, lvgID)
	ret0, _ := ret[0].(*LocalVirtualGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLvgByBucketAndLvgID indicates an expected call of GetLvgByBucketAndLvgID.
func (mr *MockBSDBMockRecorder) GetLvgByBucketAndLvgID(bucketID, lvgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLvgByBucketAndLvgID", reflect.TypeOf((*MockBSDB)(nil).GetLvgByBucketAndLvgID), bucketID, lvgID)
}

// GetObjectByName mocks base method.
func (m *MockBSDB) GetObjectByName(objectName, bucketName string, includePrivate bool) (*Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectByName", objectName, bucketName, includePrivate)
	ret0, _ := ret[0].(*Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectByName indicates an expected call of GetObjectByName.
func (mr *MockBSDBMockRecorder) GetObjectByName(objectName, bucketName, includePrivate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectByName", reflect.TypeOf((*MockBSDB)(nil).GetObjectByName), objectName, bucketName, includePrivate)
}

// GetPaymentByBucketID mocks base method.
func (m *MockBSDB) GetPaymentByBucketID(bucketID int64, includePrivate bool) (*StreamRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentByBucketID", bucketID, includePrivate)
	ret0, _ := ret[0].(*StreamRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentByBucketID indicates an expected call of GetPaymentByBucketID.
func (mr *MockBSDBMockRecorder) GetPaymentByBucketID(bucketID, includePrivate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentByBucketID", reflect.TypeOf((*MockBSDB)(nil).GetPaymentByBucketID), bucketID, includePrivate)
}

// GetPaymentByBucketName mocks base method.
func (m *MockBSDB) GetPaymentByBucketName(bucketName string, includePrivate bool) (*StreamRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentByBucketName", bucketName, includePrivate)
	ret0, _ := ret[0].(*StreamRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentByBucketName indicates an expected call of GetPaymentByBucketName.
func (mr *MockBSDBMockRecorder) GetPaymentByBucketName(bucketName, includePrivate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentByBucketName", reflect.TypeOf((*MockBSDB)(nil).GetPaymentByBucketName), bucketName, includePrivate)
}

// GetPaymentByPaymentAddress mocks base method.
func (m *MockBSDB) GetPaymentByPaymentAddress(address common.Address) (*StreamRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentByPaymentAddress", address)
	ret0, _ := ret[0].(*StreamRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentByPaymentAddress indicates an expected call of GetPaymentByPaymentAddress.
func (mr *MockBSDBMockRecorder) GetPaymentByPaymentAddress(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentByPaymentAddress", reflect.TypeOf((*MockBSDB)(nil).GetPaymentByPaymentAddress), address)
}

// GetPermissionByResourceAndPrincipal mocks base method.
func (m *MockBSDB) GetPermissionByResourceAndPrincipal(resourceType, principalType, principalValue string, resourceID common.Hash) (*Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionByResourceAndPrincipal", resourceType, principalType, principalValue, resourceID)
	ret0, _ := ret[0].(*Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionByResourceAndPrincipal indicates an expected call of GetPermissionByResourceAndPrincipal.
func (mr *MockBSDBMockRecorder) GetPermissionByResourceAndPrincipal(resourceType, principalType, principalValue, resourceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionByResourceAndPrincipal", reflect.TypeOf((*MockBSDB)(nil).GetPermissionByResourceAndPrincipal), resourceType, principalType, principalValue, resourceID)
}

// GetPermissionsByResourceAndPrincipleType mocks base method.
func (m *MockBSDB) GetPermissionsByResourceAndPrincipleType(resourceType, principalType string, resourceID common.Hash, includeRemoved bool) ([]*Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionsByResourceAndPrincipleType", resourceType, principalType, resourceID, includeRemoved)
	ret0, _ := ret[0].([]*Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionsByResourceAndPrincipleType indicates an expected call of GetPermissionsByResourceAndPrincipleType.
func (mr *MockBSDBMockRecorder) GetPermissionsByResourceAndPrincipleType(resourceType, principalType, resourceID, includeRemoved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionsByResourceAndPrincipleType", reflect.TypeOf((*MockBSDB)(nil).GetPermissionsByResourceAndPrincipleType), resourceType, principalType, resourceID, includeRemoved)
}

// GetStatementsByPolicyID mocks base method.
func (m *MockBSDB) GetStatementsByPolicyID(policyIDList []common.Hash, includeRemoved bool) ([]*Statement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatementsByPolicyID", policyIDList, includeRemoved)
	ret0, _ := ret[0].([]*Statement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatementsByPolicyID indicates an expected call of GetStatementsByPolicyID.
func (mr *MockBSDBMockRecorder) GetStatementsByPolicyID(policyIDList, includeRemoved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatementsByPolicyID", reflect.TypeOf((*MockBSDB)(nil).GetStatementsByPolicyID), policyIDList, includeRemoved)
}

// GetSwitchDBSignal mocks base method.
func (m *MockBSDB) GetSwitchDBSignal() (*MasterDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwitchDBSignal")
	ret0, _ := ret[0].(*MasterDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwitchDBSignal indicates an expected call of GetSwitchDBSignal.
func (mr *MockBSDBMockRecorder) GetSwitchDBSignal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwitchDBSignal", reflect.TypeOf((*MockBSDB)(nil).GetSwitchDBSignal))
}

// GetUserBuckets mocks base method.
func (m *MockBSDB) GetUserBuckets(accountID common.Address, includeRemoved bool) ([]*Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBuckets", accountID, includeRemoved)
	ret0, _ := ret[0].([]*Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBuckets indicates an expected call of GetUserBuckets.
func (mr *MockBSDBMockRecorder) GetUserBuckets(accountID, includeRemoved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBuckets", reflect.TypeOf((*MockBSDB)(nil).GetUserBuckets), accountID, includeRemoved)
}

// GetUserBucketsCount mocks base method.
func (m *MockBSDB) GetUserBucketsCount(accountID common.Address, includeRemoved bool) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBucketsCount", accountID, includeRemoved)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBucketsCount indicates an expected call of GetUserBucketsCount.
func (mr *MockBSDBMockRecorder) GetUserBucketsCount(accountID, includeRemoved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBucketsCount", reflect.TypeOf((*MockBSDB)(nil).GetUserBucketsCount), accountID, includeRemoved)
}

// GetVirtualGroupFamiliesByVgfID mocks base method.
func (m *MockBSDB) GetVirtualGroupFamiliesByVgfID(vgfID uint32) (*GlobalVirtualGroupFamily, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualGroupFamiliesByVgfID", vgfID)
	ret0, _ := ret[0].(*GlobalVirtualGroupFamily)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualGroupFamiliesByVgfID indicates an expected call of GetVirtualGroupFamiliesByVgfID.
func (mr *MockBSDBMockRecorder) GetVirtualGroupFamiliesByVgfID(vgfID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualGroupFamiliesByVgfID", reflect.TypeOf((*MockBSDB)(nil).GetVirtualGroupFamiliesByVgfID), vgfID)
}

// ListBucketsBindingOnPrimarySP mocks base method.
func (m *MockBSDB) ListBucketsBindingOnPrimarySP(spID uint32, startAfter common.Hash, limit int) ([]*Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBucketsBindingOnPrimarySP", spID, startAfter, limit)
	ret0, _ := ret[0].([]*Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBucketsBindingOnPrimarySP indicates an expected call of ListBucketsBindingOnPrimarySP.
func (mr *MockBSDBMockRecorder) ListBucketsBindingOnPrimarySP(spID, startAfter, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBucketsBindingOnPrimarySP", reflect.TypeOf((*MockBSDB)(nil).ListBucketsBindingOnPrimarySP), spID, startAfter, limit)
}

// ListBucketsBindingOnSecondarySP mocks base method.
func (m *MockBSDB) ListBucketsBindingOnSecondarySP(spID uint32, startAfter common.Hash, limit int) ([]*Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBucketsBindingOnSecondarySP", spID, startAfter, limit)
	ret0, _ := ret[0].([]*Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBucketsBindingOnSecondarySP indicates an expected call of ListBucketsBindingOnSecondarySP.
func (mr *MockBSDBMockRecorder) ListBucketsBindingOnSecondarySP(spID, startAfter, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBucketsBindingOnSecondarySP", reflect.TypeOf((*MockBSDB)(nil).ListBucketsBindingOnSecondarySP), spID, startAfter, limit)
}

// ListBucketsByBucketID mocks base method.
func (m *MockBSDB) ListBucketsByBucketID(ids []common.Hash, includeRemoved bool) ([]*Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBucketsByBucketID", ids, includeRemoved)
	ret0, _ := ret[0].([]*Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBucketsByBucketID indicates an expected call of ListBucketsByBucketID.
func (mr *MockBSDBMockRecorder) ListBucketsByBucketID(ids, includeRemoved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBucketsByBucketID", reflect.TypeOf((*MockBSDB)(nil).ListBucketsByBucketID), ids, includeRemoved)
}

// ListBucketsByVgfID mocks base method.
func (m *MockBSDB) ListBucketsByVgfID(vgfIDs []uint32, startAfter common.Hash, limit int) ([]*Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBucketsByVgfID", vgfIDs, startAfter, limit)
	ret0, _ := ret[0].([]*Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBucketsByVgfID indicates an expected call of ListBucketsByVgfID.
func (mr *MockBSDBMockRecorder) ListBucketsByVgfID(vgfIDs, startAfter, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBucketsByVgfID", reflect.TypeOf((*MockBSDB)(nil).ListBucketsByVgfID), vgfIDs, startAfter, limit)
}

// ListDeletedObjectsByBlockNumberRange mocks base method.
func (m *MockBSDB) ListDeletedObjectsByBlockNumberRange(startBlockNumber, endBlockNumber int64, includePrivate bool) ([]*Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeletedObjectsByBlockNumberRange", startBlockNumber, endBlockNumber, includePrivate)
	ret0, _ := ret[0].([]*Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeletedObjectsByBlockNumberRange indicates an expected call of ListDeletedObjectsByBlockNumberRange.
func (mr *MockBSDBMockRecorder) ListDeletedObjectsByBlockNumberRange(startBlockNumber, endBlockNumber, includePrivate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeletedObjectsByBlockNumberRange", reflect.TypeOf((*MockBSDB)(nil).ListDeletedObjectsByBlockNumberRange), startBlockNumber, endBlockNumber, includePrivate)
}

// ListExpiredBucketsBySp mocks base method.
func (m *MockBSDB) ListExpiredBucketsBySp(createAt int64, primarySpID uint32, limit int64) ([]*Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExpiredBucketsBySp", createAt, primarySpID, limit)
	ret0, _ := ret[0].([]*Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExpiredBucketsBySp indicates an expected call of ListExpiredBucketsBySp.
func (mr *MockBSDBMockRecorder) ListExpiredBucketsBySp(createAt, primarySpID, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExpiredBucketsBySp", reflect.TypeOf((*MockBSDB)(nil).ListExpiredBucketsBySp), createAt, primarySpID, limit)
}

// ListGroupsByNameAndSourceType mocks base method.
func (m *MockBSDB) ListGroupsByNameAndSourceType(name, prefix, sourceType string, limit, offset int, includeRemoved bool) ([]*Group, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupsByNameAndSourceType", name, prefix, sourceType, limit, offset, includeRemoved)
	ret0, _ := ret[0].([]*Group)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupsByNameAndSourceType indicates an expected call of ListGroupsByNameAndSourceType.
func (mr *MockBSDBMockRecorder) ListGroupsByNameAndSourceType(name, prefix, sourceType, limit, offset, includeRemoved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsByNameAndSourceType", reflect.TypeOf((*MockBSDB)(nil).ListGroupsByNameAndSourceType), name, prefix, sourceType, limit, offset, includeRemoved)
}

// ListGvgByBucketID mocks base method.
func (m *MockBSDB) ListGvgByBucketID(bucketID common.Hash) ([]*GlobalVirtualGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGvgByBucketID", bucketID)
	ret0, _ := ret[0].([]*GlobalVirtualGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGvgByBucketID indicates an expected call of ListGvgByBucketID.
func (mr *MockBSDBMockRecorder) ListGvgByBucketID(bucketID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGvgByBucketID", reflect.TypeOf((*MockBSDB)(nil).ListGvgByBucketID), bucketID)
}

// ListGvgByPrimarySpID mocks base method.
func (m *MockBSDB) ListGvgByPrimarySpID(spID uint32) ([]*GlobalVirtualGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGvgByPrimarySpID", spID)
	ret0, _ := ret[0].([]*GlobalVirtualGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGvgByPrimarySpID indicates an expected call of ListGvgByPrimarySpID.
func (mr *MockBSDBMockRecorder) ListGvgByPrimarySpID(spID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGvgByPrimarySpID", reflect.TypeOf((*MockBSDB)(nil).ListGvgByPrimarySpID), spID)
}

// ListGvgBySecondarySpID mocks base method.
func (m *MockBSDB) ListGvgBySecondarySpID(spID uint32) ([]*GlobalVirtualGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGvgBySecondarySpID", spID)
	ret0, _ := ret[0].([]*GlobalVirtualGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGvgBySecondarySpID indicates an expected call of ListGvgBySecondarySpID.
func (mr *MockBSDBMockRecorder) ListGvgBySecondarySpID(spID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGvgBySecondarySpID", reflect.TypeOf((*MockBSDB)(nil).ListGvgBySecondarySpID), spID)
}

// ListLvgByGvgAndBucketID mocks base method.
func (m *MockBSDB) ListLvgByGvgAndBucketID(bucketID common.Hash, gvgIDs []uint32) ([]*LocalVirtualGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLvgByGvgAndBucketID", bucketID, gvgIDs)
	ret0, _ := ret[0].([]*LocalVirtualGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLvgByGvgAndBucketID indicates an expected call of ListLvgByGvgAndBucketID.
func (mr *MockBSDBMockRecorder) ListLvgByGvgAndBucketID(bucketID, gvgIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLvgByGvgAndBucketID", reflect.TypeOf((*MockBSDB)(nil).ListLvgByGvgAndBucketID), bucketID, gvgIDs)
}

// ListLvgByGvgID mocks base method.
func (m *MockBSDB) ListLvgByGvgID(gvgIDs []uint32) ([]*LocalVirtualGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLvgByGvgID", gvgIDs)
	ret0, _ := ret[0].([]*LocalVirtualGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLvgByGvgID indicates an expected call of ListLvgByGvgID.
func (mr *MockBSDBMockRecorder) ListLvgByGvgID(gvgIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLvgByGvgID", reflect.TypeOf((*MockBSDB)(nil).ListLvgByGvgID), gvgIDs)
}

// ListMigrateBucketEvents mocks base method.
func (m *MockBSDB) ListMigrateBucketEvents(blockID uint64, spID uint32) ([]*EventMigrationBucket, []*EventCompleteMigrationBucket, []*EventCancelMigrationBucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMigrateBucketEvents", blockID, spID)
	ret0, _ := ret[0].([]*EventMigrationBucket)
	ret1, _ := ret[1].([]*EventCompleteMigrationBucket)
	ret2, _ := ret[2].([]*EventCancelMigrationBucket)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListMigrateBucketEvents indicates an expected call of ListMigrateBucketEvents.
func (mr *MockBSDBMockRecorder) ListMigrateBucketEvents(blockID, spID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMigrateBucketEvents", reflect.TypeOf((*MockBSDB)(nil).ListMigrateBucketEvents), blockID, spID)
}

// ListObjectsByBucketName mocks base method.
func (m *MockBSDB) ListObjectsByBucketName(bucketName, continuationToken, prefix, delimiter string, maxKeys int, includeRemoved bool) ([]*ListObjectsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectsByBucketName", bucketName, continuationToken, prefix, delimiter, maxKeys, includeRemoved)
	ret0, _ := ret[0].([]*ListObjectsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectsByBucketName indicates an expected call of ListObjectsByBucketName.
func (mr *MockBSDBMockRecorder) ListObjectsByBucketName(bucketName, continuationToken, prefix, delimiter, maxKeys, includeRemoved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectsByBucketName", reflect.TypeOf((*MockBSDB)(nil).ListObjectsByBucketName), bucketName, continuationToken, prefix, delimiter, maxKeys, includeRemoved)
}

// ListObjectsByLVGID mocks base method.
func (m *MockBSDB) ListObjectsByLVGID(lvgIDs []uint32, bucketID, startAfter common.Hash, limit int) ([]*Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectsByLVGID", lvgIDs, bucketID, startAfter, limit)
	ret0, _ := ret[0].([]*Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectsByLVGID indicates an expected call of ListObjectsByLVGID.
func (mr *MockBSDBMockRecorder) ListObjectsByLVGID(lvgIDs, bucketID, startAfter, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectsByLVGID", reflect.TypeOf((*MockBSDB)(nil).ListObjectsByLVGID), lvgIDs, bucketID, startAfter, limit)
}

// ListObjectsByObjectID mocks base method.
func (m *MockBSDB) ListObjectsByObjectID(ids []common.Hash, includeRemoved bool) ([]*Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectsByObjectID", ids, includeRemoved)
	ret0, _ := ret[0].([]*Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectsByObjectID indicates an expected call of ListObjectsByObjectID.
func (mr *MockBSDBMockRecorder) ListObjectsByObjectID(ids, includeRemoved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectsByObjectID", reflect.TypeOf((*MockBSDB)(nil).ListObjectsByObjectID), ids, includeRemoved)
}

// ListObjectsInGVG mocks base method.
func (m *MockBSDB) ListObjectsInGVG(gvgID uint32, startAfter common.Hash, limit int) ([]*Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectsInGVG", gvgID, startAfter, limit)
	ret0, _ := ret[0].([]*Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectsInGVG indicates an expected call of ListObjectsInGVG.
func (mr *MockBSDBMockRecorder) ListObjectsInGVG(gvgID, startAfter, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectsInGVG", reflect.TypeOf((*MockBSDB)(nil).ListObjectsInGVG), gvgID, startAfter, limit)
}

// ListObjectsInGVGAndBucket mocks base method.
func (m *MockBSDB) ListObjectsInGVGAndBucket(bucketID common.Hash, gvgID uint32, startAfter common.Hash, limit int) ([]*Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectsInGVGAndBucket", bucketID, gvgID, startAfter, limit)
	ret0, _ := ret[0].([]*Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectsInGVGAndBucket indicates an expected call of ListObjectsInGVGAndBucket.
func (mr *MockBSDBMockRecorder) ListObjectsInGVGAndBucket(bucketID, gvgID, startAfter, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectsInGVGAndBucket", reflect.TypeOf((*MockBSDB)(nil).ListObjectsInGVGAndBucket), bucketID, gvgID, startAfter, limit)
}

// ListPrimaryObjects mocks base method.
func (m *MockBSDB) ListPrimaryObjects(spID uint32, bucketID, startAfter common.Hash, limit int) ([]*Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrimaryObjects", spID, bucketID, startAfter, limit)
	ret0, _ := ret[0].([]*Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrimaryObjects indicates an expected call of ListPrimaryObjects.
func (mr *MockBSDBMockRecorder) ListPrimaryObjects(spID, bucketID, startAfter, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrimaryObjects", reflect.TypeOf((*MockBSDB)(nil).ListPrimaryObjects), spID, bucketID, startAfter, limit)
}

// ListSecondaryObjects mocks base method.
func (m *MockBSDB) ListSecondaryObjects(spID uint32, bucketID, startAfter common.Hash, limit int) ([]*Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecondaryObjects", spID, bucketID, startAfter, limit)
	ret0, _ := ret[0].([]*Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecondaryObjects indicates an expected call of ListSecondaryObjects.
func (mr *MockBSDBMockRecorder) ListSecondaryObjects(spID, bucketID, startAfter, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecondaryObjects", reflect.TypeOf((*MockBSDB)(nil).ListSecondaryObjects), spID, bucketID, startAfter, limit)
}

// ListSpExitEvents mocks base method.
func (m *MockBSDB) ListSpExitEvents(blockID uint64, operatorAddress common.Address) (*EventStorageProviderExit, *EventCompleteStorageProviderExit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpExitEvents", blockID, operatorAddress)
	ret0, _ := ret[0].(*EventStorageProviderExit)
	ret1, _ := ret[1].(*EventCompleteStorageProviderExit)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSpExitEvents indicates an expected call of ListSpExitEvents.
func (mr *MockBSDBMockRecorder) ListSpExitEvents(blockID, operatorAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpExitEvents", reflect.TypeOf((*MockBSDB)(nil).ListSpExitEvents), blockID, operatorAddress)
}

// ListSwapOutEvents mocks base method.
func (m *MockBSDB) ListSwapOutEvents(blockID uint64, spID uint32) ([]*EventSwapOut, []*EventCompleteSwapOut, []*EventCancelSwapOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSwapOutEvents", blockID, spID)
	ret0, _ := ret[0].([]*EventSwapOut)
	ret1, _ := ret[1].([]*EventCompleteSwapOut)
	ret2, _ := ret[2].([]*EventCancelSwapOut)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListSwapOutEvents indicates an expected call of ListSwapOutEvents.
func (mr *MockBSDBMockRecorder) ListSwapOutEvents(blockID, spID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSwapOutEvents", reflect.TypeOf((*MockBSDB)(nil).ListSwapOutEvents), blockID, spID)
}

// ListVgfByGvgID mocks base method.
func (m *MockBSDB) ListVgfByGvgID(gvgIDs []uint32) ([]*GlobalVirtualGroupFamily, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVgfByGvgID", gvgIDs)
	ret0, _ := ret[0].([]*GlobalVirtualGroupFamily)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVgfByGvgID indicates an expected call of ListVgfByGvgID.
func (mr *MockBSDBMockRecorder) ListVgfByGvgID(gvgIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVgfByGvgID", reflect.TypeOf((*MockBSDB)(nil).ListVgfByGvgID), gvgIDs)
}

// ListVirtualGroupFamiliesBySpID mocks base method.
func (m *MockBSDB) ListVirtualGroupFamiliesBySpID(spID uint32) ([]*GlobalVirtualGroupFamily, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualGroupFamiliesBySpID", spID)
	ret0, _ := ret[0].([]*GlobalVirtualGroupFamily)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualGroupFamiliesBySpID indicates an expected call of ListVirtualGroupFamiliesBySpID.
func (mr *MockBSDBMockRecorder) ListVirtualGroupFamiliesBySpID(spID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualGroupFamiliesBySpID", reflect.TypeOf((*MockBSDB)(nil).ListVirtualGroupFamiliesBySpID), spID)
}
